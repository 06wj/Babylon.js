{"version":3,"sources":["webpack://PTLIB/webpack/universalModuleDefinition","webpack://PTLIB/webpack/bootstrap","webpack://PTLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/legacy/legacy.ts","webpack://PTLIB/../node_modules/webpack/buildin/global.js","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/brickProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/brickProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/cloudProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/cloudProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/fireProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/fireProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/grassProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/grassProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/marbleProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/marbleProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/normalMapProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/normalMapProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/roadProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/roadProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/starfieldProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/starfieldProceduralTexture.fragment.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/woodProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/woodProceduralTexture.fragment.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","ProceduralTexturesLib","globalObject","global","undefined","mat","BABYLON","g","this","Function","eval","e","babylonjs_1","BrickProceduralTexture","_super","size","scene","fallbackTexture","generateMipMaps","_this","_numberOfBricksHeight","_numberOfBricksWidth","_jointColor","Color3","_brickColor","updateShaderUniforms","__extends","setFloat","setColor3","serialize","serializationObject","SerializationHelper","Serialize","customType","Parse","parsedTexture","rootUrl","_size","_generateMipMaps","__decorate","serializeAsColor3","ProceduralTexture","shader","Effect","ShadersStore","CloudProceduralTexture","_skyColor","Color4","_cloudColor","setColor4","serializeAsColor4","FireProceduralTexture","_time","_speed","Vector2","_autoGenerateTime","_alphaThreshold","_fireColors","RedFireColors","setVector2","render","useCameraPostProcess","getScene","getAnimationRatio","fireColors","length","push","asArray","texture","colors","FromArray","serializeAsVector2","GrassProceduralTexture","_groundColor","_grassColors","grassColors","MarbleProceduralTexture","_numberOfTilesHeight","_numberOfTilesWidth","_amplitude","NormalMapProceduralTexture","setTexture","_baseTexture","getRenderSize","resize","serializeAsTexture","PerlinNoiseProceduralTexture","time","timeScale","translationSpeed","_currentTranslation","deltaTime","getEngine","getDeltaTime","RoadProceduralTexture","_roadColor","StarfieldProceduralTexture","_alpha","_beta","_zoom","_formuparam","_stepsize","_tile","_brightness","_darkmatter","_distfading","_saturation","WoodProceduralTexture","_ampScale","_woodColor"],"mappings":"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","file":"babylonjs.proceduralTextures.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-procedural-textures\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-procedural-textures\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"PTLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export * from \"./brick\";\r\nexport * from \"./cloud\";\r\nexport * from \"./fire\";\r\nexport * from \"./grass\";\r\nexport * from \"./marble\";\r\nexport * from \"./normalMap\";\r\nexport * from \"./perlinNoise\";\r\nexport * from \"./road\";\r\nexport * from \"./starfield\";\r\nexport * from \"./wood\";","import * as ProceduralTexturesLib from \"../src/index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (var mat in ProceduralTexturesLib) {\r\n        if (ProceduralTexturesLib.hasOwnProperty(mat)) {\r\n            (<any>globalObject).BABYLON[mat] = (<any>ProceduralTexturesLib)[mat];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"../src/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./brickProceduralTexture\";","import { ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./brickProceduralTexture.fragment\";\r\n\r\nexport class BrickProceduralTexture extends ProceduralTexture {\r\n    private _numberOfBricksHeight: number = 15;\r\n    private _numberOfBricksWidth: number = 5;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n    private _brickColor = new Color3(0.77, 0.47, 0.40);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"brickProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfBricksHeight\", this._numberOfBricksHeight);\r\n        this.setFloat(\"numberOfBricksWidth\", this._numberOfBricksWidth);\r\n        this.setColor3(\"brickColor\", this._brickColor);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksHeight(): number {\r\n        return this._numberOfBricksHeight;\r\n    }\r\n\r\n    public set numberOfBricksHeight(value: number) {\r\n        this._numberOfBricksHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksWidth(): number {\r\n        return this._numberOfBricksWidth;\r\n    }\r\n\r\n    public set numberOfBricksWidth(value: number) {\r\n        this._numberOfBricksWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get brickColor(): Color3 {\r\n        return this._brickColor;\r\n    }\r\n\r\n    public set brickColor(value: Color3) {\r\n        this._brickColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this brick procedural texture\r\n     * @returns a serialized brick procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.BrickProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Brick Procedural Texture from parsed brick procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing brick procedural texture information\r\n     * @returns a parsed Brick Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): BrickProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new BrickProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'brickProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float numberOfBricksHeight;\nuniform float numberOfBricksWidth;\nuniform vec3 brickColor;\nuniform vec3 jointColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nfloat roundF(float number){\nreturn sign(number)*floor(abs(number)+0.5);\n}\nvoid main(void)\n{\nfloat brickW=1.0/numberOfBricksWidth;\nfloat brickH=1.0/numberOfBricksHeight;\nfloat jointWPercentage=0.01;\nfloat jointHPercentage=0.05;\nvec3 color=brickColor;\nfloat yi=vUV.y/brickH;\nfloat nyi=roundF(yi);\nfloat xi=vUV.x/brickW;\nif (mod(floor(yi),2.0) == 0.0){\nxi=xi-0.5;\n}\nfloat nxi=roundF(xi);\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\n}\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\n}\nelse {\nfloat brickColorSwitch=mod(floor(yi)+floor(xi),3.0);\nif (brickColorSwitch == 0.0)\ncolor=mix(color,vec3(0.33,0.33,0.33),0.3);\nelse if (brickColorSwitch == 2.0)\ncolor=mix(color,vec3(0.11,0.11,0.11),0.3);\n}\ngl_FragColor=vec4(color,1.0);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./cloudProceduralTexture\";","import { ProceduralTexture, Color4, Scene, Texture, serializeAsColor4, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./cloudProceduralTexture.fragment\";\r\n\r\nexport class CloudProceduralTexture extends ProceduralTexture {\r\n    private _skyColor = new Color4(0.15, 0.68, 1.0, 1.0);\r\n    private _cloudColor = new Color4(1, 1, 1, 1.0);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"cloudProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor4(\"skyColor\", this._skyColor);\r\n        this.setColor4(\"cloudColor\", this._cloudColor);\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get skyColor(): Color4 {\r\n        return this._skyColor;\r\n    }\r\n\r\n    public set skyColor(value: Color4) {\r\n        this._skyColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get cloudColor(): Color4 {\r\n        return this._cloudColor;\r\n    }\r\n\r\n    public set cloudColor(value: Color4) {\r\n        this._cloudColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this cloud procedural texture\r\n     * @returns a serialized cloud procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.CloudProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Cloud Procedural Texture from parsed cloud procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing cloud procedural texture information\r\n     * @returns a parsed Cloud Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CloudProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new CloudProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'cloudProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vUV;\nuniform vec4 skyColor;\nuniform vec4 cloudColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main() {\nvec2 p=vUV*12.0;\nvec4 c=mix(skyColor,cloudColor,fbm(p));\ngl_FragColor=c;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./fireProceduralTexture\";","import { ProceduralTexture, Vector2, Color3, Scene, Texture, serialize, serializeAsVector2, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./fireProceduralTexture.fragment\";\r\n\r\nexport class FireProceduralTexture extends ProceduralTexture {\r\n    private _time: number = 0.0;\r\n    private _speed = new Vector2(0.5, 0.3);\r\n    private _autoGenerateTime: boolean = true;\r\n    private _fireColors: Color3[];\r\n    private _alphaThreshold: number = 0.5;\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"fireProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this._fireColors = FireProceduralTexture.RedFireColors;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"time\", this._time);\r\n        this.setVector2(\"speed\", this._speed);\r\n        this.setColor3(\"c1\", this._fireColors[0]);\r\n        this.setColor3(\"c2\", this._fireColors[1]);\r\n        this.setColor3(\"c3\", this._fireColors[2]);\r\n        this.setColor3(\"c4\", this._fireColors[3]);\r\n        this.setColor3(\"c5\", this._fireColors[4]);\r\n        this.setColor3(\"c6\", this._fireColors[5]);\r\n        this.setFloat(\"alphaThreshold\", this._alphaThreshold);\r\n    }\r\n\r\n    public render(useCameraPostProcess?: boolean) {\r\n        let scene = this.getScene();\r\n        if (this._autoGenerateTime && scene) {\r\n            this._time += scene.getAnimationRatio() * 0.03;\r\n            this.updateShaderUniforms();\r\n        }\r\n        super.render(useCameraPostProcess);\r\n    }\r\n\r\n    public static get PurpleFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 1.0),\r\n            new Color3(0.9, 0.0, 1.0),\r\n            new Color3(0.2, 0.0, 1.0),\r\n            new Color3(1.0, 0.9, 1.0),\r\n            new Color3(0.1, 0.1, 1.0),\r\n            new Color3(0.9, 0.9, 1.0)\r\n        ];\r\n    }\r\n\r\n    public static get GreenFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.3, 0.4, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0)\r\n        ];\r\n    }\r\n\r\n    public static get RedFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 0.1),\r\n            new Color3(0.9, 0.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(1.0, 0.9, 0.0),\r\n            new Color3(0.1, 0.1, 0.1),\r\n            new Color3(0.9, 0.9, 0.9)\r\n        ];\r\n    }\r\n\r\n    public static get BlueFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.1, 0.0, 0.5),\r\n            new Color3(0.0, 0.0, 0.5),\r\n            new Color3(0.1, 0.0, 0.2),\r\n            new Color3(0.0, 0.0, 1.0),\r\n            new Color3(0.1, 0.2, 0.3),\r\n            new Color3(0.0, 0.2, 0.9)\r\n        ];\r\n    }\r\n\r\n    @serialize()\r\n    public get autoGenerateTime(): boolean {\r\n        return this._autoGenerateTime;\r\n    }\r\n\r\n    public set autoGenerateTime(value: boolean) {\r\n        this._autoGenerateTime = value;\r\n    }\r\n\r\n    public get fireColors(): Color3[] {\r\n        return this._fireColors;\r\n    }\r\n\r\n    public set fireColors(value: Color3[]) {\r\n        this._fireColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get time(): number {\r\n        return this._time;\r\n    }\r\n\r\n    public set time(value: number) {\r\n        this._time = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsVector2()\r\n    public get speed(): Vector2 {\r\n        return this._speed;\r\n    }\r\n\r\n    public set speed(value: Vector2) {\r\n        this._speed = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get alphaThreshold(): number {\r\n        return this._alphaThreshold;\r\n    }\r\n\r\n    public set alphaThreshold(value: number) {\r\n        this._alphaThreshold = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this fire procedural texture\r\n     * @returns a serialized fire procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.FireProceduralTexture\";\r\n\r\n        serializationObject.fireColors = [];\r\n        for (var i = 0; i < this._fireColors.length; i++) {\r\n            serializationObject.fireColors.push(this._fireColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Fire Procedural Texture from parsed fire procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing fire procedural texture information\r\n     * @returns a parsed Fire Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): FireProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new FireProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.fireColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.fireColors[i]));\r\n        }\r\n\r\n        texture.fireColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'fireProceduralTexturePixelShader';\nlet shader = `precision highp float;\nuniform float time;\nuniform vec3 c1;\nuniform vec3 c2;\nuniform vec3 c3;\nuniform vec3 c4;\nuniform vec3 c5;\nuniform vec3 c6;\nuniform vec2 speed;\nuniform float shift;\nuniform float alphaThreshold;\nvarying vec2 vUV;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main() {\nvec2 p=vUV*8.0;\nfloat q=fbm(p-time*0.1);\nvec2 r=vec2(fbm(p+q+time*speed.x-p.x-p.y),fbm(p+q-time*speed.y));\nvec3 c=mix(c1,c2,fbm(p+r))+mix(c3,c4,r.x)-mix(c5,c6,r.y);\nvec3 color=c*cos(shift*vUV.y);\nfloat luminance=dot(color.rgb,vec3(0.3,0.59,0.11));\ngl_FragColor=vec4(color,luminance*alphaThreshold+(1.0-alphaThreshold));\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./grassProceduralTexture\";","import { ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./grassProceduralTexture.fragment\";\r\n\r\nexport class GrassProceduralTexture extends ProceduralTexture {\r\n    private _grassColors: Color3[];\r\n    private _groundColor = new Color3(1, 1, 1);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"grassProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n\r\n        this._grassColors = [\r\n            new Color3(0.29, 0.38, 0.02),\r\n            new Color3(0.36, 0.49, 0.09),\r\n            new Color3(0.51, 0.6, 0.28)\r\n        ];\r\n\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"herb1Color\", this._grassColors[0]);\r\n        this.setColor3(\"herb2Color\", this._grassColors[1]);\r\n        this.setColor3(\"herb3Color\", this._grassColors[2]);\r\n        this.setColor3(\"groundColor\", this._groundColor);\r\n    }\r\n\r\n    public get grassColors(): Color3[] {\r\n        return this._grassColors;\r\n    }\r\n\r\n    public set grassColors(value: Color3[]) {\r\n        this._grassColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get groundColor(): Color3 {\r\n        return this._groundColor;\r\n    }\r\n\r\n    public set groundColor(value: Color3) {\r\n        this._groundColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this grass procedural texture\r\n     * @returns a serialized grass procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.GrassProceduralTexture\";\r\n\r\n        serializationObject.grassColors = [];\r\n        for (var i = 0; i < this._grassColors.length; i++) {\r\n            serializationObject.grassColors.push(this._grassColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Grass Procedural Texture from parsed grass procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing grass procedural texture information\r\n     * @returns a parsed Grass Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): GrassProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new GrassProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.grassColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.grassColors[i]));\r\n        }\r\n\r\n        texture.grassColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'grassProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform vec3 herb1Color;\nuniform vec3 herb2Color;\nuniform vec3 herb3Color;\nuniform vec3 groundColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nvec3 color=mix(groundColor,herb1Color,rand(gl_FragCoord.xy*4.0));\ncolor=mix(color,herb2Color,rand(gl_FragCoord.xy*8.0));\ncolor=mix(color,herb3Color,rand(gl_FragCoord.xy));\ncolor=mix(color,herb1Color,fbm(gl_FragCoord.xy*16.0));\ngl_FragColor=vec4(color,1.0);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./marbleProceduralTexture\";","import { ProceduralTexture, Color3, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./marbleProceduralTexture.fragment\";\r\n\r\nexport class MarbleProceduralTexture extends ProceduralTexture {\r\n    private _numberOfTilesHeight: number = 3;\r\n    private _numberOfTilesWidth: number = 3;\r\n    private _amplitude: number = 9.0;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"marbleProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfTilesHeight\", this._numberOfTilesHeight);\r\n        this.setFloat(\"numberOfTilesWidth\", this._numberOfTilesWidth);\r\n        this.setFloat(\"amplitude\", this._amplitude);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesHeight(): number {\r\n        return this._numberOfTilesHeight;\r\n    }\r\n\r\n    public set numberOfTilesHeight(value: number) {\r\n        this._numberOfTilesHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    public set amplitude(value: number) {\r\n        this._amplitude = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesWidth(): number {\r\n        return this._numberOfTilesWidth;\r\n    }\r\n\r\n    public set numberOfTilesWidth(value: number) {\r\n        this._numberOfTilesWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this marble procedural texture\r\n     * @returns a serialized marble procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.MarbleProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Marble Procedural Texture from parsed marble procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing marble procedural texture information\r\n     * @returns a parsed Marble Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): MarbleProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new MarbleProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'marbleProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float numberOfTilesHeight;\nuniform float numberOfTilesWidth;\nuniform float amplitude;\nuniform vec3 marbleColor;\nuniform vec3 jointColor;\nconst vec3 tileSize=vec3(1.1,1.0,1.1);\nconst vec3 tilePct=vec3(0.98,1.0,0.98);\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat turbulence(vec2 P)\n{\nfloat val=0.0;\nfloat freq=1.0;\nfor (int i=0; i<4; i++)\n{\nval+=abs(noise(P*freq)/freq);\nfreq*=2.07;\n}\nreturn val;\n}\nfloat roundF(float number){\nreturn sign(number)*floor(abs(number)+0.5);\n}\nvec3 marble_color(float x)\n{\nvec3 col;\nx=0.5*(x+1.);\nx=sqrt(x);\nx=sqrt(x);\nx=sqrt(x);\ncol=vec3(.2+.75*x);\ncol.b*=0.95;\nreturn col;\n}\nvoid main()\n{\nfloat brickW=1.0/numberOfTilesWidth;\nfloat brickH=1.0/numberOfTilesHeight;\nfloat jointWPercentage=0.01;\nfloat jointHPercentage=0.01;\nvec3 color=marbleColor;\nfloat yi=vUV.y/brickH;\nfloat nyi=roundF(yi);\nfloat xi=vUV.x/brickW;\nif (mod(floor(yi),2.0) == 0.0){\nxi=xi-0.5;\n}\nfloat nxi=roundF(xi);\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\n}\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\n}\nelse {\nfloat t=6.28*brickvUV.x/(tileSize.x+noise(vec2(vUV)*6.0));\nt+=amplitude*turbulence(brickvUV.xy);\nt=sin(t);\ncolor=marble_color(t);\n}\ngl_FragColor=vec4(color,0.0);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./normalMapProceduralTexture\";","import { ProceduralTexture, Texture, Scene, serializeAsTexture, SerializationHelper } from \"babylonjs\";\n\nimport \"./normalMapProceduralTexture.fragment\";\n\nexport class NormalMapProceduralTexture extends ProceduralTexture {\n    private _baseTexture: Texture;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"normalMapProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setTexture(\"baseSampler\", this._baseTexture);\n        this.setFloat(\"size\", this.getRenderSize());\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n\n        // We need to update the \"size\" uniform\n        this.updateShaderUniforms();\n    }\n\n    @serializeAsTexture()\n    public get baseTexture(): Texture {\n        return this._baseTexture;\n    }\n\n    public set baseTexture(texture: Texture) {\n        this._baseTexture = texture;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this normal map procedural texture\n     * @returns a serialized normal map procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.NormalMapProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Normal Map Procedural Texture from parsed normal map procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing normal map procedural texture information\n     * @returns a parsed Normal Map Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): NormalMapProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new NormalMapProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","import { Effect } from \"babylonjs\";\n\nlet name = 'normalMapProceduralTexturePixelShader';\nlet shader = `precision highp float;\n\nuniform sampler2D baseSampler;\nuniform float size;\n\nvarying vec2 vUV;\n\nconst vec3 LUMA_COEFFICIENT=vec3(0.2126,0.7152,0.0722);\nfloat lumaAtCoord(vec2 coord)\n{\nvec3 pixel=texture2D(baseSampler,coord).rgb;\nfloat luma=dot(pixel,LUMA_COEFFICIENT);\nreturn luma;\n}\nvoid main()\n{\nfloat lumaU0=lumaAtCoord(vUV+vec2(-1.0,0.0)/size);\nfloat lumaU1=lumaAtCoord(vUV+vec2( 1.0,0.0)/size);\nfloat lumaV0=lumaAtCoord(vUV+vec2( 0.0,-1.0)/size);\nfloat lumaV1=lumaAtCoord(vUV+vec2( 0.0,1.0)/size);\nvec2 slope=(vec2(lumaU0-lumaU1,lumaV0-lumaV1)+1.0)*0.5;\ngl_FragColor=vec4(slope,1.0,1.0);\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./perlinNoiseProceduralTexture\";","import { ProceduralTexture, serialize, Scene, Texture, SerializationHelper } from \"babylonjs\";\n\nimport \"./perlinNoiseProceduralTexture.fragment\";\n\nexport class PerlinNoiseProceduralTexture extends ProceduralTexture {\n    @serialize()\n    public time: number = 0.0;\n\n    @serialize()\n    public timeScale: number = 1.0;\n\n    @serialize()\n    public translationSpeed: number = 1.0;\n\n    private _currentTranslation: number = 0;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"perlinNoiseProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"size\", this.getRenderSize());\n\n        let scene = this.getScene();\n\n        if (!scene) {\n            return;\n        }\n        var deltaTime = scene.getEngine().getDeltaTime();\n\n        this.time += deltaTime;\n        this.setFloat(\"time\", this.time * this.timeScale / 1000);\n\n        this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;\n        this.setFloat(\"translationSpeed\", this._currentTranslation);\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        this.updateShaderUniforms();\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n    }\n\n    /**\n     * Serializes this perlin noise procedural texture\n     * @returns a serialized perlin noise procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.PerlinNoiseProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing perlin noise procedural texture information\n     * @returns a parsed Perlin Noise Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): PerlinNoiseProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","import { Effect } from \"babylonjs\";\n\nlet name = 'perlinNoiseProceduralTexturePixelShader';\nlet shader = `\nprecision highp float;\n\nuniform float size;\nuniform float time;\nuniform float translationSpeed;\n\nvarying vec2 vUV;\n\nfloat r(float n)\n{\nreturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\nreturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89));\n}\nfloat worley(vec2 n,float s)\n{\nfloat dis=1.0;\nfor(int x=-1; x<=1; x++)\n{\nfor(int y=-1; y<=1; y++)\n{\nvec2 p=floor(n/s)+vec2(x,y);\nfloat d=length(r(p)+vec2(x,y)-fract(n/s));\nif (dis>d)\ndis=d;\n}\n}\nreturn 1.0-dis;\n}\nvec3 hash33(vec3 p3)\n{\np3=fract(p3*vec3(0.1031,0.11369,0.13787));\np3+=dot(p3,p3.yxz+19.19);\nreturn -1.0+2.0*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\n}\nfloat perlinNoise(vec3 p)\n{\nvec3 pi=floor(p);\nvec3 pf=p-pi;\nvec3 w=pf*pf*(3.0-2.0*pf);\nreturn mix(\nmix(\nmix(\ndot(pf-vec3(0,0,0),hash33(pi+vec3(0,0,0))),\ndot(pf-vec3(1,0,0),hash33(pi+vec3(1,0,0))),\nw.x\n),\nmix(\ndot(pf-vec3(0,0,1),hash33(pi+vec3(0,0,1))),\ndot(pf-vec3(1,0,1),hash33(pi+vec3(1,0,1))),\nw.x\n),\nw.z\n),\nmix(\nmix(\ndot(pf-vec3(0,1,0),hash33(pi+vec3(0,1,0))),\ndot(pf-vec3(1,1,0),hash33(pi+vec3(1,1,0))),\nw.x\n),\nmix(\ndot(pf-vec3(0,1,1),hash33(pi+vec3(0,1,1))),\ndot(pf-vec3(1,1,1),hash33(pi+vec3(1,1,1))),\nw.x\n),\nw.z\n),\nw.y\n);\n}\n\nvoid main(void)\n{\nvec2 uv=gl_FragCoord.xy+translationSpeed;\nfloat dis=(\n1.0+perlinNoise(vec3(uv/vec2(size,size),time*0.05)*8.0))\n*(1.0+(worley(uv,32.0)+ 0.5*worley(2.0*uv,32.0)+0.25*worley(4.0*uv,32.0))\n);\ngl_FragColor=vec4(vec3(dis/4.0),1.0);\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./roadProceduralTexture\";","import { ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./roadProceduralTexture.fragment\";\r\n\r\nexport class RoadProceduralTexture extends ProceduralTexture {\r\n    private _roadColor = new Color3(0.53, 0.53, 0.53);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"roadProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"roadColor\", this._roadColor);\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get roadColor(): Color3 {\r\n        return this._roadColor;\r\n    }\r\n\r\n    public set roadColor(value: Color3) {\r\n        this._roadColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this road procedural texture\r\n     * @returns a serialized road procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.RoadProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Road Procedural Texture from parsed road procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing road procedural texture information\r\n     * @returns a parsed Road Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): RoadProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new RoadProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'roadProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vUV;\nuniform vec3 roadColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nfloat ratioy=mod(gl_FragCoord.y*100.0 ,fbm(vUV*2.0));\nvec3 color=roadColor*ratioy;\ngl_FragColor=vec4(color,1.0);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./starfieldProceduralTexture\";","import { ProceduralTexture, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\n\nimport \"./starfieldProceduralTexture.fragment\";\n\nexport class StarfieldProceduralTexture extends ProceduralTexture {\n    private _time = 1;\n    private _alpha = 0.5;\n    private _beta = 0.8;\n    private _zoom = 0.8;\n    private _formuparam = 0.53;\n    private _stepsize = 0.1;\n    private _tile = 0.850;\n    private _brightness = 0.0015;\n    private _darkmatter = 0.400;\n    private _distfading = 0.730;\n    private _saturation = 0.850;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"starfieldProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"time\", this._time);\n        this.setFloat(\"alpha\", this._alpha);\n        this.setFloat(\"beta\", this._beta);\n        this.setFloat(\"zoom\", this._zoom);\n        this.setFloat(\"formuparam\", this._formuparam);\n        this.setFloat(\"stepsize\", this._stepsize);\n        this.setFloat(\"tile\", this._tile);\n        this.setFloat(\"brightness\", this._brightness);\n        this.setFloat(\"darkmatter\", this._darkmatter);\n        this.setFloat(\"distfading\", this._distfading);\n        this.setFloat(\"saturation\", this._saturation);\n    }\n\n    @serialize()\n    public get time(): number {\n        return this._time;\n    }\n\n    public set time(value: number) {\n        this._time = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        this._alpha = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get beta(): number {\n        return this._beta;\n    }\n\n    public set beta(value: number) {\n        this._beta = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get formuparam(): number {\n        return this._formuparam;\n    }\n\n    public set formuparam(value: number) {\n        this._formuparam = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get stepsize(): number {\n        return this._stepsize;\n    }\n\n    public set stepsize(value: number) {\n        this._stepsize = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get zoom(): number {\n        return this._zoom;\n    }\n\n    public set zoom(value: number) {\n        this._zoom = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get tile(): number {\n        return this._tile;\n    }\n\n    public set tile(value: number) {\n        this._tile = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get brightness(): number {\n        return this._brightness;\n    }\n\n    public set brightness(value: number) {\n        this._brightness = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get darkmatter(): number {\n        return this._darkmatter;\n    }\n\n    public set darkmatter(value: number) {\n        this._darkmatter = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get distfading(): number {\n        return this._distfading;\n    }\n\n    public set distfading(value: number) {\n        this._distfading = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get saturation(): number {\n        return this._saturation;\n    }\n\n    public set saturation(value: number) {\n        this._saturation = value;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this starfield procedural texture\n     * @returns a serialized starfield procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.StarfieldProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Starfield Procedural Texture from parsed startfield procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing startfield procedural texture information\n     * @returns a parsed Starfield Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): StarfieldProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new StarfieldProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'starfieldProceduralTexturePixelShader';\nlet shader = `precision highp float;\n\n#define volsteps 20\n#define iterations 15\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float time;\nuniform float alpha;\nuniform float beta;\nuniform float zoom;\nuniform float formuparam;\nuniform float stepsize;\nuniform float tile;\nuniform float brightness;\nuniform float darkmatter;\nuniform float distfading;\nuniform float saturation;\nvoid main()\n{\nvec3 dir=vec3(vUV*zoom,1.);\nfloat localTime=time*0.0001;\n\nmat2 rot1=mat2(cos(alpha),sin(alpha),-sin(alpha),cos(alpha));\nmat2 rot2=mat2(cos(beta),sin(beta),-sin(beta),cos(beta));\ndir.xz*=rot1;\ndir.xy*=rot2;\nvec3 from=vec3(1.,.5,0.5);\nfrom+=vec3(-2.,localTime*2.,localTime);\nfrom.xz*=rot1;\nfrom.xy*=rot2;\n\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np=abs(vec3(tile)-mod(p,vec3(tile*2.)));\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\na+=abs(length(p)-pa);\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001);\na*=a*a;\nif (r>6) fade*=1.-dm;\n\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade;\nfade*=distfading;\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation);\ngl_FragColor=vec4(v*.01,1.);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./woodProceduralTexture\";","import { ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./woodProceduralTexture.fragment\";\r\n\r\nexport class WoodProceduralTexture extends ProceduralTexture {\r\n    private _ampScale: number = 100.0;\r\n    private _woodColor: Color3 = new Color3(0.32, 0.17, 0.09);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"woodProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"ampScale\", this._ampScale);\r\n        this.setColor3(\"woodColor\", this._woodColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get ampScale(): number {\r\n        return this._ampScale;\r\n    }\r\n\r\n    public set ampScale(value: number) {\r\n        this._ampScale = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get woodColor(): Color3 {\r\n        return this._woodColor;\r\n    }\r\n\r\n    public set woodColor(value: Color3) {\r\n        this._woodColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this wood procedural texture\r\n     * @returns a serialized wood procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.WoodProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Wood Procedural Texture from parsed wood procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing wood procedural texture information\r\n     * @returns a parsed Wood Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): WoodProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new WoodProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'woodProceduralTexturePixelShader';\nlet shader = `precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float ampScale;\nuniform vec3 woodColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nfloat ratioy=mod(vUV.x*ampScale,2.0+fbm(vUV*0.8));\nvec3 wood=woodColor*ratioy;\ngl_FragColor=vec4(wood,1.0);\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n"],"sourceRoot":""}