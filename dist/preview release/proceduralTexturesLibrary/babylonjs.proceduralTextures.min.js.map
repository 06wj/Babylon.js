{"version":3,"sources":["webpack://PTLIB/webpack/universalModuleDefinition","webpack://PTLIB/webpack/bootstrap","webpack://PTLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/legacy.ts","webpack://PTLIB/../node_modules/webpack/buildin/global.js","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/brickProceduralTexture.ts","webpack://PTLIB/./src/brick/brickProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/cloudProceduralTexture.ts","webpack://PTLIB/./src/cloud/cloudProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/fireProceduralTexture.ts","webpack://PTLIB/./src/fire/fireProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/grassProceduralTexture.ts","webpack://PTLIB/./src/grass/grassProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/marbleProceduralTexture.ts","webpack://PTLIB/./src/marble/marbleProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/normalMapProceduralTexture.ts","webpack://PTLIB/./src/normalMap/normalMapProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.ts","webpack://PTLIB/./src/perlinNoise/perlinNoiseProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/roadProceduralTexture.ts","webpack://PTLIB/./src/road/roadProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/starfieldProceduralTexture.ts","webpack://PTLIB/./src/starfield/starfieldProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/woodProceduralTexture.ts","webpack://PTLIB/./src/wood/woodProceduralTexture.fragment.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","ProceduralTexturesLib","globalObject","global","undefined","mat","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","BrickProceduralTexture","_super","size","scene","fallbackTexture","generateMipMaps","_this","_numberOfBricksHeight","_numberOfBricksWidth","_jointColor","Color3","_brickColor","updateShaderUniforms","__extends","setFloat","setColor3","serialize","serializationObject","SerializationHelper","Serialize","customType","Parse","parsedTexture","rootUrl","_size","_generateMipMaps","__decorate","serializeAsColor3","ProceduralTexture","CloudProceduralTexture","_skyColor","Color4","_cloudColor","setColor4","serializeAsColor4","FireProceduralTexture","_time","_speed","Vector2","_autoGenerateTime","_alphaThreshold","_fireColors","RedFireColors","setVector2","render","useCameraPostProcess","getScene","getAnimationRatio","fireColors","length","push","asArray","texture","colors","FromArray","serializeAsVector2","GrassProceduralTexture","_groundColor","_grassColors","grassColors","MarbleProceduralTexture","_numberOfTilesHeight","_numberOfTilesWidth","_amplitude","NormalMapProceduralTexture","setTexture","_baseTexture","getRenderSize","resize","serializeAsTexture","PerlinNoiseProceduralTexture","time","timeScale","translationSpeed","_currentTranslation","deltaTime","getEngine","getDeltaTime","RoadProceduralTexture","_roadColor","StarfieldProceduralTexture","_alpha","_beta","_zoom","_formuparam","_stepsize","_tile","_brightness","_darkmatter","_distfading","_saturation","WoodProceduralTexture","_ampScale","_woodColor"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,cACA,mBAAAC,eAAAC,IACAD,OAAA,8CAAAJ,GACA,iBAAAC,QACAA,QAAA,iCAAAD,EAAAG,QAAA,cAEAJ,EAAA,MAAAC,EAAAD,EAAA,SARA,CASCO,OAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAX,YAUA,OANAY,EAAAH,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAU,GAAA,EAGAV,EAAAD,QA0DA,OArDAQ,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAhB,EAAAiB,EAAAC,GACAV,EAAAW,EAAAnB,EAAAiB,IACAG,OAAAC,eAAArB,EAAAiB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAxB,GACA,oBAAAyB,eAAAC,aACAN,OAAAC,eAAArB,EAAAyB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAArB,EAAA,cAAiD2B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAiB,EAAAjB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,mBClFAxC,EAAAD,QAAAM,+ICAAoC,EAAAlC,EAAA,IACAkC,EAAAlC,EAAA,IACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,KACAkC,EAAAlC,EAAA,iGCTA,IAAAmC,EAAAnC,EAAA,GAQIoC,OAAkC,IAAXC,EAA0BA,EAA6B,oBAAXxC,OAA0BA,YAASyC,EAC1G,QAA4B,IAAjBF,EAEP,IAAK,IAAIG,KADHH,EAAcI,QAAgBJ,EAAcI,YAClCL,EACRA,EAAsBJ,eAAeQ,KAC/BH,EAAcI,QAAQD,GAAaJ,EAAuBI,iEAK5EL,CAAAlC,EAAA,qCClBA,IAAAyC,EAGAA,EAAA,WACA,OAAAC,KADA,GAIA,IAEAD,KAAAE,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAC,GAED,iBAAAhD,SAAA4C,EAAA5C,QAOAJ,EAAAD,QAAAiD,6ICnBAP,CAAAlC,EAAA,qxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAgD,kCAAIhD,EAAQ,GAEnE,IAAAiD,EAAA,SAAAC,GAMI,SAAAD,EAAYxC,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,yBAA0BC,EAAOC,EAAiBC,IAAgBZ,YANhFa,EAAAC,sBAAgC,GAChCD,EAAAE,qBAA+B,EAC/BF,EAAAG,YAAc,IAAIZ,EAAAa,OAAO,IAAM,IAAM,KACrCJ,EAAAK,YAAc,IAAId,EAAAa,OAAO,IAAM,IAAM,IAIzCJ,EAAKM,yBAyEb,OAjF4CC,EAAAb,EAAAC,GAWjCD,EAAAnB,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,uBAAwBrB,KAAKc,uBAC3Cd,KAAKqB,SAAS,sBAAuBrB,KAAKe,sBAC1Cf,KAAKsB,UAAU,aAActB,KAAKkB,aAClClB,KAAKsB,UAAU,aAActB,KAAKgB,cAItC9C,OAAAC,eAAWoC,EAAAnB,UAAA,4BAAX,WACI,OAAOY,KAAKc,2BAGhB,SAAgCrC,GAC5BuB,KAAKc,sBAAwBrC,EAC7BuB,KAAKmB,wDAITjD,OAAAC,eAAWoC,EAAAnB,UAAA,2BAAX,WACI,OAAOY,KAAKe,0BAGhB,SAA+BtC,GAC3BuB,KAAKe,qBAAuBtC,EAC5BuB,KAAKmB,wDAITjD,OAAAC,eAAWoC,EAAAnB,UAAA,kBAAX,WACI,OAAOY,KAAKgB,iBAGhB,SAAsBvC,GAClBuB,KAAKgB,YAAcvC,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWoC,EAAAnB,UAAA,kBAAX,WACI,OAAOY,KAAKkB,iBAGhB,SAAsBzC,GAClBuB,KAAKkB,YAAczC,EACnBuB,KAAKmB,wDAOFZ,EAAAnB,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,iCAE1BH,GAUGjB,EAAAqB,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIrB,EAAuBsB,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IA1D/LG,GADC7B,EAAAmB,sDAWDU,GADC7B,EAAAmB,qDAWDU,GADC7B,EAAA8B,oDAWDD,GADC7B,EAAA8B,oDAiCL3B,EAjFA,CAA4CH,EAAA+B,mBAA/BrF,EAAAyD,wCCJbxD,EAAAD,QAAA,uuDCAA0C,CAAAlC,EAAA,qxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAgD,kCAAIhD,EAAQ,GAEnE,IAAA8E,EAAA,SAAA5B,GAII,SAAA4B,EAAYrE,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,yBAA0BC,EAAOC,EAAiBC,IAAgBZ,YAJhFa,EAAAwB,UAAY,IAAIjC,EAAAkC,OAAO,IAAM,IAAM,EAAK,GACxCzB,EAAA0B,YAAc,IAAInC,EAAAkC,OAAO,EAAG,EAAG,EAAG,GAItCzB,EAAKM,yBAmDb,OAzD4CC,EAAAgB,EAAA5B,GASjC4B,EAAAhD,UAAA+B,qBAAP,WACInB,KAAKwC,UAAU,WAAYxC,KAAKqC,WAChCrC,KAAKwC,UAAU,aAAcxC,KAAKuC,cAItCrE,OAAAC,eAAWiE,EAAAhD,UAAA,gBAAX,WACI,OAAOY,KAAKqC,eAGhB,SAAoB5D,GAChBuB,KAAKqC,UAAY5D,EACjBuB,KAAKmB,wDAITjD,OAAAC,eAAWiE,EAAAhD,UAAA,kBAAX,WACI,OAAOY,KAAKuC,iBAGhB,SAAsB9D,GAClBuB,KAAKuC,YAAc9D,EACnBuB,KAAKmB,wDAOFiB,EAAAhD,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,iCAE1BH,GAUGY,EAAAR,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIQ,EAAuBP,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IAtC/LG,GADC7B,EAAAqC,kDAWDR,GADC7B,EAAAqC,oDAiCLL,EAzDA,CAA4ChC,EAAA+B,mBAA/BrF,EAAAsF,wCCJbrF,EAAAD,QAAA,8vBCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAA+C,iCAAIhD,EAAQ,IAElE,IAAAoF,EAAA,SAAAlC,GAOI,SAAAkC,EAAY3E,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,wBAAyBC,EAAOC,EAAiBC,IAAgBZ,YAP/Ea,EAAA8B,MAAgB,EAChB9B,EAAA+B,OAAS,IAAIxC,EAAAyC,QAAQ,GAAK,IAC1BhC,EAAAiC,mBAA6B,EAE7BjC,EAAAkC,gBAA0B,GAI9BlC,EAAKmC,YAAcN,EAAsBO,cACzCpC,EAAKM,yBAuJb,OAjK2CC,EAAAsB,EAAAlC,GAahCkC,EAAAtD,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,OAAQrB,KAAK2C,OAC3B3C,KAAKkD,WAAW,QAASlD,KAAK4C,QAC9B5C,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKsB,UAAU,KAAMtB,KAAKgD,YAAY,IACtChD,KAAKqB,SAAS,iBAAkBrB,KAAK+C,kBAGlCL,EAAAtD,UAAA+D,OAAP,SAAcC,GACV,IAAI1C,EAAQV,KAAKqD,WACbrD,KAAK8C,mBAAqBpC,IAC1BV,KAAK2C,OAAqC,IAA5BjC,EAAM4C,oBACpBtD,KAAKmB,wBAETX,EAAApB,UAAM+D,OAAMxF,KAAAqC,KAACoD,IAGjBlF,OAAAC,eAAkBuE,EAAA,wBAAlB,WACI,OACI,IAAItC,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,EAAK,GAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,qCAI7B/C,OAAAC,eAAkBuE,EAAA,uBAAlB,WACI,OACI,IAAItC,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,qCAI7B/C,OAAAC,eAAkBuE,EAAA,qBAAlB,WACI,OACI,IAAItC,EAAAa,OAAO,GAAK,EAAK,IACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,EAAK,GAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,IACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,sCAI7B/C,OAAAC,eAAkBuE,EAAA,sBAAlB,WACI,OACI,IAAItC,EAAAa,OAAO,GAAK,EAAK,IACrB,IAAIb,EAAAa,OAAO,EAAK,EAAK,IACrB,IAAIb,EAAAa,OAAO,GAAK,EAAK,IACrB,IAAIb,EAAAa,OAAO,EAAK,EAAK,GACrB,IAAIb,EAAAa,OAAO,GAAK,GAAK,IACrB,IAAIb,EAAAa,OAAO,EAAK,GAAK,sCAK7B/C,OAAAC,eAAWuE,EAAAtD,UAAA,wBAAX,WACI,OAAOY,KAAK8C,uBAGhB,SAA4BrE,GACxBuB,KAAK8C,kBAAoBrE,mCAG7BP,OAAAC,eAAWuE,EAAAtD,UAAA,kBAAX,WACI,OAAOY,KAAKgD,iBAGhB,SAAsBvE,GAClBuB,KAAKgD,YAAcvE,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWuE,EAAAtD,UAAA,YAAX,WACI,OAAOY,KAAK2C,WAGhB,SAAgBlE,GACZuB,KAAK2C,MAAQlE,EACbuB,KAAKmB,wDAITjD,OAAAC,eAAWuE,EAAAtD,UAAA,aAAX,WACI,OAAOY,KAAK4C,YAGhB,SAAiBnE,GACbuB,KAAK4C,OAASnE,EACduB,KAAKmB,wDAITjD,OAAAC,eAAWuE,EAAAtD,UAAA,sBAAX,WACI,OAAOY,KAAK+C,qBAGhB,SAA0BtE,GACtBuB,KAAK+C,gBAAkBtE,EACvBuB,KAAKmB,wDAOFuB,EAAAtD,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAC7EwB,EAAoBG,WAAa,gCAEjCH,EAAoB+B,cACpB,IAAK,IAAI/F,EAAI,EAAGA,EAAIwC,KAAKgD,YAAYQ,OAAQhG,IACzCgE,EAAoB+B,WAAWE,KAAKzD,KAAKgD,YAAYxF,GAAGkG,WAG5D,OAAOlC,GAUGkB,EAAAd,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAIlD,IAHA,IAAI6B,EAAUvD,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIc,EAAsBb,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,GAEtL8B,KACKpG,EAAI,EAAGA,EAAIqE,EAAc0B,WAAWC,OAAQhG,IACjDoG,EAAOH,KAAKrD,EAAAa,OAAO4C,UAAUhC,EAAc0B,WAAW/F,KAK1D,OAFAmG,EAAQJ,WAAaK,EAEdD,GAhFX1B,GADC7B,EAAAmB,kDAmBDU,GADC7B,EAAAmB,sCAWDU,GADC7B,EAAA0D,gDAWD7B,GADC7B,EAAAmB,gDA6CLmB,EAjKA,CAA2CtC,EAAA+B,mBAA9BrF,EAAA4F,uCCJb3F,EAAAD,QAAA,gpCCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAgD,kCAAIhD,EAAQ,IAEnE,IAAAyG,EAAA,SAAAvD,GAII,SAAAuD,EAAYhG,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,yBAA0BC,EAAOC,EAAiBC,IAAgBZ,YAHhFa,EAAAmD,aAAe,IAAI5D,EAAAa,OAAO,EAAG,EAAG,GAKpCJ,EAAKoD,cACD,IAAI7D,EAAAa,OAAO,IAAM,IAAM,KACvB,IAAIb,EAAAa,OAAO,IAAM,IAAM,KACvB,IAAIb,EAAAa,OAAO,IAAM,GAAK,MAG1BJ,EAAKM,yBAgEb,OA7E4CC,EAAA2C,EAAAvD,GAgBjCuD,EAAA3E,UAAA+B,qBAAP,WACInB,KAAKsB,UAAU,aAActB,KAAKiE,aAAa,IAC/CjE,KAAKsB,UAAU,aAActB,KAAKiE,aAAa,IAC/CjE,KAAKsB,UAAU,aAActB,KAAKiE,aAAa,IAC/CjE,KAAKsB,UAAU,cAAetB,KAAKgE,eAGvC9F,OAAAC,eAAW4F,EAAA3E,UAAA,mBAAX,WACI,OAAOY,KAAKiE,kBAGhB,SAAuBxF,GACnBuB,KAAKiE,aAAexF,EACpBuB,KAAKmB,wDAITjD,OAAAC,eAAW4F,EAAA3E,UAAA,mBAAX,WACI,OAAOY,KAAKgE,kBAGhB,SAAuBvF,GACnBuB,KAAKgE,aAAevF,EACpBuB,KAAKmB,wDAOF4C,EAAA3E,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAC7EwB,EAAoBG,WAAa,iCAEjCH,EAAoB0C,eACpB,IAAK,IAAI1G,EAAI,EAAGA,EAAIwC,KAAKiE,aAAaT,OAAQhG,IAC1CgE,EAAoB0C,YAAYT,KAAKzD,KAAKiE,aAAazG,GAAGkG,WAG9D,OAAOlC,GAUGuC,EAAAnC,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAIlD,IAHA,IAAI6B,EAAUvD,EAAAqB,oBAAoBG,MAAM,WAAM,WAAImC,EAAuBlC,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,GAEvL8B,KACKpG,EAAI,EAAGA,EAAIqE,EAAcqC,YAAYV,OAAQhG,IAClDoG,EAAOH,KAAKrD,EAAAa,OAAO4C,UAAUhC,EAAcqC,YAAY1G,KAK3D,OAFAmG,EAAQO,YAAcN,EAEfD,GA1CX1B,GADC7B,EAAA8B,qDA6CL6B,EA7EA,CAA4C3D,EAAA+B,mBAA/BrF,EAAAiH,wCCJbhH,EAAAD,QAAA,0gCCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAiD,mCAAIhD,EAAQ,IAEpE,IAAA6G,EAAA,SAAA3D,GAMI,SAAA2D,EAAYpG,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,0BAA2BC,EAAOC,EAAiBC,IAAgBZ,YANjFa,EAAAuD,qBAA+B,EAC/BvD,EAAAwD,oBAA8B,EAC9BxD,EAAAyD,WAAqB,EACrBzD,EAAAG,YAAc,IAAIZ,EAAAa,OAAO,IAAM,IAAM,KAIzCJ,EAAKM,yBAyEb,OAjF6CC,EAAA+C,EAAA3D,GAWlC2D,EAAA/E,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,sBAAuBrB,KAAKoE,sBAC1CpE,KAAKqB,SAAS,qBAAsBrB,KAAKqE,qBACzCrE,KAAKqB,SAAS,YAAarB,KAAKsE,YAChCtE,KAAKsB,UAAU,aAActB,KAAKgB,cAItC9C,OAAAC,eAAWgG,EAAA/E,UAAA,2BAAX,WACI,OAAOY,KAAKoE,0BAGhB,SAA+B3F,GAC3BuB,KAAKoE,qBAAuB3F,EAC5BuB,KAAKmB,wDAITjD,OAAAC,eAAWgG,EAAA/E,UAAA,iBAAX,WACI,OAAOY,KAAKsE,gBAGhB,SAAqB7F,GACjBuB,KAAKsE,WAAa7F,EAClBuB,KAAKmB,wDAITjD,OAAAC,eAAWgG,EAAA/E,UAAA,0BAAX,WACI,OAAOY,KAAKqE,yBAGhB,SAA8B5F,GAC1BuB,KAAKqE,oBAAsB5F,EAC3BuB,KAAKmB,wDAITjD,OAAAC,eAAWgG,EAAA/E,UAAA,kBAAX,WACI,OAAOY,KAAKgB,iBAGhB,SAAsBvC,GAClBuB,KAAKgB,YAAcvC,EACnBuB,KAAKmB,wDAOFgD,EAAA/E,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,kCAE1BH,GAUG2C,EAAAvC,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIuC,EAAwBtC,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IA1DhMG,GADC7B,EAAAmB,qDAWDU,GADC7B,EAAAmB,2CAWDU,GADC7B,EAAAmB,oDAWDU,GADC7B,EAAAmB,4CAiCL4C,EAjFA,CAA6C/D,EAAA+B,mBAAhCrF,EAAAqH,yCCJbpH,EAAAD,QAAA,s5DCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAoD,sCAAIhD,EAAQ,IAEvE,IAAAiH,EAAA,SAAA/D,GAGI,SAAA+D,EAAYxG,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,6BAA8BC,EAAOC,EAAiBC,IAAgBZ,YACxFa,EAAKM,yBAoDb,OAzDgDC,EAAAmD,EAAA/D,GAQrC+D,EAAAnF,UAAA+B,qBAAP,WACInB,KAAKwE,WAAW,cAAexE,KAAKyE,cACpCzE,KAAKqB,SAAS,OAAQrB,KAAK0E,kBAGxBH,EAAAnF,UAAA+D,OAAP,SAAcC,GACV5C,EAAApB,UAAM+D,OAAMxF,KAAAqC,KAACoD,IAGVmB,EAAAnF,UAAAuF,OAAP,SAAclE,EAAWG,GACrBJ,EAAApB,UAAMuF,OAAMhH,KAAAqC,KAACS,EAAMG,GAGnBZ,KAAKmB,wBAITjD,OAAAC,eAAWoG,EAAAnF,UAAA,mBAAX,WACI,OAAOY,KAAKyE,kBAGhB,SAAuBd,GACnB3D,KAAKyE,aAAed,EACpB3D,KAAKmB,wDAOFoD,EAAAnF,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,qCAE1BH,GAUG+C,EAAA3C,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAI2C,EAA2B1C,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IA5BnMG,GADC7B,EAAAwE,sDAiCLL,EAzDA,CAAgDnE,EAAA+B,mBAAnCrF,EAAAyH,4CCJbxH,EAAAD,QAAA,uvBCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAsD,wCAAIhD,EAAQ,IAEzE,IAAAuH,EAAA,SAAArE,GAYI,SAAAqE,EAAY9G,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,+BAAgCC,EAAOC,EAAiBC,IAAgBZ,YAXvFa,EAAAiE,KAAe,EAGfjE,EAAAkE,UAAoB,EAGpBlE,EAAAmE,iBAA2B,EAE1BnE,EAAAoE,oBAA8B,EAIlCpE,EAAKM,yBAoDb,OAlEkDC,EAAAyD,EAAArE,GAiBvCqE,EAAAzF,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,OAAQrB,KAAK0E,iBAE3B,IAAIhE,EAAQV,KAAKqD,WAEjB,GAAK3C,EAAL,CAGA,IAAIwE,EAAYxE,EAAMyE,YAAYC,eAElCpF,KAAK8E,MAAQI,EACblF,KAAKqB,SAAS,OAAQrB,KAAK8E,KAAO9E,KAAK+E,UAAY,KAEnD/E,KAAKiF,qBAAuBC,EAAYlF,KAAKgF,iBAAmB,IAChEhF,KAAKqB,SAAS,mBAAoBrB,KAAKiF,uBAGpCJ,EAAAzF,UAAA+D,OAAP,SAAcC,GACVpD,KAAKmB,uBACLX,EAAApB,UAAM+D,OAAMxF,KAAAqC,KAACoD,IAGVyB,EAAAzF,UAAAuF,OAAP,SAAclE,EAAWG,GACrBJ,EAAApB,UAAMuF,OAAMhH,KAAAqC,KAACS,EAAMG,IAOhBiE,EAAAzF,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,uCAE1BH,GAUGqD,EAAAjD,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIiD,EAA6BhD,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IA5DrMG,GADC7B,EAAAmB,wCAIDU,GADC7B,EAAAmB,6CAIDU,GADC7B,EAAAmB,oDA2DLsD,EAlEA,CAAkDzE,EAAA+B,mBAArCrF,EAAA+H,8CCJb9H,EAAAD,QAAA,wnDCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAA+C,iCAAIhD,EAAQ,IAElE,IAAA+H,EAAA,SAAA7E,GAGI,SAAA6E,EAAYtH,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,wBAAyBC,EAAOC,EAAiBC,IAAgBZ,YAH/Ea,EAAAyE,WAAa,IAAIlF,EAAAa,OAAO,IAAM,IAAM,KAIxCJ,EAAKM,yBAwCb,OA7C2CC,EAAAiE,EAAA7E,GAQhC6E,EAAAjG,UAAA+B,qBAAP,WACInB,KAAKsB,UAAU,YAAatB,KAAKsF,aAIrCpH,OAAAC,eAAWkH,EAAAjG,UAAA,iBAAX,WACI,OAAOY,KAAKsF,gBAGhB,SAAqB7G,GACjBuB,KAAKsF,WAAa7G,EAClBuB,KAAKmB,wDAOFkE,EAAAjG,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,gCAE1BH,GAUG6D,EAAAzD,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIyD,EAAsBxD,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IA5B9LG,GADC7B,EAAA8B,mDAiCLmD,EA7CA,CAA2CjF,EAAA+B,mBAA9BrF,EAAAuI,uCCJbtI,EAAAD,QAAA,gxBCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAAoD,sCAAIhD,EAAQ,IAEvE,IAAAiI,EAAA,SAAA/E,GAaI,SAAA+E,EAAYxH,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,6BAA8BC,EAAOC,EAAiBC,IAAgBZ,YAbpFa,EAAA8B,MAAQ,EACR9B,EAAA2E,OAAS,GACT3E,EAAA4E,MAAQ,GACR5E,EAAA6E,MAAQ,GACR7E,EAAA8E,YAAc,IACd9E,EAAA+E,UAAY,GACZ/E,EAAAgF,MAAQ,IACRhF,EAAAiF,YAAc,MACdjF,EAAAkF,YAAc,GACdlF,EAAAmF,YAAc,IACdnF,EAAAoF,YAAc,IAIlBpF,EAAKM,yBAsJb,OArKgDC,EAAAmE,EAAA/E,GAkBrC+E,EAAAnG,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,OAAQrB,KAAK2C,OAC3B3C,KAAKqB,SAAS,QAASrB,KAAKwF,QAC5BxF,KAAKqB,SAAS,OAAQrB,KAAKyF,OAC3BzF,KAAKqB,SAAS,OAAQrB,KAAK0F,OAC3B1F,KAAKqB,SAAS,aAAcrB,KAAK2F,aACjC3F,KAAKqB,SAAS,WAAYrB,KAAK4F,WAC/B5F,KAAKqB,SAAS,OAAQrB,KAAK6F,OAC3B7F,KAAKqB,SAAS,aAAcrB,KAAK8F,aACjC9F,KAAKqB,SAAS,aAAcrB,KAAK+F,aACjC/F,KAAKqB,SAAS,aAAcrB,KAAKgG,aACjChG,KAAKqB,SAAS,aAAcrB,KAAKiG,cAIrC/H,OAAAC,eAAWoH,EAAAnG,UAAA,YAAX,WACI,OAAOY,KAAK2C,WAGhB,SAAgBlE,GACZuB,KAAK2C,MAAQlE,EACbuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,aAAX,WACI,OAAOY,KAAKwF,YAGhB,SAAiB/G,GACbuB,KAAKwF,OAAS/G,EACduB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,YAAX,WACI,OAAOY,KAAKyF,WAGhB,SAAgBhH,GACZuB,KAAKyF,MAAQhH,EACbuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,kBAAX,WACI,OAAOY,KAAK2F,iBAGhB,SAAsBlH,GAClBuB,KAAK2F,YAAclH,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,gBAAX,WACI,OAAOY,KAAK4F,eAGhB,SAAoBnH,GAChBuB,KAAK4F,UAAYnH,EACjBuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,YAAX,WACI,OAAOY,KAAK0F,WAGhB,SAAgBjH,GACZuB,KAAK0F,MAAQjH,EACbuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,YAAX,WACI,OAAOY,KAAK6F,WAGhB,SAAgBpH,GACZuB,KAAK6F,MAAQpH,EACbuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,kBAAX,WACI,OAAOY,KAAK8F,iBAGhB,SAAsBrH,GAClBuB,KAAK8F,YAAcrH,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,kBAAX,WACI,OAAOY,KAAK+F,iBAGhB,SAAsBtH,GAClBuB,KAAK+F,YAActH,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,kBAAX,WACI,OAAOY,KAAKgG,iBAGhB,SAAsBvH,GAClBuB,KAAKgG,YAAcvH,EACnBuB,KAAKmB,wDAITjD,OAAAC,eAAWoH,EAAAnG,UAAA,kBAAX,WACI,OAAOY,KAAKiG,iBAGhB,SAAsBxH,GAClBuB,KAAKiG,YAAcxH,EACnBuB,KAAKmB,wDAOFoE,EAAAnG,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,qCAE1BH,GAUG+D,EAAA3D,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAI2D,EAA2B1D,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IAhInMG,GADC7B,EAAAmB,sCAWDU,GADC7B,EAAAmB,uCAWDU,GADC7B,EAAAmB,sCAWDU,GADC7B,EAAAmB,4CAWDU,GADC7B,EAAAmB,0CAWDU,GADC7B,EAAAmB,sCAWDU,GADC7B,EAAAmB,sCAWDU,GADC7B,EAAAmB,4CAWDU,GADC7B,EAAAmB,4CAWDU,GADC7B,EAAAmB,4CAWDU,GADC7B,EAAAmB,4CAiCLgE,EArKA,CAAgDnF,EAAA+B,mBAAnCrF,EAAAyI,4CCJbxI,EAAAD,QAAA,+0CCAA0C,CAAAlC,EAAA,sxBCAA,IAAA8C,EAAA9C,EAAA,GAEA8C,EAAAC,OAAOC,aAA+C,iCAAIhD,EAAQ,IAElE,IAAA4I,EAAA,SAAA1F,GAII,SAAA0F,EAAYnI,EAAc0C,EAAcC,EAAcC,EAA2BC,GAAjF,IAAAC,EACIL,EAAA7C,KAAAqC,KAAMjC,EAAM0C,EAAM,wBAAyBC,EAAOC,EAAiBC,IAAgBZ,YAJ/Ea,EAAAsF,UAAoB,IACpBtF,EAAAuF,WAAqB,IAAIhG,EAAAa,OAAO,IAAM,IAAM,KAIhDJ,EAAKM,yBAmDb,OAzD2CC,EAAA8E,EAAA1F,GAShC0F,EAAA9G,UAAA+B,qBAAP,WACInB,KAAKqB,SAAS,WAAYrB,KAAKmG,WAC/BnG,KAAKsB,UAAU,YAAatB,KAAKoG,aAIrClI,OAAAC,eAAW+H,EAAA9G,UAAA,gBAAX,WACI,OAAOY,KAAKmG,eAGhB,SAAoB1H,GAChBuB,KAAKmG,UAAY1H,EACjBuB,KAAKmB,wDAITjD,OAAAC,eAAW+H,EAAA9G,UAAA,iBAAX,WACI,OAAOY,KAAKoG,gBAGhB,SAAqB3H,GACjBuB,KAAKoG,WAAa3H,EAClBuB,KAAKmB,wDAOF+E,EAAA9G,UAAAmC,UAAP,WACI,IAAIC,EAAsBpB,EAAAqB,oBAAoBC,UAAU1B,KAAMQ,EAAApB,UAAMmC,UAAS5D,KAAAqC,OAG7E,OAFAwB,EAAoBG,WAAa,gCAE1BH,GAUG0E,EAAAtE,MAAd,SAAoBC,EAAoBnB,EAAcoB,GAGlD,OAFc1B,EAAAqB,oBAAoBG,MAAM,WAAM,WAAIsE,EAAsBrE,EAAc9D,KAAM8D,EAAcE,MAAOrB,OAAOd,EAAWiC,EAAcG,mBAAmBH,EAAenB,EAAOoB,IAtC9LG,GADC7B,EAAAmB,0CAWDU,GADC7B,EAAA8B,mDAiCLgE,EAzDA,CAA2C9F,EAAA+B,mBAA9BrF,EAAAoJ,uCCJbnJ,EAAAD,QAAA","file":"babylonjs.proceduralTextures.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-procedural-textures\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-procedural-textures\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"PTLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export * from \"./brick\";\r\nexport * from \"./cloud\";\r\nexport * from \"./fire\";\r\nexport * from \"./grass\";\r\nexport * from \"./marble\";\r\nexport * from \"./normalMap\";\r\nexport * from \"./perlinNoise\";\r\nexport * from \"./road\";\r\nexport * from \"./starfield\";\r\nexport * from \"./wood\";","import * as ProceduralTexturesLib from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (var mat in ProceduralTexturesLib) {\r\n        if (ProceduralTexturesLib.hasOwnProperty(mat)) {\r\n            (<any>globalObject).BABYLON[mat] = (<any>ProceduralTexturesLib)[mat];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./brickProceduralTexture\";","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"brickProceduralTexturePixelShader\"] = require(\"./brickProceduralTexture.fragment.fx\");\r\n\r\nexport class BrickProceduralTexture extends ProceduralTexture {\r\n    private _numberOfBricksHeight: number = 15;\r\n    private _numberOfBricksWidth: number = 5;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n    private _brickColor = new Color3(0.77, 0.47, 0.40);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"brickProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfBricksHeight\", this._numberOfBricksHeight);\r\n        this.setFloat(\"numberOfBricksWidth\", this._numberOfBricksWidth);\r\n        this.setColor3(\"brickColor\", this._brickColor);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksHeight(): number {\r\n        return this._numberOfBricksHeight;\r\n    }\r\n\r\n    public set numberOfBricksHeight(value: number) {\r\n        this._numberOfBricksHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksWidth(): number {\r\n        return this._numberOfBricksWidth;\r\n    }\r\n\r\n    public set numberOfBricksWidth(value: number) {\r\n        this._numberOfBricksWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get brickColor(): Color3 {\r\n        return this._brickColor;\r\n    }\r\n\r\n    public set brickColor(value: Color3) {\r\n        this._brickColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this brick procedural texture\r\n     * @returns a serialized brick procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.BrickProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Brick Procedural Texture from parsed brick procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing brick procedural texture information\r\n     * @returns a parsed Brick Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): BrickProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new BrickProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float numberOfBricksHeight;\\nuniform float numberOfBricksWidth;\\nuniform vec3 brickColor;\\nuniform vec3 jointColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nfloat roundF(float number){\\nreturn sign(number)*floor(abs(number)+0.5);\\n}\\nvoid main(void)\\n{\\nfloat brickW=1.0/numberOfBricksWidth;\\nfloat brickH=1.0/numberOfBricksHeight;\\nfloat jointWPercentage=0.01;\\nfloat jointHPercentage=0.05;\\nvec3 color=brickColor;\\nfloat yi=vUV.y/brickH;\\nfloat nyi=roundF(yi);\\nfloat xi=vUV.x/brickW;\\nif (mod(floor(yi),2.0) == 0.0){\\nxi=xi-0.5;\\n}\\nfloat nxi=roundF(xi);\\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\\n}\\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\\n}\\nelse {\\nfloat brickColorSwitch=mod(floor(yi)+floor(xi),3.0);\\nif (brickColorSwitch == 0.0)\\ncolor=mix(color,vec3(0.33,0.33,0.33),0.3);\\nelse if (brickColorSwitch == 2.0)\\ncolor=mix(color,vec3(0.11,0.11,0.11),0.3);\\n}\\ngl_FragColor=vec4(color,1.0);\\n}\"","export * from \"./cloudProceduralTexture\";","import { Effect, ProceduralTexture, Color4, Scene, Texture, serializeAsColor4, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"cloudProceduralTexturePixelShader\"] = require(\"./cloudProceduralTexture.fragment.fx\");\r\n\r\nexport class CloudProceduralTexture extends ProceduralTexture {\r\n    private _skyColor = new Color4(0.15, 0.68, 1.0, 1.0);\r\n    private _cloudColor = new Color4(1, 1, 1, 1.0);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"cloudProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor4(\"skyColor\", this._skyColor);\r\n        this.setColor4(\"cloudColor\", this._cloudColor);\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get skyColor(): Color4 {\r\n        return this._skyColor;\r\n    }\r\n\r\n    public set skyColor(value: Color4) {\r\n        this._skyColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get cloudColor(): Color4 {\r\n        return this._cloudColor;\r\n    }\r\n\r\n    public set cloudColor(value: Color4) {\r\n        this._cloudColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this cloud procedural texture\r\n     * @returns a serialized cloud procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.CloudProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Cloud Procedural Texture from parsed cloud procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing cloud procedural texture information\r\n     * @returns a parsed Cloud Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CloudProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new CloudProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 skyColor;\\nuniform vec4 cloudColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main() {\\nvec2 p=vUV*12.0;\\nvec4 c=mix(skyColor,cloudColor,fbm(p));\\ngl_FragColor=c;\\n}\\n\"","export * from \"./fireProceduralTexture\";","import { Effect, ProceduralTexture, Vector2, Color3, Scene, Texture, serialize, serializeAsVector2, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"fireProceduralTexturePixelShader\"] = require(\"./fireProceduralTexture.fragment.fx\");\r\n\r\nexport class FireProceduralTexture extends ProceduralTexture {\r\n    private _time: number = 0.0;\r\n    private _speed = new Vector2(0.5, 0.3);\r\n    private _autoGenerateTime: boolean = true;\r\n    private _fireColors: Color3[];\r\n    private _alphaThreshold: number = 0.5;\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"fireProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this._fireColors = FireProceduralTexture.RedFireColors;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"time\", this._time);\r\n        this.setVector2(\"speed\", this._speed);\r\n        this.setColor3(\"c1\", this._fireColors[0]);\r\n        this.setColor3(\"c2\", this._fireColors[1]);\r\n        this.setColor3(\"c3\", this._fireColors[2]);\r\n        this.setColor3(\"c4\", this._fireColors[3]);\r\n        this.setColor3(\"c5\", this._fireColors[4]);\r\n        this.setColor3(\"c6\", this._fireColors[5]);\r\n        this.setFloat(\"alphaThreshold\", this._alphaThreshold);\r\n    }\r\n\r\n    public render(useCameraPostProcess?: boolean) {\r\n        let scene = this.getScene();\r\n        if (this._autoGenerateTime && scene) {\r\n            this._time += scene.getAnimationRatio() * 0.03;\r\n            this.updateShaderUniforms();\r\n        }\r\n        super.render(useCameraPostProcess);\r\n    }\r\n\r\n    public static get PurpleFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 1.0),\r\n            new Color3(0.9, 0.0, 1.0),\r\n            new Color3(0.2, 0.0, 1.0),\r\n            new Color3(1.0, 0.9, 1.0),\r\n            new Color3(0.1, 0.1, 1.0),\r\n            new Color3(0.9, 0.9, 1.0)\r\n        ];\r\n    }\r\n\r\n    public static get GreenFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.3, 0.4, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0)\r\n        ];\r\n    }\r\n\r\n    public static get RedFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 0.1),\r\n            new Color3(0.9, 0.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(1.0, 0.9, 0.0),\r\n            new Color3(0.1, 0.1, 0.1),\r\n            new Color3(0.9, 0.9, 0.9)\r\n        ];\r\n    }\r\n\r\n    public static get BlueFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.1, 0.0, 0.5),\r\n            new Color3(0.0, 0.0, 0.5),\r\n            new Color3(0.1, 0.0, 0.2),\r\n            new Color3(0.0, 0.0, 1.0),\r\n            new Color3(0.1, 0.2, 0.3),\r\n            new Color3(0.0, 0.2, 0.9)\r\n        ];\r\n    }\r\n\r\n    @serialize()\r\n    public get autoGenerateTime(): boolean {\r\n        return this._autoGenerateTime;\r\n    }\r\n\r\n    public set autoGenerateTime(value: boolean) {\r\n        this._autoGenerateTime = value;\r\n    }\r\n\r\n    public get fireColors(): Color3[] {\r\n        return this._fireColors;\r\n    }\r\n\r\n    public set fireColors(value: Color3[]) {\r\n        this._fireColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get time(): number {\r\n        return this._time;\r\n    }\r\n\r\n    public set time(value: number) {\r\n        this._time = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsVector2()\r\n    public get speed(): Vector2 {\r\n        return this._speed;\r\n    }\r\n\r\n    public set speed(value: Vector2) {\r\n        this._speed = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get alphaThreshold(): number {\r\n        return this._alphaThreshold;\r\n    }\r\n\r\n    public set alphaThreshold(value: number) {\r\n        this._alphaThreshold = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this fire procedural texture\r\n     * @returns a serialized fire procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.FireProceduralTexture\";\r\n\r\n        serializationObject.fireColors = [];\r\n        for (var i = 0; i < this._fireColors.length; i++) {\r\n            serializationObject.fireColors.push(this._fireColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Fire Procedural Texture from parsed fire procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing fire procedural texture information\r\n     * @returns a parsed Fire Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): FireProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new FireProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.fireColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.fireColors[i]));\r\n        }\r\n\r\n        texture.fireColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nuniform float time;\\nuniform vec3 c1;\\nuniform vec3 c2;\\nuniform vec3 c3;\\nuniform vec3 c4;\\nuniform vec3 c5;\\nuniform vec3 c6;\\nuniform vec2 speed;\\nuniform float shift;\\nuniform float alphaThreshold;\\nvarying vec2 vUV;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main() {\\nvec2 p=vUV*8.0;\\nfloat q=fbm(p-time*0.1);\\nvec2 r=vec2(fbm(p+q+time*speed.x-p.x-p.y),fbm(p+q-time*speed.y));\\nvec3 c=mix(c1,c2,fbm(p+r))+mix(c3,c4,r.x)-mix(c5,c6,r.y);\\nvec3 color=c*cos(shift*vUV.y);\\nfloat luminance=dot(color.rgb,vec3(0.3,0.59,0.11));\\ngl_FragColor=vec4(color,luminance*alphaThreshold+(1.0-alphaThreshold));\\n}\"","export * from \"./grassProceduralTexture\";","import { Effect, ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"grassProceduralTexturePixelShader\"] = require(\"./grassProceduralTexture.fragment.fx\");\r\n\r\nexport class GrassProceduralTexture extends ProceduralTexture {\r\n    private _grassColors: Color3[];\r\n    private _groundColor = new Color3(1, 1, 1);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"grassProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n\r\n        this._grassColors = [\r\n            new Color3(0.29, 0.38, 0.02),\r\n            new Color3(0.36, 0.49, 0.09),\r\n            new Color3(0.51, 0.6, 0.28)\r\n        ];\r\n\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"herb1Color\", this._grassColors[0]);\r\n        this.setColor3(\"herb2Color\", this._grassColors[1]);\r\n        this.setColor3(\"herb3Color\", this._grassColors[2]);\r\n        this.setColor3(\"groundColor\", this._groundColor);\r\n    }\r\n\r\n    public get grassColors(): Color3[] {\r\n        return this._grassColors;\r\n    }\r\n\r\n    public set grassColors(value: Color3[]) {\r\n        this._grassColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get groundColor(): Color3 {\r\n        return this._groundColor;\r\n    }\r\n\r\n    public set groundColor(value: Color3) {\r\n        this._groundColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this grass procedural texture\r\n     * @returns a serialized grass procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.GrassProceduralTexture\";\r\n\r\n        serializationObject.grassColors = [];\r\n        for (var i = 0; i < this._grassColors.length; i++) {\r\n            serializationObject.grassColors.push(this._grassColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Grass Procedural Texture from parsed grass procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing grass procedural texture information\r\n     * @returns a parsed Grass Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): GrassProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new GrassProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.grassColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.grassColors[i]));\r\n        }\r\n\r\n        texture.grassColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform vec3 herb1Color;\\nuniform vec3 herb2Color;\\nuniform vec3 herb3Color;\\nuniform vec3 groundColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nvec3 color=mix(groundColor,herb1Color,rand(gl_FragCoord.xy*4.0));\\ncolor=mix(color,herb2Color,rand(gl_FragCoord.xy*8.0));\\ncolor=mix(color,herb3Color,rand(gl_FragCoord.xy));\\ncolor=mix(color,herb1Color,fbm(gl_FragCoord.xy*16.0));\\ngl_FragColor=vec4(color,1.0);\\n}\"","export * from \"./marbleProceduralTexture\";","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"marbleProceduralTexturePixelShader\"] = require(\"./marbleProceduralTexture.fragment.fx\");\r\n\r\nexport class MarbleProceduralTexture extends ProceduralTexture {\r\n    private _numberOfTilesHeight: number = 3;\r\n    private _numberOfTilesWidth: number = 3;\r\n    private _amplitude: number = 9.0;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"marbleProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfTilesHeight\", this._numberOfTilesHeight);\r\n        this.setFloat(\"numberOfTilesWidth\", this._numberOfTilesWidth);\r\n        this.setFloat(\"amplitude\", this._amplitude);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesHeight(): number {\r\n        return this._numberOfTilesHeight;\r\n    }\r\n\r\n    public set numberOfTilesHeight(value: number) {\r\n        this._numberOfTilesHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    public set amplitude(value: number) {\r\n        this._amplitude = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesWidth(): number {\r\n        return this._numberOfTilesWidth;\r\n    }\r\n\r\n    public set numberOfTilesWidth(value: number) {\r\n        this._numberOfTilesWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this marble procedural texture\r\n     * @returns a serialized marble procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.MarbleProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Marble Procedural Texture from parsed marble procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing marble procedural texture information\r\n     * @returns a parsed Marble Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): MarbleProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new MarbleProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float numberOfTilesHeight;\\nuniform float numberOfTilesWidth;\\nuniform float amplitude;\\nuniform vec3 marbleColor;\\nuniform vec3 jointColor;\\nconst vec3 tileSize=vec3(1.1,1.0,1.1);\\nconst vec3 tilePct=vec3(0.98,1.0,0.98);\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat turbulence(vec2 P)\\n{\\nfloat val=0.0;\\nfloat freq=1.0;\\nfor (int i=0; i<4; i++)\\n{\\nval+=abs(noise(P*freq)/freq);\\nfreq*=2.07;\\n}\\nreturn val;\\n}\\nfloat roundF(float number){\\nreturn sign(number)*floor(abs(number)+0.5);\\n}\\nvec3 marble_color(float x)\\n{\\nvec3 col;\\nx=0.5*(x+1.);\\nx=sqrt(x); \\nx=sqrt(x);\\nx=sqrt(x);\\ncol=vec3(.2+.75*x); \\ncol.b*=0.95; \\nreturn col;\\n}\\nvoid main()\\n{\\nfloat brickW=1.0/numberOfTilesWidth;\\nfloat brickH=1.0/numberOfTilesHeight;\\nfloat jointWPercentage=0.01;\\nfloat jointHPercentage=0.01;\\nvec3 color=marbleColor;\\nfloat yi=vUV.y/brickH;\\nfloat nyi=roundF(yi);\\nfloat xi=vUV.x/brickW;\\nif (mod(floor(yi),2.0) == 0.0){\\nxi=xi-0.5;\\n}\\nfloat nxi=roundF(xi);\\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\\n}\\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\\n}\\nelse {\\nfloat t=6.28*brickvUV.x/(tileSize.x+noise(vec2(vUV)*6.0));\\nt+=amplitude*turbulence(brickvUV.xy);\\nt=sin(t);\\ncolor=marble_color(t);\\n}\\ngl_FragColor=vec4(color,0.0);\\n}\"","export * from \"./normalMapProceduralTexture\";","import { Effect, ProceduralTexture, Texture, Scene, serializeAsTexture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"normalMapProceduralTexturePixelShader\"] = require(\"./normalMapProceduralTexture.fragment.fx\");\n\nexport class NormalMapProceduralTexture extends ProceduralTexture {\n    private _baseTexture: Texture;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"normalMapProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setTexture(\"baseSampler\", this._baseTexture);\n        this.setFloat(\"size\", this.getRenderSize());\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n\n        // We need to update the \"size\" uniform\n        this.updateShaderUniforms();\n    }\n\n    @serializeAsTexture()\n    public get baseTexture(): Texture {\n        return this._baseTexture;\n    }\n\n    public set baseTexture(texture: Texture) {\n        this._baseTexture = texture;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this normal map procedural texture\n     * @returns a serialized normal map procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.NormalMapProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Normal Map Procedural Texture from parsed normal map procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing normal map procedural texture information\n     * @returns a parsed Normal Map Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): NormalMapProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new NormalMapProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","module.exports = \"precision highp float;\\n\\nuniform sampler2D baseSampler;\\nuniform float size;\\n\\nvarying vec2 vUV;\\n\\nconst vec3 LUMA_COEFFICIENT=vec3(0.2126,0.7152,0.0722);\\nfloat lumaAtCoord(vec2 coord)\\n{\\nvec3 pixel=texture2D(baseSampler,coord).rgb;\\nfloat luma=dot(pixel,LUMA_COEFFICIENT);\\nreturn luma;\\n}\\nvoid main()\\n{\\nfloat lumaU0=lumaAtCoord(vUV+vec2(-1.0,0.0)/size);\\nfloat lumaU1=lumaAtCoord(vUV+vec2( 1.0,0.0)/size);\\nfloat lumaV0=lumaAtCoord(vUV+vec2( 0.0,-1.0)/size);\\nfloat lumaV1=lumaAtCoord(vUV+vec2( 0.0,1.0)/size);\\nvec2 slope=(vec2(lumaU0-lumaU1,lumaV0-lumaV1)+1.0)*0.5;\\ngl_FragColor=vec4(slope,1.0,1.0);\\n}\\n\"","export * from \"./perlinNoiseProceduralTexture\";","import { Effect, ProceduralTexture, serialize, Scene, Texture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"perlinNoiseProceduralTexturePixelShader\"] = require(\"./perlinNoiseProceduralTexture.fragment.fx\");\n\nexport class PerlinNoiseProceduralTexture extends ProceduralTexture {\n    @serialize()\n    public time: number = 0.0;\n\n    @serialize()\n    public timeScale: number = 1.0;\n\n    @serialize()\n    public translationSpeed: number = 1.0;\n\n    private _currentTranslation: number = 0;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"perlinNoiseProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"size\", this.getRenderSize());\n\n        let scene = this.getScene();\n\n        if (!scene) {\n            return;\n        }\n        var deltaTime = scene.getEngine().getDeltaTime();\n\n        this.time += deltaTime;\n        this.setFloat(\"time\", this.time * this.timeScale / 1000);\n\n        this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;\n        this.setFloat(\"translationSpeed\", this._currentTranslation);\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        this.updateShaderUniforms();\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n    }\n\n    /**\n     * Serializes this perlin noise procedural texture\n     * @returns a serialized perlin noise procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.PerlinNoiseProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing perlin noise procedural texture information\n     * @returns a parsed Perlin Noise Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): PerlinNoiseProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","module.exports = \"\\nprecision highp float;\\n\\nuniform float size;\\nuniform float time;\\nuniform float translationSpeed;\\n\\nvarying vec2 vUV;\\n\\nfloat r(float n)\\n{\\nreturn fract(cos(n*89.42)*343.42);\\n}\\nvec2 r(vec2 n)\\n{\\nreturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \\n}\\nfloat worley(vec2 n,float s)\\n{\\nfloat dis=1.0;\\nfor(int x=-1; x<=1; x++)\\n{\\nfor(int y=-1; y<=1; y++)\\n{\\nvec2 p=floor(n/s)+vec2(x,y);\\nfloat d=length(r(p)+vec2(x,y)-fract(n/s));\\nif (dis>d)\\ndis=d;\\n}\\n}\\nreturn 1.0-dis;\\n}\\nvec3 hash33(vec3 p3)\\n{\\np3=fract(p3*vec3(0.1031,0.11369,0.13787));\\np3+=dot(p3,p3.yxz+19.19);\\nreturn -1.0+2.0*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\\n}\\nfloat perlinNoise(vec3 p)\\n{\\nvec3 pi=floor(p);\\nvec3 pf=p-pi;\\nvec3 w=pf*pf*(3.0-2.0*pf);\\nreturn mix(\\nmix(\\nmix(\\ndot(pf-vec3(0,0,0),hash33(pi+vec3(0,0,0))),\\ndot(pf-vec3(1,0,0),hash33(pi+vec3(1,0,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,0,1),hash33(pi+vec3(0,0,1))),\\ndot(pf-vec3(1,0,1),hash33(pi+vec3(1,0,1))),\\nw.x\\n),\\nw.z\\n),\\nmix(\\nmix(\\ndot(pf-vec3(0,1,0),hash33(pi+vec3(0,1,0))),\\ndot(pf-vec3(1,1,0),hash33(pi+vec3(1,1,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,1,1),hash33(pi+vec3(0,1,1))),\\ndot(pf-vec3(1,1,1),hash33(pi+vec3(1,1,1))),\\nw.x\\n),\\nw.z\\n),\\nw.y\\n);\\n}\\n\\nvoid main(void)\\n{\\nvec2 uv=gl_FragCoord.xy+translationSpeed;\\nfloat dis=(\\n1.0+perlinNoise(vec3(uv/vec2(size,size),time*0.05)*8.0))\\n*(1.0+(worley(uv,32.0)+ 0.5*worley(2.0*uv,32.0)+0.25*worley(4.0*uv,32.0))\\n);\\ngl_FragColor=vec4(vec3(dis/4.0),1.0);\\n}\\n\"","export * from \"./roadProceduralTexture\";","import { Effect, ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"roadProceduralTexturePixelShader\"] = require(\"./roadProceduralTexture.fragment.fx\");\r\n\r\nexport class RoadProceduralTexture extends ProceduralTexture {\r\n    private _roadColor = new Color3(0.53, 0.53, 0.53);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"roadProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"roadColor\", this._roadColor);\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get roadColor(): Color3 {\r\n        return this._roadColor;\r\n    }\r\n\r\n    public set roadColor(value: Color3) {\r\n        this._roadColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this road procedural texture\r\n     * @returns a serialized road procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.RoadProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Road Procedural Texture from parsed road procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing road procedural texture information\r\n     * @returns a parsed Road Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): RoadProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new RoadProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nvarying vec2 vUV; \\nuniform vec3 roadColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nfloat ratioy=mod(gl_FragCoord.y*100.0 ,fbm(vUV*2.0));\\nvec3 color=roadColor*ratioy;\\ngl_FragColor=vec4(color,1.0);\\n}\"","export * from \"./starfieldProceduralTexture\";","import { Effect, ProceduralTexture, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"starfieldProceduralTexturePixelShader\"] = require(\"./starfieldProceduralTexture.fragment.fx\");\n\nexport class StarfieldProceduralTexture extends ProceduralTexture {\n    private _time = 1;\n    private _alpha = 0.5;\n    private _beta = 0.8;\n    private _zoom = 0.8;\n    private _formuparam = 0.53;\n    private _stepsize = 0.1;\n    private _tile = 0.850;\n    private _brightness = 0.0015;\n    private _darkmatter = 0.400;\n    private _distfading = 0.730;\n    private _saturation = 0.850;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"starfieldProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"time\", this._time);\n        this.setFloat(\"alpha\", this._alpha);\n        this.setFloat(\"beta\", this._beta);\n        this.setFloat(\"zoom\", this._zoom);\n        this.setFloat(\"formuparam\", this._formuparam);\n        this.setFloat(\"stepsize\", this._stepsize);\n        this.setFloat(\"tile\", this._tile);\n        this.setFloat(\"brightness\", this._brightness);\n        this.setFloat(\"darkmatter\", this._darkmatter);\n        this.setFloat(\"distfading\", this._distfading);\n        this.setFloat(\"saturation\", this._saturation);\n    }\n\n    @serialize()\n    public get time(): number {\n        return this._time;\n    }\n\n    public set time(value: number) {\n        this._time = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        this._alpha = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get beta(): number {\n        return this._beta;\n    }\n\n    public set beta(value: number) {\n        this._beta = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get formuparam(): number {\n        return this._formuparam;\n    }\n\n    public set formuparam(value: number) {\n        this._formuparam = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get stepsize(): number {\n        return this._stepsize;\n    }\n\n    public set stepsize(value: number) {\n        this._stepsize = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get zoom(): number {\n        return this._zoom;\n    }\n\n    public set zoom(value: number) {\n        this._zoom = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get tile(): number {\n        return this._tile;\n    }\n\n    public set tile(value: number) {\n        this._tile = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get brightness(): number {\n        return this._brightness;\n    }\n\n    public set brightness(value: number) {\n        this._brightness = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get darkmatter(): number {\n        return this._darkmatter;\n    }\n\n    public set darkmatter(value: number) {\n        this._darkmatter = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get distfading(): number {\n        return this._distfading;\n    }\n\n    public set distfading(value: number) {\n        this._distfading = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get saturation(): number {\n        return this._saturation;\n    }\n\n    public set saturation(value: number) {\n        this._saturation = value;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this starfield procedural texture\n     * @returns a serialized starfield procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.StarfieldProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Starfield Procedural Texture from parsed startfield procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing startfield procedural texture information\n     * @returns a parsed Starfield Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): StarfieldProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new StarfieldProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}","module.exports = \"precision highp float;\\n\\n#define volsteps 20\\n#define iterations 15\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float time;\\nuniform float alpha;\\nuniform float beta;\\nuniform float zoom;\\nuniform float formuparam;\\nuniform float stepsize;\\nuniform float tile;\\nuniform float brightness;\\nuniform float darkmatter;\\nuniform float distfading;\\nuniform float saturation;\\nvoid main()\\n{\\nvec3 dir=vec3(vUV*zoom,1.);\\nfloat localTime=time*0.0001;\\n\\nmat2 rot1=mat2(cos(alpha),sin(alpha),-sin(alpha),cos(alpha));\\nmat2 rot2=mat2(cos(beta),sin(beta),-sin(beta),cos(beta));\\ndir.xz*=rot1;\\ndir.xy*=rot2;\\nvec3 from=vec3(1.,.5,0.5);\\nfrom+=vec3(-2.,localTime*2.,localTime);\\nfrom.xz*=rot1;\\nfrom.xy*=rot2;\\n\\nfloat s=0.1,fade=1.;\\nvec3 v=vec3(0.);\\nfor (int r=0; r<volsteps; r++) {\\nvec3 p=from+s*dir*.5;\\np=abs(vec3(tile)-mod(p,vec3(tile*2.))); \\nfloat pa,a=pa=0.;\\nfor (int i=0; i<iterations; i++) {\\np=abs(p)/dot(p,p)-formuparam; \\na+=abs(length(p)-pa); \\npa=length(p);\\n}\\nfloat dm=max(0.,darkmatter-a*a*.001); \\na*=a*a; \\nif (r>6) fade*=1.-dm; \\n\\nv+=fade;\\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; \\nfade*=distfading; \\ns+=stepsize;\\n}\\nv=mix(vec3(length(v)),v,saturation); \\ngl_FragColor=vec4(v*.01,1.);\\n}\"","export * from \"./woodProceduralTexture\";","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"woodProceduralTexturePixelShader\"] = require(\"./woodProceduralTexture.fragment.fx\");\r\n\r\nexport class WoodProceduralTexture extends ProceduralTexture {\r\n    private _ampScale: number = 100.0;\r\n    private _woodColor: Color3 = new Color3(0.32, 0.17, 0.09);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"woodProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"ampScale\", this._ampScale);\r\n        this.setColor3(\"woodColor\", this._woodColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get ampScale(): number {\r\n        return this._ampScale;\r\n    }\r\n\r\n    public set ampScale(value: number) {\r\n        this._ampScale = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get woodColor(): Color3 {\r\n        return this._woodColor;\r\n    }\r\n\r\n    public set woodColor(value: Color3) {\r\n        this._woodColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this wood procedural texture\r\n     * @returns a serialized wood procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.WoodProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Wood Procedural Texture from parsed wood procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing wood procedural texture information\r\n     * @returns a parsed Wood Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): WoodProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new WoodProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float ampScale;\\nuniform vec3 woodColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nfloat ratioy=mod(vUV.x*ampScale,2.0+fbm(vUV*0.8));\\nvec3 wood=woodColor*ratioy;\\ngl_FragColor=vec4(wood,1.0);\\n}\""],"sourceRoot":""}