{"version":3,"sources":["webpack://PTLIB/webpack/universalModuleDefinition","webpack://PTLIB/webpack/bootstrap","webpack://PTLIB/../node_modules/webpack/buildin/global.js","webpack://PTLIB/./src/brick/brickProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/brickProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/brick/index.ts","webpack://PTLIB/./src/cloud/cloudProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/cloudProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/cloud/index.ts","webpack://PTLIB/./src/fire/fireProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/fireProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/fire/index.ts","webpack://PTLIB/./src/grass/grassProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/grassProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/grass/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/index.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/legacy.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/index.ts","webpack://PTLIB/./src/marble/marbleProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/marble/marbleProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/index.ts","webpack://PTLIB/./src/normalMap/normalMapProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/normalMapProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/index.ts","webpack://PTLIB/./src/perlinNoise/perlinNoiseProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/index.ts","webpack://PTLIB/./src/road/roadProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/road/roadProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/index.ts","webpack://PTLIB/./src/starfield/starfieldProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/starfield/starfieldProceduralTexture.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/index.ts","webpack://PTLIB/./src/wood/woodProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/wood/woodProceduralTexture.ts","webpack://PTLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}"],"names":[],"mappings":"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","file":"babylonjs.proceduralTextures.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-procedural-textures\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-procedural-textures\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"PTLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_babylonjs__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/legacy.ts\");\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float numberOfBricksHeight;\\nuniform float numberOfBricksWidth;\\nuniform vec3 brickColor;\\nuniform vec3 jointColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nfloat roundF(float number){\\nreturn sign(number)*floor(abs(number)+0.5);\\n}\\nvoid main(void)\\n{\\nfloat brickW=1.0/numberOfBricksWidth;\\nfloat brickH=1.0/numberOfBricksHeight;\\nfloat jointWPercentage=0.01;\\nfloat jointHPercentage=0.05;\\nvec3 color=brickColor;\\nfloat yi=vUV.y/brickH;\\nfloat nyi=roundF(yi);\\nfloat xi=vUV.x/brickW;\\nif (mod(floor(yi),2.0) == 0.0){\\nxi=xi-0.5;\\n}\\nfloat nxi=roundF(xi);\\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\\n}\\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\\n}\\nelse {\\nfloat brickColorSwitch=mod(floor(yi)+floor(xi),3.0);\\nif (brickColorSwitch == 0.0)\\ncolor=mix(color,vec3(0.33,0.33,0.33),0.3);\\nelse if (brickColorSwitch == 2.0)\\ncolor=mix(color,vec3(0.11,0.11,0.11),0.3);\\n}\\ngl_FragColor=vec4(color,1.0);\\n}\"","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"brickProceduralTexturePixelShader\"] = require(\"./brickProceduralTexture.fragment.fx\");\r\n\r\nexport class BrickProceduralTexture extends ProceduralTexture {\r\n    private _numberOfBricksHeight: number = 15;\r\n    private _numberOfBricksWidth: number = 5;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n    private _brickColor = new Color3(0.77, 0.47, 0.40);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"brickProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfBricksHeight\", this._numberOfBricksHeight);\r\n        this.setFloat(\"numberOfBricksWidth\", this._numberOfBricksWidth);\r\n        this.setColor3(\"brickColor\", this._brickColor);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksHeight(): number {\r\n        return this._numberOfBricksHeight;\r\n    }\r\n\r\n    public set numberOfBricksHeight(value: number) {\r\n        this._numberOfBricksHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfBricksWidth(): number {\r\n        return this._numberOfBricksWidth;\r\n    }\r\n\r\n    public set numberOfBricksWidth(value: number) {\r\n        this._numberOfBricksWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get brickColor(): Color3 {\r\n        return this._brickColor;\r\n    }\r\n\r\n    public set brickColor(value: Color3) {\r\n        this._brickColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this brick procedural texture\r\n     * @returns a serialized brick procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.BrickProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Brick Procedural Texture from parsed brick procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing brick procedural texture information\r\n     * @returns a parsed Brick Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): BrickProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new BrickProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","export * from \"./brickProceduralTexture\";","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 skyColor;\\nuniform vec4 cloudColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main() {\\nvec2 p=vUV*12.0;\\nvec4 c=mix(skyColor,cloudColor,fbm(p));\\ngl_FragColor=c;\\n}\\n\"","import { Effect, ProceduralTexture, Color4, Scene, Texture, serializeAsColor4, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"cloudProceduralTexturePixelShader\"] = require(\"./cloudProceduralTexture.fragment.fx\");\r\n\r\nexport class CloudProceduralTexture extends ProceduralTexture {\r\n    private _skyColor = new Color4(0.15, 0.68, 1.0, 1.0);\r\n    private _cloudColor = new Color4(1, 1, 1, 1.0);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"cloudProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor4(\"skyColor\", this._skyColor);\r\n        this.setColor4(\"cloudColor\", this._cloudColor);\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get skyColor(): Color4 {\r\n        return this._skyColor;\r\n    }\r\n\r\n    public set skyColor(value: Color4) {\r\n        this._skyColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor4()\r\n    public get cloudColor(): Color4 {\r\n        return this._cloudColor;\r\n    }\r\n\r\n    public set cloudColor(value: Color4) {\r\n        this._cloudColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this cloud procedural texture\r\n     * @returns a serialized cloud procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.CloudProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Cloud Procedural Texture from parsed cloud procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing cloud procedural texture information\r\n     * @returns a parsed Cloud Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CloudProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new CloudProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","export * from \"./cloudProceduralTexture\";","module.exports = \"precision highp float;\\nuniform float time;\\nuniform vec3 c1;\\nuniform vec3 c2;\\nuniform vec3 c3;\\nuniform vec3 c4;\\nuniform vec3 c5;\\nuniform vec3 c6;\\nuniform vec2 speed;\\nuniform float shift;\\nuniform float alphaThreshold;\\nvarying vec2 vUV;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main() {\\nvec2 p=vUV*8.0;\\nfloat q=fbm(p-time*0.1);\\nvec2 r=vec2(fbm(p+q+time*speed.x-p.x-p.y),fbm(p+q-time*speed.y));\\nvec3 c=mix(c1,c2,fbm(p+r))+mix(c3,c4,r.x)-mix(c5,c6,r.y);\\nvec3 color=c*cos(shift*vUV.y);\\nfloat luminance=dot(color.rgb,vec3(0.3,0.59,0.11));\\ngl_FragColor=vec4(color,luminance*alphaThreshold+(1.0-alphaThreshold));\\n}\"","import { Effect, ProceduralTexture, Vector2, Color3, Scene, Texture, serialize, serializeAsVector2, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"fireProceduralTexturePixelShader\"] = require(\"./fireProceduralTexture.fragment.fx\");\r\n\r\nexport class FireProceduralTexture extends ProceduralTexture {\r\n    private _time: number = 0.0;\r\n    private _speed = new Vector2(0.5, 0.3);\r\n    private _autoGenerateTime: boolean = true;\r\n    private _fireColors: Color3[];\r\n    private _alphaThreshold: number = 0.5;\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"fireProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this._fireColors = FireProceduralTexture.RedFireColors;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"time\", this._time);\r\n        this.setVector2(\"speed\", this._speed);\r\n        this.setColor3(\"c1\", this._fireColors[0]);\r\n        this.setColor3(\"c2\", this._fireColors[1]);\r\n        this.setColor3(\"c3\", this._fireColors[2]);\r\n        this.setColor3(\"c4\", this._fireColors[3]);\r\n        this.setColor3(\"c5\", this._fireColors[4]);\r\n        this.setColor3(\"c6\", this._fireColors[5]);\r\n        this.setFloat(\"alphaThreshold\", this._alphaThreshold);\r\n    }\r\n\r\n    public render(useCameraPostProcess?: boolean) {\r\n        let scene = this.getScene();\r\n        if (this._autoGenerateTime && scene) {\r\n            this._time += scene.getAnimationRatio() * 0.03;\r\n            this.updateShaderUniforms();\r\n        }\r\n        super.render(useCameraPostProcess);\r\n    }\r\n\r\n    public static get PurpleFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 1.0),\r\n            new Color3(0.9, 0.0, 1.0),\r\n            new Color3(0.2, 0.0, 1.0),\r\n            new Color3(1.0, 0.9, 1.0),\r\n            new Color3(0.1, 0.1, 1.0),\r\n            new Color3(0.9, 0.9, 1.0)\r\n        ];\r\n    }\r\n\r\n    public static get GreenFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.3, 0.4, 0.0),\r\n            new Color3(0.5, 1.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(0.5, 1.0, 0.0)\r\n        ];\r\n    }\r\n\r\n    public static get RedFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.5, 0.0, 0.1),\r\n            new Color3(0.9, 0.0, 0.0),\r\n            new Color3(0.2, 0.0, 0.0),\r\n            new Color3(1.0, 0.9, 0.0),\r\n            new Color3(0.1, 0.1, 0.1),\r\n            new Color3(0.9, 0.9, 0.9)\r\n        ];\r\n    }\r\n\r\n    public static get BlueFireColors(): Color3[] {\r\n        return [\r\n            new Color3(0.1, 0.0, 0.5),\r\n            new Color3(0.0, 0.0, 0.5),\r\n            new Color3(0.1, 0.0, 0.2),\r\n            new Color3(0.0, 0.0, 1.0),\r\n            new Color3(0.1, 0.2, 0.3),\r\n            new Color3(0.0, 0.2, 0.9)\r\n        ];\r\n    }\r\n\r\n    @serialize()\r\n    public get autoGenerateTime(): boolean {\r\n        return this._autoGenerateTime;\r\n    }\r\n\r\n    public set autoGenerateTime(value: boolean) {\r\n        this._autoGenerateTime = value;\r\n    }\r\n\r\n    public get fireColors(): Color3[] {\r\n        return this._fireColors;\r\n    }\r\n\r\n    public set fireColors(value: Color3[]) {\r\n        this._fireColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get time(): number {\r\n        return this._time;\r\n    }\r\n\r\n    public set time(value: number) {\r\n        this._time = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsVector2()\r\n    public get speed(): Vector2 {\r\n        return this._speed;\r\n    }\r\n\r\n    public set speed(value: Vector2) {\r\n        this._speed = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get alphaThreshold(): number {\r\n        return this._alphaThreshold;\r\n    }\r\n\r\n    public set alphaThreshold(value: number) {\r\n        this._alphaThreshold = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this fire procedural texture\r\n     * @returns a serialized fire procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.FireProceduralTexture\";\r\n\r\n        serializationObject.fireColors = [];\r\n        for (var i = 0; i < this._fireColors.length; i++) {\r\n            serializationObject.fireColors.push(this._fireColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Fire Procedural Texture from parsed fire procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing fire procedural texture information\r\n     * @returns a parsed Fire Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): FireProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new FireProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.fireColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.fireColors[i]));\r\n        }\r\n\r\n        texture.fireColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}","export * from \"./fireProceduralTexture\";","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform vec3 herb1Color;\\nuniform vec3 herb2Color;\\nuniform vec3 herb3Color;\\nuniform vec3 groundColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nvec3 color=mix(groundColor,herb1Color,rand(gl_FragCoord.xy*4.0));\\ncolor=mix(color,herb2Color,rand(gl_FragCoord.xy*8.0));\\ncolor=mix(color,herb3Color,rand(gl_FragCoord.xy));\\ncolor=mix(color,herb1Color,fbm(gl_FragCoord.xy*16.0));\\ngl_FragColor=vec4(color,1.0);\\n}\"","import { Effect, ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"grassProceduralTexturePixelShader\"] = require(\"./grassProceduralTexture.fragment.fx\");\r\n\r\nexport class GrassProceduralTexture extends ProceduralTexture {\r\n    private _grassColors: Color3[];\r\n    private _groundColor = new Color3(1, 1, 1);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"grassProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n\r\n        this._grassColors = [\r\n            new Color3(0.29, 0.38, 0.02),\r\n            new Color3(0.36, 0.49, 0.09),\r\n            new Color3(0.51, 0.6, 0.28)\r\n        ];\r\n\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"herb1Color\", this._grassColors[0]);\r\n        this.setColor3(\"herb2Color\", this._grassColors[1]);\r\n        this.setColor3(\"herb3Color\", this._grassColors[2]);\r\n        this.setColor3(\"groundColor\", this._groundColor);\r\n    }\r\n\r\n    public get grassColors(): Color3[] {\r\n        return this._grassColors;\r\n    }\r\n\r\n    public set grassColors(value: Color3[]) {\r\n        this._grassColors = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get groundColor(): Color3 {\r\n        return this._groundColor;\r\n    }\r\n\r\n    public set groundColor(value: Color3) {\r\n        this._groundColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this grass procedural texture\r\n     * @returns a serialized grass procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.GrassProceduralTexture\";\r\n\r\n        serializationObject.grassColors = [];\r\n        for (var i = 0; i < this._grassColors.length; i++) {\r\n            serializationObject.grassColors.push(this._grassColors[i].asArray());\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Grass Procedural Texture from parsed grass procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing grass procedural texture information\r\n     * @returns a parsed Grass Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): GrassProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new GrassProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        var colors: Color3[] = [];\r\n        for (var i = 0; i < parsedTexture.grassColors.length; i++) {\r\n            colors.push(Color3.FromArray(parsedTexture.grassColors[i]));\r\n        }\r\n\r\n        texture.grassColors = colors;\r\n\r\n        return texture;\r\n    }\r\n}\r\n","export * from \"./grassProceduralTexture\";","export * from \"./brick\";\r\nexport * from \"./cloud\";\r\nexport * from \"./fire\";\r\nexport * from \"./grass\";\r\nexport * from \"./marble\";\r\nexport * from \"./normalMap\";\r\nexport * from \"./perlinNoise\";\r\nexport * from \"./road\";\r\nexport * from \"./starfield\";\r\nexport * from \"./wood\";","import * as ProceduralTexturesLib from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (var mat in ProceduralTexturesLib) {\r\n        if (ProceduralTexturesLib.hasOwnProperty(mat)) {\r\n            (<any>globalObject).BABYLON[mat] = (<any>ProceduralTexturesLib)[mat];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"./index\";","export * from \"./marbleProceduralTexture\";","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float numberOfTilesHeight;\\nuniform float numberOfTilesWidth;\\nuniform float amplitude;\\nuniform vec3 marbleColor;\\nuniform vec3 jointColor;\\nconst vec3 tileSize=vec3(1.1,1.0,1.1);\\nconst vec3 tilePct=vec3(0.98,1.0,0.98);\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat turbulence(vec2 P)\\n{\\nfloat val=0.0;\\nfloat freq=1.0;\\nfor (int i=0; i<4; i++)\\n{\\nval+=abs(noise(P*freq)/freq);\\nfreq*=2.07;\\n}\\nreturn val;\\n}\\nfloat roundF(float number){\\nreturn sign(number)*floor(abs(number)+0.5);\\n}\\nvec3 marble_color(float x)\\n{\\nvec3 col;\\nx=0.5*(x+1.);\\nx=sqrt(x); \\nx=sqrt(x);\\nx=sqrt(x);\\ncol=vec3(.2+.75*x); \\ncol.b*=0.95; \\nreturn col;\\n}\\nvoid main()\\n{\\nfloat brickW=1.0/numberOfTilesWidth;\\nfloat brickH=1.0/numberOfTilesHeight;\\nfloat jointWPercentage=0.01;\\nfloat jointHPercentage=0.01;\\nvec3 color=marbleColor;\\nfloat yi=vUV.y/brickH;\\nfloat nyi=roundF(yi);\\nfloat xi=vUV.x/brickW;\\nif (mod(floor(yi),2.0) == 0.0){\\nxi=xi-0.5;\\n}\\nfloat nxi=roundF(xi);\\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\\n}\\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\\n}\\nelse {\\nfloat t=6.28*brickvUV.x/(tileSize.x+noise(vec2(vUV)*6.0));\\nt+=amplitude*turbulence(brickvUV.xy);\\nt=sin(t);\\ncolor=marble_color(t);\\n}\\ngl_FragColor=vec4(color,0.0);\\n}\"","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"marbleProceduralTexturePixelShader\"] = require(\"./marbleProceduralTexture.fragment.fx\");\r\n\r\nexport class MarbleProceduralTexture extends ProceduralTexture {\r\n    private _numberOfTilesHeight: number = 3;\r\n    private _numberOfTilesWidth: number = 3;\r\n    private _amplitude: number = 9.0;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"marbleProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfTilesHeight\", this._numberOfTilesHeight);\r\n        this.setFloat(\"numberOfTilesWidth\", this._numberOfTilesWidth);\r\n        this.setFloat(\"amplitude\", this._amplitude);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesHeight(): number {\r\n        return this._numberOfTilesHeight;\r\n    }\r\n\r\n    public set numberOfTilesHeight(value: number) {\r\n        this._numberOfTilesHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    public set amplitude(value: number) {\r\n        this._amplitude = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesWidth(): number {\r\n        return this._numberOfTilesWidth;\r\n    }\r\n\r\n    public set numberOfTilesWidth(value: number) {\r\n        this._numberOfTilesWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this marble procedural texture\r\n     * @returns a serialized marble procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.MarbleProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Marble Procedural Texture from parsed marble procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing marble procedural texture information\r\n     * @returns a parsed Marble Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): MarbleProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new MarbleProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","export * from \"./normalMapProceduralTexture\";","module.exports = \"precision highp float;\\n\\nuniform sampler2D baseSampler;\\nuniform float size;\\n\\nvarying vec2 vUV;\\n\\nconst vec3 LUMA_COEFFICIENT=vec3(0.2126,0.7152,0.0722);\\nfloat lumaAtCoord(vec2 coord)\\n{\\nvec3 pixel=texture2D(baseSampler,coord).rgb;\\nfloat luma=dot(pixel,LUMA_COEFFICIENT);\\nreturn luma;\\n}\\nvoid main()\\n{\\nfloat lumaU0=lumaAtCoord(vUV+vec2(-1.0,0.0)/size);\\nfloat lumaU1=lumaAtCoord(vUV+vec2( 1.0,0.0)/size);\\nfloat lumaV0=lumaAtCoord(vUV+vec2( 0.0,-1.0)/size);\\nfloat lumaV1=lumaAtCoord(vUV+vec2( 0.0,1.0)/size);\\nvec2 slope=(vec2(lumaU0-lumaU1,lumaV0-lumaV1)+1.0)*0.5;\\ngl_FragColor=vec4(slope,1.0,1.0);\\n}\\n\"","import { Effect, ProceduralTexture, Texture, Scene, serializeAsTexture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"normalMapProceduralTexturePixelShader\"] = require(\"./normalMapProceduralTexture.fragment.fx\");\n\nexport class NormalMapProceduralTexture extends ProceduralTexture {\n    private _baseTexture: Texture;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"normalMapProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setTexture(\"baseSampler\", this._baseTexture);\n        this.setFloat(\"size\", this.getRenderSize());\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n\n        // We need to update the \"size\" uniform\n        this.updateShaderUniforms();\n    }\n\n    @serializeAsTexture()\n    public get baseTexture(): Texture {\n        return this._baseTexture;\n    }\n\n    public set baseTexture(texture: Texture) {\n        this._baseTexture = texture;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this normal map procedural texture\n     * @returns a serialized normal map procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.NormalMapProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Normal Map Procedural Texture from parsed normal map procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing normal map procedural texture information\n     * @returns a parsed Normal Map Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): NormalMapProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new NormalMapProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","export * from \"./perlinNoiseProceduralTexture\";","module.exports = \"\\nprecision highp float;\\n\\nuniform float size;\\nuniform float time;\\nuniform float translationSpeed;\\n\\nvarying vec2 vUV;\\n\\nfloat r(float n)\\n{\\nreturn fract(cos(n*89.42)*343.42);\\n}\\nvec2 r(vec2 n)\\n{\\nreturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \\n}\\nfloat worley(vec2 n,float s)\\n{\\nfloat dis=1.0;\\nfor(int x=-1; x<=1; x++)\\n{\\nfor(int y=-1; y<=1; y++)\\n{\\nvec2 p=floor(n/s)+vec2(x,y);\\nfloat d=length(r(p)+vec2(x,y)-fract(n/s));\\nif (dis>d)\\ndis=d;\\n}\\n}\\nreturn 1.0-dis;\\n}\\nvec3 hash33(vec3 p3)\\n{\\np3=fract(p3*vec3(0.1031,0.11369,0.13787));\\np3+=dot(p3,p3.yxz+19.19);\\nreturn -1.0+2.0*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\\n}\\nfloat perlinNoise(vec3 p)\\n{\\nvec3 pi=floor(p);\\nvec3 pf=p-pi;\\nvec3 w=pf*pf*(3.0-2.0*pf);\\nreturn mix(\\nmix(\\nmix(\\ndot(pf-vec3(0,0,0),hash33(pi+vec3(0,0,0))),\\ndot(pf-vec3(1,0,0),hash33(pi+vec3(1,0,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,0,1),hash33(pi+vec3(0,0,1))),\\ndot(pf-vec3(1,0,1),hash33(pi+vec3(1,0,1))),\\nw.x\\n),\\nw.z\\n),\\nmix(\\nmix(\\ndot(pf-vec3(0,1,0),hash33(pi+vec3(0,1,0))),\\ndot(pf-vec3(1,1,0),hash33(pi+vec3(1,1,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,1,1),hash33(pi+vec3(0,1,1))),\\ndot(pf-vec3(1,1,1),hash33(pi+vec3(1,1,1))),\\nw.x\\n),\\nw.z\\n),\\nw.y\\n);\\n}\\n\\nvoid main(void)\\n{\\nvec2 uv=gl_FragCoord.xy+translationSpeed;\\nfloat dis=(\\n1.0+perlinNoise(vec3(uv/vec2(size,size),time*0.05)*8.0))\\n*(1.0+(worley(uv,32.0)+ 0.5*worley(2.0*uv,32.0)+0.25*worley(4.0*uv,32.0))\\n);\\ngl_FragColor=vec4(vec3(dis/4.0),1.0);\\n}\\n\"","import { Effect, ProceduralTexture, serialize, Scene, Texture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"perlinNoiseProceduralTexturePixelShader\"] = require(\"./perlinNoiseProceduralTexture.fragment.fx\");\n\nexport class PerlinNoiseProceduralTexture extends ProceduralTexture {\n    @serialize()\n    public time: number = 0.0;\n\n    @serialize()\n    public timeScale: number = 1.0;\n\n    @serialize()\n    public translationSpeed: number = 1.0;\n\n    private _currentTranslation: number = 0;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"perlinNoiseProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"size\", this.getRenderSize());\n\n        let scene = this.getScene();\n\n        if (!scene) {\n            return;\n        }\n        var deltaTime = scene.getEngine().getDeltaTime();\n\n        this.time += deltaTime;\n        this.setFloat(\"time\", this.time * this.timeScale / 1000);\n\n        this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;\n        this.setFloat(\"translationSpeed\", this._currentTranslation);\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        this.updateShaderUniforms();\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n    }\n\n    /**\n     * Serializes this perlin noise procedural texture\n     * @returns a serialized perlin noise procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.PerlinNoiseProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing perlin noise procedural texture information\n     * @returns a parsed Perlin Noise Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): PerlinNoiseProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","export * from \"./roadProceduralTexture\";","module.exports = \"precision highp float;\\nvarying vec2 vUV; \\nuniform vec3 roadColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nfloat ratioy=mod(gl_FragCoord.y*100.0 ,fbm(vUV*2.0));\\nvec3 color=roadColor*ratioy;\\ngl_FragColor=vec4(color,1.0);\\n}\"","import { Effect, ProceduralTexture, Color3, Scene, Texture, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"roadProceduralTexturePixelShader\"] = require(\"./roadProceduralTexture.fragment.fx\");\r\n\r\nexport class RoadProceduralTexture extends ProceduralTexture {\r\n    private _roadColor = new Color3(0.53, 0.53, 0.53);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"roadProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setColor3(\"roadColor\", this._roadColor);\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get roadColor(): Color3 {\r\n        return this._roadColor;\r\n    }\r\n\r\n    public set roadColor(value: Color3) {\r\n        this._roadColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this road procedural texture\r\n     * @returns a serialized road procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.RoadProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Road Procedural Texture from parsed road procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing road procedural texture information\r\n     * @returns a parsed Road Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): RoadProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new RoadProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","export * from \"./starfieldProceduralTexture\";","module.exports = \"precision highp float;\\n\\n#define volsteps 20\\n#define iterations 15\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float time;\\nuniform float alpha;\\nuniform float beta;\\nuniform float zoom;\\nuniform float formuparam;\\nuniform float stepsize;\\nuniform float tile;\\nuniform float brightness;\\nuniform float darkmatter;\\nuniform float distfading;\\nuniform float saturation;\\nvoid main()\\n{\\nvec3 dir=vec3(vUV*zoom,1.);\\nfloat localTime=time*0.0001;\\n\\nmat2 rot1=mat2(cos(alpha),sin(alpha),-sin(alpha),cos(alpha));\\nmat2 rot2=mat2(cos(beta),sin(beta),-sin(beta),cos(beta));\\ndir.xz*=rot1;\\ndir.xy*=rot2;\\nvec3 from=vec3(1.,.5,0.5);\\nfrom+=vec3(-2.,localTime*2.,localTime);\\nfrom.xz*=rot1;\\nfrom.xy*=rot2;\\n\\nfloat s=0.1,fade=1.;\\nvec3 v=vec3(0.);\\nfor (int r=0; r<volsteps; r++) {\\nvec3 p=from+s*dir*.5;\\np=abs(vec3(tile)-mod(p,vec3(tile*2.))); \\nfloat pa,a=pa=0.;\\nfor (int i=0; i<iterations; i++) {\\np=abs(p)/dot(p,p)-formuparam; \\na+=abs(length(p)-pa); \\npa=length(p);\\n}\\nfloat dm=max(0.,darkmatter-a*a*.001); \\na*=a*a; \\nif (r>6) fade*=1.-dm; \\n\\nv+=fade;\\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; \\nfade*=distfading; \\ns+=stepsize;\\n}\\nv=mix(vec3(length(v)),v,saturation); \\ngl_FragColor=vec4(v*.01,1.);\\n}\"","import { Effect, ProceduralTexture, Scene, Texture, serialize, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"starfieldProceduralTexturePixelShader\"] = require(\"./starfieldProceduralTexture.fragment.fx\");\n\nexport class StarfieldProceduralTexture extends ProceduralTexture {\n    private _time = 1;\n    private _alpha = 0.5;\n    private _beta = 0.8;\n    private _zoom = 0.8;\n    private _formuparam = 0.53;\n    private _stepsize = 0.1;\n    private _tile = 0.850;\n    private _brightness = 0.0015;\n    private _darkmatter = 0.400;\n    private _distfading = 0.730;\n    private _saturation = 0.850;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"starfieldProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"time\", this._time);\n        this.setFloat(\"alpha\", this._alpha);\n        this.setFloat(\"beta\", this._beta);\n        this.setFloat(\"zoom\", this._zoom);\n        this.setFloat(\"formuparam\", this._formuparam);\n        this.setFloat(\"stepsize\", this._stepsize);\n        this.setFloat(\"tile\", this._tile);\n        this.setFloat(\"brightness\", this._brightness);\n        this.setFloat(\"darkmatter\", this._darkmatter);\n        this.setFloat(\"distfading\", this._distfading);\n        this.setFloat(\"saturation\", this._saturation);\n    }\n\n    @serialize()\n    public get time(): number {\n        return this._time;\n    }\n\n    public set time(value: number) {\n        this._time = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get alpha(): number {\n        return this._alpha;\n    }\n\n    public set alpha(value: number) {\n        this._alpha = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get beta(): number {\n        return this._beta;\n    }\n\n    public set beta(value: number) {\n        this._beta = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get formuparam(): number {\n        return this._formuparam;\n    }\n\n    public set formuparam(value: number) {\n        this._formuparam = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get stepsize(): number {\n        return this._stepsize;\n    }\n\n    public set stepsize(value: number) {\n        this._stepsize = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get zoom(): number {\n        return this._zoom;\n    }\n\n    public set zoom(value: number) {\n        this._zoom = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get tile(): number {\n        return this._tile;\n    }\n\n    public set tile(value: number) {\n        this._tile = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get brightness(): number {\n        return this._brightness;\n    }\n\n    public set brightness(value: number) {\n        this._brightness = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get darkmatter(): number {\n        return this._darkmatter;\n    }\n\n    public set darkmatter(value: number) {\n        this._darkmatter = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get distfading(): number {\n        return this._distfading;\n    }\n\n    public set distfading(value: number) {\n        this._distfading = value;\n        this.updateShaderUniforms();\n    }\n\n    @serialize()\n    public get saturation(): number {\n        return this._saturation;\n    }\n\n    public set saturation(value: number) {\n        this._saturation = value;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this starfield procedural texture\n     * @returns a serialized starfield procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.StarfieldProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Starfield Procedural Texture from parsed startfield procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing startfield procedural texture information\n     * @returns a parsed Starfield Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): StarfieldProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new StarfieldProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}","export * from \"./woodProceduralTexture\";","module.exports = \"precision highp float;\\nvarying vec2 vPosition;\\nvarying vec2 vUV;\\nuniform float ampScale;\\nuniform vec3 woodColor;\\nfloat rand(vec2 n) {\\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\\n}\\nfloat noise(vec2 n) {\\nconst vec2 d=vec2(0.0,1.0);\\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\\n}\\nfloat fbm(vec2 n) {\\nfloat total=0.0,amplitude=1.0;\\nfor (int i=0; i<4; i++) {\\ntotal+=noise(n)*amplitude;\\nn+=n;\\namplitude*=0.5;\\n}\\nreturn total;\\n}\\nvoid main(void) {\\nfloat ratioy=mod(vUV.x*ampScale,2.0+fbm(vUV*0.8));\\nvec3 wood=woodColor*ratioy;\\ngl_FragColor=vec4(wood,1.0);\\n}\"","import { Effect, ProceduralTexture, Color3, Scene, Texture, serialize, serializeAsColor3, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"woodProceduralTexturePixelShader\"] = require(\"./woodProceduralTexture.fragment.fx\");\r\n\r\nexport class WoodProceduralTexture extends ProceduralTexture {\r\n    private _ampScale: number = 100.0;\r\n    private _woodColor: Color3 = new Color3(0.32, 0.17, 0.09);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"woodProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"ampScale\", this._ampScale);\r\n        this.setColor3(\"woodColor\", this._woodColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get ampScale(): number {\r\n        return this._ampScale;\r\n    }\r\n\r\n    public set ampScale(value: number) {\r\n        this._ampScale = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serializeAsColor3()\r\n    public get woodColor(): Color3 {\r\n        return this._woodColor;\r\n    }\r\n\r\n    public set woodColor(value: Color3) {\r\n        this._woodColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this wood procedural texture\r\n     * @returns a serialized wood procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.WoodProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Wood Procedural Texture from parsed wood procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing wood procedural texture information\r\n     * @returns a parsed Wood Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): WoodProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new WoodProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE_babylonjs__;"],"sourceRoot":""}