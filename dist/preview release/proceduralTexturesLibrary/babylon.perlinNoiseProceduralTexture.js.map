{"version":3,"sources":["webpack://PTLIB/webpack/universalModuleDefinition","webpack://PTLIB/webpack/bootstrap","webpack://PTLIB/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/legacy/legacy-perlinNoise.ts","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/index.ts","webpack://PTLIB/./src/perlinNoise/perlinNoiseProceduralTexture.fragment.fx","webpack://PTLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.ts","webpack://PTLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}"],"names":[],"mappings":"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","file":"babylon.perlinNoiseProceduralTexture.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-procedural-textures\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-procedural-textures\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"PTLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_babylonjs__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./legacy/legacy-perlinNoise.ts\");\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import * as proceduralTexture from \"../src/perlinNoise\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in proceduralTexture) {\r\n        (<any>globalObject).BABYLON[key] = (<any>proceduralTexture)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/perlinNoise\";","export * from \"./perlinNoiseProceduralTexture\";","module.exports = \"\\nprecision highp float;\\n\\nuniform float size;\\nuniform float time;\\nuniform float translationSpeed;\\n\\nvarying vec2 vUV;\\n\\nfloat r(float n)\\n{\\nreturn fract(cos(n*89.42)*343.42);\\n}\\nvec2 r(vec2 n)\\n{\\nreturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \\n}\\nfloat worley(vec2 n,float s)\\n{\\nfloat dis=1.0;\\nfor(int x=-1; x<=1; x++)\\n{\\nfor(int y=-1; y<=1; y++)\\n{\\nvec2 p=floor(n/s)+vec2(x,y);\\nfloat d=length(r(p)+vec2(x,y)-fract(n/s));\\nif (dis>d)\\ndis=d;\\n}\\n}\\nreturn 1.0-dis;\\n}\\nvec3 hash33(vec3 p3)\\n{\\np3=fract(p3*vec3(0.1031,0.11369,0.13787));\\np3+=dot(p3,p3.yxz+19.19);\\nreturn -1.0+2.0*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\\n}\\nfloat perlinNoise(vec3 p)\\n{\\nvec3 pi=floor(p);\\nvec3 pf=p-pi;\\nvec3 w=pf*pf*(3.0-2.0*pf);\\nreturn mix(\\nmix(\\nmix(\\ndot(pf-vec3(0,0,0),hash33(pi+vec3(0,0,0))),\\ndot(pf-vec3(1,0,0),hash33(pi+vec3(1,0,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,0,1),hash33(pi+vec3(0,0,1))),\\ndot(pf-vec3(1,0,1),hash33(pi+vec3(1,0,1))),\\nw.x\\n),\\nw.z\\n),\\nmix(\\nmix(\\ndot(pf-vec3(0,1,0),hash33(pi+vec3(0,1,0))),\\ndot(pf-vec3(1,1,0),hash33(pi+vec3(1,1,0))),\\nw.x\\n),\\nmix(\\ndot(pf-vec3(0,1,1),hash33(pi+vec3(0,1,1))),\\ndot(pf-vec3(1,1,1),hash33(pi+vec3(1,1,1))),\\nw.x\\n),\\nw.z\\n),\\nw.y\\n);\\n}\\n\\nvoid main(void)\\n{\\nvec2 uv=gl_FragCoord.xy+translationSpeed;\\nfloat dis=(\\n1.0+perlinNoise(vec3(uv/vec2(size,size),time*0.05)*8.0))\\n*(1.0+(worley(uv,32.0)+ 0.5*worley(2.0*uv,32.0)+0.25*worley(4.0*uv,32.0))\\n);\\ngl_FragColor=vec4(vec3(dis/4.0),1.0);\\n}\\n\"","import { Effect, ProceduralTexture, serialize, Scene, Texture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"perlinNoiseProceduralTexturePixelShader\"] = require(\"./perlinNoiseProceduralTexture.fragment.fx\");\n\nexport class PerlinNoiseProceduralTexture extends ProceduralTexture {\n    @serialize()\n    public time: number = 0.0;\n\n    @serialize()\n    public timeScale: number = 1.0;\n\n    @serialize()\n    public translationSpeed: number = 1.0;\n\n    private _currentTranslation: number = 0;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"perlinNoiseProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"size\", this.getRenderSize());\n\n        let scene = this.getScene();\n\n        if (!scene) {\n            return;\n        }\n        var deltaTime = scene.getEngine().getDeltaTime();\n\n        this.time += deltaTime;\n        this.setFloat(\"time\", this.time * this.timeScale / 1000);\n\n        this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;\n        this.setFloat(\"translationSpeed\", this._currentTranslation);\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        this.updateShaderUniforms();\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n    }\n\n    /**\n     * Serializes this perlin noise procedural texture\n     * @returns a serialized perlin noise procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.PerlinNoiseProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing perlin noise procedural texture information\n     * @returns a parsed Perlin Noise Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): PerlinNoiseProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_babylonjs__;"],"sourceRoot":""}