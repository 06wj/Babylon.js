{"version":3,"sources":["webpack://PROCEDURALTEXTURESLIB/webpack/universalModuleDefinition","webpack://PROCEDURALTEXTURESLIB/webpack/bootstrap","webpack://PROCEDURALTEXTURESLIB/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://PROCEDURALTEXTURESLIB/../Tools/Gulp/../../proceduralTexturesLibrary/legacy/legacy-normalMap.ts","webpack://PROCEDURALTEXTURESLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/index.ts","webpack://PROCEDURALTEXTURESLIB/./src/normalMap/normalMapProceduralTexture.fragment.fx","webpack://PROCEDURALTEXTURESLIB/../Tools/Gulp/../../proceduralTexturesLibrary/src/normalMap/normalMapProceduralTexture.ts","webpack://PROCEDURALTEXTURESLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}"],"names":[],"mappings":"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","file":"babylon.normalMapProceduralTexture.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-procedural-textures\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-procedural-textures\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"PROCEDURALTEXTURESLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_babylonjs__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./legacy/legacy-normalMap.ts\");\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import * as proceduralTexture from \"../src/normalMap\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in proceduralTexture) {\r\n        (<any>globalObject).BABYLON[key] = (<any>proceduralTexture)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/normalMap\";","export * from \"./normalMapProceduralTexture\";","module.exports = \"precision highp float;\\n\\nuniform sampler2D baseSampler;\\nuniform float size;\\n\\nvarying vec2 vUV;\\n\\nconst vec3 LUMA_COEFFICIENT=vec3(0.2126,0.7152,0.0722);\\nfloat lumaAtCoord(vec2 coord)\\n{\\nvec3 pixel=texture2D(baseSampler,coord).rgb;\\nfloat luma=dot(pixel,LUMA_COEFFICIENT);\\nreturn luma;\\n}\\nvoid main()\\n{\\nfloat lumaU0=lumaAtCoord(vUV+vec2(-1.0,0.0)/size);\\nfloat lumaU1=lumaAtCoord(vUV+vec2( 1.0,0.0)/size);\\nfloat lumaV0=lumaAtCoord(vUV+vec2( 0.0,-1.0)/size);\\nfloat lumaV1=lumaAtCoord(vUV+vec2( 0.0,1.0)/size);\\nvec2 slope=(vec2(lumaU0-lumaU1,lumaV0-lumaV1)+1.0)*0.5;\\ngl_FragColor=vec4(slope,1.0,1.0);\\n}\\n\"","import { Effect, ProceduralTexture, Texture, Scene, serializeAsTexture, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"normalMapProceduralTexturePixelShader\"] = require(\"./normalMapProceduralTexture.fragment.fx\");\n\nexport class NormalMapProceduralTexture extends ProceduralTexture {\n    private _baseTexture: Texture;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"normalMapProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setTexture(\"baseSampler\", this._baseTexture);\n        this.setFloat(\"size\", this.getRenderSize());\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n\n        // We need to update the \"size\" uniform\n        this.updateShaderUniforms();\n    }\n\n    @serializeAsTexture()\n    public get baseTexture(): Texture {\n        return this._baseTexture;\n    }\n\n    public set baseTexture(texture: Texture) {\n        this._baseTexture = texture;\n        this.updateShaderUniforms();\n    }\n\n    /**\n     * Serializes this normal map procedural texture\n     * @returns a serialized normal map procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.NormalMapProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Normal Map Procedural Texture from parsed normal map procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing normal map procedural texture information\n     * @returns a parsed Normal Map Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): NormalMapProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new NormalMapProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_babylonjs__;"],"sourceRoot":""}