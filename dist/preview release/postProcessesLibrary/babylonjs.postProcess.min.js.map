{"version":3,"sources":["webpack://BABYLON/webpack/universalModuleDefinition","webpack://BABYLON/webpack/bootstrap","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/index.ts","webpack://BABYLON/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/legacy.ts","webpack://BABYLON/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/asciiArt/index.ts","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/asciiArt/asciiArtPostProcess.ts","webpack://BABYLON/./src/asciiArt/asciiart.fragment.fx","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/digitalRain/index.ts","webpack://BABYLON/../Tools/Gulp/../../postProcessLibrary/src/digitalRain/digitalRainPostProcess.ts","webpack://BABYLON/./src/digitalRain/digitalrain.fragment.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","postProcessLibrary","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","AsciiArtFontTexture","_super","font","text","scene","_this","getScene","_text","_font","wrapU","Texture","CLAMP_ADDRESSMODE","wrapV","maxCharHeight","getFontHeight","maxCharWidth","getFontWidth","_charSize","Math","max","height","textureWidth","ceil","length","textureHeight","_texture","getEngine","createDynamicTexture","NEAREST_SAMPLINGMODE","textureSize","getSize","canvas","document","createElement","width","context","getContext","textBaseline","fillStyle","imageSmoothingEnabled","fillText","offset","updateDynamicTexture","__extends","ctx","measureText","fontDraw","fillRect","pixels","getImageData","data","start","end","row","column","clone","Parse","source","SerializationHelper","__decorate","serialize","BaseTexture","AsciiArtPostProcess","camera","options","getRenderWidth","getRenderHeight","TRILINEAR_SAMPLINGMODE","mixToTile","mixToNormal","characterSet","_asciiArtFontTexture","onApply","effect","setTexture","setFloat4","charSize","PostProcess","DigitalRainFontTexture","DigitalRainPostProcess","_digitalRainFontTexture","alpha","cosTimeZeroOne","matrix","Matrix","random","setMatrix","setFloat"],"mappings":"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","file":"babylonjs.postProcess.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-postProcessesLibrary\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-postProcessesLibrary\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export * from \"./asciiArt\";\r\nexport * from \"./digitalRain\";","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import * as postProcessLibrary from \"./index\";\r\n\r\n/**\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in postProcessLibrary) {\r\n        (<any>globalObject).BABYLON[key] = (<any>postProcessLibrary)[key];\r\n    }\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./asciiArtPostProcess\";","import { BaseTexture, serialize, Nullable, Scene, Texture, SerializationHelper, PostProcess, Camera, Effect } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"asciiartPixelShader\"] = require(\"./asciiart.fragment.fx\");\r\n\r\n/**\r\n * AsciiArtFontTexture is the helper class used to easily create your ascii art font texture.\r\n *\r\n * It basically takes care rendering the font front the given font size to a texture.\r\n * This is used later on in the postprocess.\r\n */\r\nexport class AsciiArtFontTexture extends BaseTexture {\r\n\r\n    @serialize(\"font\")\r\n    private _font: string;\r\n\r\n    @serialize(\"text\")\r\n    private _text: string;\r\n\r\n    private _charSize: number;\r\n\r\n    /**\r\n     * Gets the size of one char in the texture (each char fits in size * size space in the texture).\r\n     */\r\n    public get charSize(): number {\r\n        return this._charSize;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of the Ascii Art FontTexture class\r\n     * @param name the name of the texture\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @param text the caracter set to use in the rendering.\r\n     * @param scene the scene that owns the texture\r\n     */\r\n    constructor(name: string, font: string, text: string, scene: Nullable<Scene> = null) {\r\n        super(scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.name = name;\r\n        this._text == text;\r\n        this._font == font;\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        //this.anisotropicFilteringLevel = 1;\r\n\r\n        // Get the font specific info.\r\n        var maxCharHeight = this.getFontHeight(font);\r\n        var maxCharWidth = this.getFontWidth(font);\r\n\r\n        this._charSize = Math.max(maxCharHeight.height, maxCharWidth);\r\n\r\n        // This is an approximate size, but should always be able to fit at least the maxCharCount.\r\n        var textureWidth = Math.ceil(this._charSize * text.length);\r\n        var textureHeight = this._charSize;\r\n\r\n        // Create the texture that will store the font characters.\r\n        this._texture = scene.getEngine().createDynamicTexture(textureWidth, textureHeight, false, Texture.NEAREST_SAMPLINGMODE);\r\n        //scene.getEngine().setclamp\r\n        var textureSize = this.getSize();\r\n\r\n        // Create a canvas with the final size: the one matching the texture.\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = textureSize.width;\r\n        canvas.height = textureSize.height;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        context.textBaseline = \"top\";\r\n        context.font = font;\r\n        context.fillStyle = \"white\";\r\n        context.imageSmoothingEnabled = false;\r\n\r\n        // Sets the text in the texture.\r\n        for (var i = 0; i < text.length; i++) {\r\n            context.fillText(text[i], i * this._charSize, -maxCharHeight.offset);\r\n        }\r\n\r\n        // Flush the text in the dynamic texture.\r\n\r\n        scene.getEngine().updateDynamicTexture(this._texture, canvas, false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the max char width of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char width\r\n     */\r\n    private getFontWidth(font: string): number {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n\r\n        return ctx.measureText(\"W\").width;\r\n    }\r\n\r\n    // More info here: https://videlais.com/2014/03/16/the-many-and-varied-problems-with-measuring-font-height-for-html5-canvas/\r\n    /**\r\n     * Gets the max char height of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char height\r\n     */\r\n    private getFontHeight(font: string): { height: number, offset: number } {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n        ctx.fillText('jH|', 0, 0);\r\n        var pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;\r\n        var start = -1;\r\n        var end = -1;\r\n        for (var row = 0; row < fontDraw.height; row++) {\r\n            for (var column = 0; column < fontDraw.width; column++) {\r\n                var index = (row * fontDraw.width + column) * 4;\r\n                if (pixels[index] === 0) {\r\n                    if (column === fontDraw.width - 1 && start !== -1) {\r\n                        end = row;\r\n                        row = fontDraw.height;\r\n                        break;\r\n                    }\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (start === -1) {\r\n                        start = row;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return { height: (end - start) + 1, offset: start - 1 };\r\n    }\r\n\r\n    /**\r\n     * Clones the current AsciiArtTexture.\r\n     * @return the clone of the texture.\r\n     */\r\n    public clone(): AsciiArtFontTexture {\r\n        return new AsciiArtFontTexture(this.name, this._font, this._text, this.getScene());\r\n    }\r\n\r\n    /**\r\n     * Parses a json object representing the texture and returns an instance of it.\r\n     * @param source the source JSON representation\r\n     * @param scene the scene to create the texture for\r\n     * @return the parsed texture\r\n     */\r\n    public static Parse(source: any, scene: Scene): AsciiArtFontTexture {\r\n        var texture = SerializationHelper.Parse(() => new AsciiArtFontTexture(source.name, source.font, source.text, scene),\r\n            source, scene, null);\r\n\r\n        return texture;\r\n    }\r\n}\r\n\r\n/**\r\n * Option available in the Ascii Art Post Process.\r\n */\r\nexport interface IAsciiArtPostProcessOptions {\r\n\r\n    /**\r\n     * The font to use following the w3c font definition.\r\n     */\r\n    font?: string;\r\n\r\n    /**\r\n     * The character set to use in the postprocess.\r\n     */\r\n    characterSet?: string;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the ascii art.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToTile?: number;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the ascii art.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToNormal?: number;\r\n}\r\n\r\n/**\r\n * AsciiArtPostProcess helps rendering everithing in Ascii Art.\r\n *\r\n * Simmply add it to your scene and let the nerd that lives in you have fun.\r\n * Example usage: var pp = new AsciiArtPostProcess(\"myAscii\", \"20px Monospace\", camera);\r\n */\r\nexport class AsciiArtPostProcess extends PostProcess {\r\n\r\n    /**\r\n     * The font texture used to render the char in the post process.\r\n     */\r\n    private _asciiArtFontTexture: AsciiArtFontTexture;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the ascii art.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToTile: number = 0;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the ascii art.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToNormal: number = 0;\r\n\r\n    /**\r\n     * Instantiates a new Ascii Art Post Process.\r\n     * @param name the name to give to the postprocess\r\n     * @camera the camera to apply the post process to.\r\n     * @param options can either be the font name or an option object following the IAsciiArtPostProcessOptions format\r\n     */\r\n    constructor(name: string, camera: Camera, options?: string | IAsciiArtPostProcessOptions) {\r\n        super(name,\r\n            'asciiart',\r\n            ['asciiArtFontInfos', 'asciiArtOptions'],\r\n            ['asciiArtFont'],\r\n            {\r\n                width: camera.getEngine().getRenderWidth(),\r\n                height: camera.getEngine().getRenderHeight()\r\n            },\r\n            camera,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            camera.getEngine(),\r\n            true);\r\n\r\n        // Default values.\r\n        var font = \"40px Monospace\";\r\n        var characterSet = \" `-.'_:,\\\"=^;<+!*?/cL\\\\zrs7TivJtC{3F)Il(xZfY5S2eajo14[nuyE]P6V9kXpKwGhqAUbOd8#HRDB0$mgMW&Q%N@\";\r\n\r\n        // Use options.\r\n        if (options) {\r\n            if (typeof (options) === \"string\") {\r\n                font = <string>options;\r\n            }\r\n            else {\r\n                font = (<IAsciiArtPostProcessOptions>options).font || font;\r\n                characterSet = (<IAsciiArtPostProcessOptions>options).characterSet || characterSet;\r\n                this.mixToTile = (<IAsciiArtPostProcessOptions>options).mixToTile || this.mixToTile;\r\n                this.mixToNormal = (<IAsciiArtPostProcessOptions>options).mixToNormal || this.mixToNormal;\r\n            }\r\n        }\r\n\r\n        this._asciiArtFontTexture = new AsciiArtFontTexture(name, font, characterSet, camera.getScene());\r\n        var textureSize = this._asciiArtFontTexture.getSize();\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"asciiArtFont\", this._asciiArtFontTexture);\r\n\r\n            effect.setFloat4(\"asciiArtFontInfos\",\r\n                this._asciiArtFontTexture.charSize,\r\n                characterSet.length,\r\n                textureSize.width,\r\n                textureSize.height);\r\n\r\n            effect.setFloat4(\"asciiArtOptions\",\r\n                this.width,\r\n                this.height,\r\n                this.mixToNormal,\r\n                this.mixToTile);\r\n        };\r\n    }\r\n}\r\n","module.exports = \"\\nvarying vec2 vUV;\\nuniform sampler2D textureSampler;\\nuniform sampler2D asciiArtFont;\\n\\nuniform vec4 asciiArtFontInfos;\\nuniform vec4 asciiArtOptions;\\n\\nfloat getLuminance(vec3 color)\\n{\\nreturn clamp(dot(color,vec3(0.2126,0.7152,0.0722)),0.,1.);\\n}\\n\\nvoid main(void) \\n{\\nfloat caracterSize=asciiArtFontInfos.x;\\nfloat numChar=asciiArtFontInfos.y-1.0;\\nfloat fontx=asciiArtFontInfos.z;\\nfloat fonty=asciiArtFontInfos.w;\\nfloat screenx=asciiArtOptions.x;\\nfloat screeny=asciiArtOptions.y;\\nfloat tileX=float(floor((gl_FragCoord.x)/caracterSize))*caracterSize/screenx;\\nfloat tileY=float(floor((gl_FragCoord.y)/caracterSize))*caracterSize/screeny;\\nvec2 tileUV=vec2(tileX,tileY);\\nvec4 tileColor=texture2D(textureSampler,tileUV);\\nvec4 baseColor=texture2D(textureSampler,vUV);\\nfloat tileLuminance=getLuminance(tileColor.rgb);\\nfloat offsetx=(float(floor(tileLuminance*numChar)))*caracterSize/fontx;\\nfloat offsety=0.0;\\nfloat x=float(mod(gl_FragCoord.x,caracterSize))/fontx;\\nfloat y=float(mod(gl_FragCoord.y,caracterSize))/fonty;\\nvec4 finalColor=texture2D(asciiArtFont,vec2(offsetx+x,offsety+(caracterSize/fonty-y)));\\nfinalColor.rgb*=tileColor.rgb;\\nfinalColor.a=1.0;\\nfinalColor=mix(finalColor,tileColor,asciiArtOptions.w);\\nfinalColor=mix(finalColor,baseColor,asciiArtOptions.z);\\ngl_FragColor=finalColor;\\n}\"","export * from \"./digitalRainPostProcess\";","import { BaseTexture, serialize, Nullable, Scene, Texture, SerializationHelper, PostProcess, Camera, Matrix, Effect } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"digitalrainPixelShader\"] = require(\"./digitalrain.fragment.fx\");\r\n\r\n/**\r\n * DigitalRainFontTexture is the helper class used to easily create your digital rain font texture.\r\n *\r\n * It basically takes care rendering the font front the given font size to a texture.\r\n * This is used later on in the postprocess.\r\n */\r\nexport class DigitalRainFontTexture extends BaseTexture {\r\n\r\n    @serialize(\"font\")\r\n    private _font: string;\r\n\r\n    @serialize(\"text\")\r\n    private _text: string;\r\n\r\n    private _charSize: number;\r\n\r\n    /**\r\n     * Gets the size of one char in the texture (each char fits in size * size space in the texture).\r\n     */\r\n    public get charSize(): number {\r\n        return this._charSize;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of the Digital Rain FontTexture class\r\n     * @param name the name of the texture\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @param text the caracter set to use in the rendering.\r\n     * @param scene the scene that owns the texture\r\n     */\r\n    constructor(name: string, font: string, text: string, scene: Nullable<Scene> = null) {\r\n        super(scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.name = name;\r\n        this._text == text;\r\n        this._font == font;\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        // Get the font specific info.\r\n        var maxCharHeight = this.getFontHeight(font);\r\n        var maxCharWidth = this.getFontWidth(font);\r\n\r\n        this._charSize = Math.max(maxCharHeight.height, maxCharWidth);\r\n\r\n        // This is an approximate size, but should always be able to fit at least the maxCharCount.\r\n        var textureWidth = this._charSize;\r\n        var textureHeight = Math.ceil(this._charSize * text.length);\r\n\r\n        // Create the texture that will store the font characters.\r\n        this._texture = scene.getEngine().createDynamicTexture(textureWidth, textureHeight, false, Texture.NEAREST_SAMPLINGMODE);\r\n        //scene.getEngine().setclamp\r\n        var textureSize = this.getSize();\r\n\r\n        // Create a canvas with the final size: the one matching the texture.\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = textureSize.width;\r\n        canvas.height = textureSize.height;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        context.textBaseline = \"top\";\r\n        context.font = font;\r\n        context.fillStyle = \"white\";\r\n        context.imageSmoothingEnabled = false;\r\n\r\n        // Sets the text in the texture.\r\n        for (var i = 0; i < text.length; i++) {\r\n            context.fillText(text[i], 0, i * this._charSize - maxCharHeight.offset);\r\n        }\r\n\r\n        // Flush the text in the dynamic texture.\r\n        scene.getEngine().updateDynamicTexture(this._texture, canvas, false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the max char width of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char width\r\n     */\r\n    private getFontWidth(font: string): number {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n\r\n        return ctx.measureText(\"W\").width;\r\n    }\r\n\r\n    // More info here: https://videlais.com/2014/03/16/the-many-and-varied-problems-with-measuring-font-height-for-html5-canvas/\r\n    /**\r\n     * Gets the max char height of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char height\r\n     */\r\n    private getFontHeight(font: string): { height: number, offset: number } {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n        ctx.fillText('jH|', 0, 0);\r\n        var pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;\r\n        var start = -1;\r\n        var end = -1;\r\n        for (var row = 0; row < fontDraw.height; row++) {\r\n            for (var column = 0; column < fontDraw.width; column++) {\r\n                var index = (row * fontDraw.width + column) * 4;\r\n                if (pixels[index] === 0) {\r\n                    if (column === fontDraw.width - 1 && start !== -1) {\r\n                        end = row;\r\n                        row = fontDraw.height;\r\n                        break;\r\n                    }\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (start === -1) {\r\n                        start = row;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return { height: (end - start) + 1, offset: start - 1 };\r\n    }\r\n\r\n    /**\r\n     * Clones the current DigitalRainFontTexture.\r\n     * @return the clone of the texture.\r\n     */\r\n    public clone(): DigitalRainFontTexture {\r\n        return new DigitalRainFontTexture(this.name, this._font, this._text, this.getScene());\r\n    }\r\n\r\n    /**\r\n     * Parses a json object representing the texture and returns an instance of it.\r\n     * @param source the source JSON representation\r\n     * @param scene the scene to create the texture for\r\n     * @return the parsed texture\r\n     */\r\n    public static Parse(source: any, scene: Scene): DigitalRainFontTexture {\r\n        var texture = SerializationHelper.Parse(() => new DigitalRainFontTexture(source.name, source.font, source.text, scene),\r\n            source, scene, null);\r\n\r\n        return texture;\r\n    }\r\n}\r\n\r\n/**\r\n * Option available in the Digital Rain Post Process.\r\n */\r\nexport interface IDigitalRainPostProcessOptions {\r\n\r\n    /**\r\n     * The font to use following the w3c font definition.\r\n     */\r\n    font?: string;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToTile?: number;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToNormal?: number;\r\n}\r\n\r\n/**\r\n * DigitalRainPostProcess helps rendering everithing in digital rain.\r\n *\r\n * Simmply add it to your scene and let the nerd that lives in you have fun.\r\n * Example usage: var pp = new DigitalRainPostProcess(\"digitalRain\", \"20px Monospace\", camera);\r\n */\r\nexport class DigitalRainPostProcess extends PostProcess {\r\n\r\n    /**\r\n     * The font texture used to render the char in the post process.\r\n     */\r\n    private _digitalRainFontTexture: DigitalRainFontTexture;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToTile: number = 0;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToNormal: number = 0;\r\n\r\n    /**\r\n     * Instantiates a new Digital Rain Post Process.\r\n     * @param name the name to give to the postprocess\r\n     * @camera the camera to apply the post process to.\r\n     * @param options can either be the font name or an option object following the IDigitalRainPostProcessOptions format\r\n     */\r\n    constructor(name: string, camera: Camera, options?: string | IDigitalRainPostProcessOptions) {\r\n        super(name,\r\n            'digitalrain',\r\n            ['digitalRainFontInfos', 'digitalRainOptions', 'cosTimeZeroOne', 'matrixSpeed'],\r\n            ['digitalRainFont'],\r\n            {\r\n                width: camera.getEngine().getRenderWidth(),\r\n                height: camera.getEngine().getRenderHeight()\r\n            },\r\n            camera,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            camera.getEngine(),\r\n            true);\r\n\r\n        // Default values.\r\n        var font = \"15px Monospace\";\r\n        var characterSet = \"古池や蛙飛び込む水の音ふるいけやかわずとびこむみずのおと初しぐれ猿も小蓑をほしげ也はつしぐれさるもこみのをほしげなり江戸の雨何石呑んだ時鳥えどのあめなんごくのんだほととぎす\";\r\n\r\n        // Use options.\r\n        if (options) {\r\n            if (typeof (options) === \"string\") {\r\n                font = <string>options;\r\n            }\r\n            else {\r\n                font = (<IDigitalRainPostProcessOptions>options).font || font;\r\n                this.mixToTile = (<IDigitalRainPostProcessOptions>options).mixToTile || this.mixToTile;\r\n                this.mixToNormal = (<IDigitalRainPostProcessOptions>options).mixToNormal || this.mixToNormal;\r\n            }\r\n        }\r\n\r\n        this._digitalRainFontTexture = new DigitalRainFontTexture(name, font, characterSet, camera.getScene());\r\n        var textureSize = this._digitalRainFontTexture.getSize();\r\n\r\n        var alpha = 0.0;\r\n        var cosTimeZeroOne = 0.0;\r\n        var matrix = new Matrix();\r\n        for (let i = 0; i < 16; i++) {\r\n            matrix.m[i] = Math.random();\r\n        }\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"digitalRainFont\", this._digitalRainFontTexture);\r\n\r\n            effect.setFloat4(\"digitalRainFontInfos\",\r\n                this._digitalRainFontTexture.charSize,\r\n                characterSet.length,\r\n                textureSize.width,\r\n                textureSize.height);\r\n\r\n            effect.setFloat4(\"digitalRainOptions\",\r\n                this.width,\r\n                this.height,\r\n                this.mixToNormal,\r\n                this.mixToTile);\r\n\r\n            effect.setMatrix(\"matrixSpeed\",\r\n                matrix);\r\n\r\n            alpha += 0.003;\r\n            cosTimeZeroOne = alpha;\r\n            effect.setFloat('cosTimeZeroOne', cosTimeZeroOne);\r\n        };\r\n    }\r\n}\r\n","module.exports = \"\\nvarying vec2 vUV;\\nuniform sampler2D textureSampler;\\nuniform sampler2D digitalRainFont;\\n\\nuniform vec4 digitalRainFontInfos;\\nuniform vec4 digitalRainOptions;\\nuniform mat4 matrixSpeed;\\nuniform float cosTimeZeroOne;\\n\\nfloat getLuminance(vec3 color)\\n{\\nreturn clamp(dot(color,vec3(0.2126,0.7152,0.0722)),0.,1.);\\n}\\n\\nvoid main(void) \\n{\\nfloat caracterSize=digitalRainFontInfos.x;\\nfloat numChar=digitalRainFontInfos.y-1.0;\\nfloat fontx=digitalRainFontInfos.z;\\nfloat fonty=digitalRainFontInfos.w;\\nfloat screenx=digitalRainOptions.x;\\nfloat screeny=digitalRainOptions.y;\\nfloat ratio=screeny/fonty;\\nfloat columnx=float(floor((gl_FragCoord.x)/caracterSize));\\nfloat tileX=float(floor((gl_FragCoord.x)/caracterSize))*caracterSize/screenx;\\nfloat tileY=float(floor((gl_FragCoord.y)/caracterSize))*caracterSize/screeny;\\nvec2 tileUV=vec2(tileX,tileY);\\nvec4 tileColor=texture2D(textureSampler,tileUV);\\nvec4 baseColor=texture2D(textureSampler,vUV);\\nfloat tileLuminance=getLuminance(tileColor.rgb);\\nint st=int(mod(columnx,4.0));\\nfloat speed=cosTimeZeroOne*(sin(tileX*314.5)*0.5+0.6); \\nfloat x=float(mod(gl_FragCoord.x,caracterSize))/fontx;\\nfloat y=float(mod(speed+gl_FragCoord.y/screeny,1.0));\\ny*=ratio;\\nvec4 finalColor=texture2D(digitalRainFont,vec2(x,1.0-y));\\nvec3 high=finalColor.rgb*(vec3(1.2,1.2,1.2)*pow(1.0-y,30.0));\\nfinalColor.rgb*=vec3(pow(tileLuminance,5.0),pow(tileLuminance,1.5),pow(tileLuminance,3.0));\\nfinalColor.rgb+=high;\\nfinalColor.rgb=clamp(finalColor.rgb,0.,1.);\\nfinalColor.a=1.0;\\nfinalColor=mix(finalColor,tileColor,digitalRainOptions.w);\\nfinalColor=mix(finalColor,baseColor,digitalRainOptions.z);\\ngl_FragColor=finalColor;\\n}\""],"sourceRoot":""}