{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/gradient/index.ts","webpack://MATLIB/./legacy-gradient.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/gradient/gradientMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/gradient/gradient.fragment.fx","webpack://MATLIB/../src/gradient/gradient.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","GradientMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","DEPTHPREPASS","POINTSIZE","FOG","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","rebuild","__extends","MaterialDefines","GradientMaterial","scene","_maxSimultaneousLights","topColor","Color3","topColorAlpha","bottomColor","bottomColorAlpha","offset","scale","smoothness","disableLighting","_scaledDiffuse","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","MaterialHelper","PrepareDefinesForFrameBoundValues","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","isReady","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","dispose","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","__decorate","expandToProperty","serializeAsColor3","PushMaterial"],"mappings":"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","file":"babylon.gradientMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./gradientMaterial\";","import * as MatLib from \"../src/gradient/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in MatLib) {\r\n        (<any>globalObject).BABYLON[key] = (<any>MatLib)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/gradient/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"gradientPixelShader\"] = require(\"./gradient.fragment.fx\");\r\nEffect.ShadersStore[\"gradientVertexShader\"] = require(\"./gradient.vertex.fx\");\r\n\r\nclass GradientMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class GradientMaterial extends PushMaterial {\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    // The gradient top color, red by default\r\n    @serializeAsColor3()\r\n    public topColor = new Color3(1, 0, 0);\r\n\r\n    @serialize()\r\n    public topColorAlpha = 1.0;\r\n\r\n    // The gradient top color, blue by default\r\n    @serializeAsColor3()\r\n    public bottomColor = new Color3(0, 0, 1);\r\n\r\n    @serialize()\r\n    public bottomColorAlpha = 1.0;\r\n\r\n    // Gradient offset\r\n    @serialize()\r\n    public offset = 0;\r\n\r\n    @serialize()\r\n    public scale = 1.0;\r\n\r\n    @serialize()\r\n    public smoothness = 1.0;\r\n\r\n    @serialize()\r\n    public disableLighting = false;\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0 || this.topColorAlpha < 1.0 || this.bottomColorAlpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GradientMaterialDefines();\r\n        }\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"gradient\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                \"topColor\", \"bottomColor\", \"offset\", \"smoothness\", \"scale\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setColor4(\"topColor\", this.topColor, this.topColorAlpha);\r\n        this._activeEffect.setColor4(\"bottomColor\", this.bottomColor, this.bottomColorAlpha);\r\n        this._activeEffect.setFloat(\"offset\", this.offset);\r\n        this._activeEffect.setFloat(\"scale\", this.scale);\r\n        this._activeEffect.setFloat(\"smoothness\", this.smoothness);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GradientMaterial {\r\n        return SerializationHelper.Clone(() => new GradientMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GradientMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GradientMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial {\r\n        return SerializationHelper.Parse(() => new GradientMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nuniform vec4 topColor;\\nuniform vec4 bottomColor;\\nuniform float offset;\\nuniform float scale;\\nuniform float smoothness;\\n\\nvarying vec3 vPositionW;\\nvarying vec3 vPosition;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0]\\n#include<__decl__lightFragment>[1]\\n#include<__decl__lightFragment>[2]\\n#include<__decl__lightFragment>[3]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\nfloat h=vPosition.y*scale+offset;\\nfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\\nvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\\n\\nvec3 diffuseColor=baseColor.rgb;\\n\\nfloat alpha=baseColor.a;\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0]\\n#include<lightFragment>[1]\\n#include<lightFragment>[2]\\n#include<lightFragment>[3]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\nvarying vec3 vPosition;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex> \\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\nvPosition=position;\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\""],"sourceRoot":""}