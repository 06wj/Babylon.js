{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/fire/index.ts","webpack://MATLIB/./legacy-fire.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/fire/fireMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/fire/fire.fragment.fx","webpack://MATLIB/../src/fire/fire.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","FireMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","DEPTHPREPASS","POINTSIZE","FOG","UV1","VERTEXCOLOR","VERTEXALPHA","BonesPerMesh","NUM_BONE_INFLUENCERS","INSTANCES","rebuild","__extends","MaterialDefines","FireMaterial","scene","diffuseColor","Color3","speed","_scaledDiffuse","_lastTime","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","_diffuseTexture","StandardMaterial","DiffuseTextureEnabled","isReady","_opacityTexture","_areMiscDirty","pointsCloud","forcePointsCloud","fogEnabled","applyFog","fogMode","Scene","FOGMODE_NONE","MaterialHelper","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","UVKind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","setEffect","createEffect","attributes","uniformsNames","uniformBuffersNames","samplers","onCompiled","onError","indexParameters","maxSimultaneousLights","transformFeedbackVaryings","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","_distortionTexture","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","alpha","visibility","getViewMatrix","BindFogParameters","getDeltaTime","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","getClassName","dispose","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","customType","asArray","Parse","source","rootUrl","material","FromArray","id","Tags","AddTagsTo","tags","backFaceCulling","wireframe","Texture","checkReadyOnlyOnce","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,cACA,mBAAAC,eAAAC,IACAD,OAAA,oCAAAJ,GACA,iBAAAC,QACAA,QAAA,uBAAAD,EAAAG,QAAA,cAEAJ,EAAA,OAAAC,EAAAD,EAAA,SARA,CASCO,OAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAX,YAUA,OANAY,EAAAH,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAU,GAAA,EAGAV,EAAAD,QA0DA,OArDAQ,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAhB,EAAAiB,EAAAC,GACAV,EAAAW,EAAAnB,EAAAiB,IACAG,OAAAC,eAAArB,EAAAiB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAxB,GACA,oBAAAyB,eAAAC,aACAN,OAAAC,eAAArB,EAAAyB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAArB,EAAA,cAAiD2B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAiB,EAAAjB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,+IClFAC,CAAAlC,EAAA,gGCAA,IAAAmC,EAAAnC,EAAA,GAMIoC,OAAkC,IAAXC,EAA0BA,EAA6B,oBAAXxC,OAA0BA,YAASyC,EAC1G,QAA4B,IAAjBF,EACP,IAAK,IAAIX,KAAOU,EACNC,EAAcG,QAAQd,GAAaU,EAAQV,gEAIzDS,CAAAlC,EAAA,qCCbA,IAAAwC,EAGAA,EAAA,WACA,OAAAC,KADA,GAIA,IAEAD,KAAAE,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAC,GAED,iBAAA/C,SAAA2C,EAAA3C,QAOAJ,EAAAD,QAAAgD,mxBCnBA,IAAAK,EAAA7C,EAAA,GAEA6C,EAAAC,OAAOC,aAA8B,gBAAI/C,EAAQ,GACjD6C,EAAAC,OAAOC,aAA+B,iBAAI/C,EAAQ,GAElD,IAAAgD,EAAA,SAAAC,GAiBI,SAAAD,IAAA,IAAAE,EACID,EAAA5C,KAAAoC,OAAOA,YAjBJS,EAAAC,SAAU,EACVD,EAAAE,WAAY,EACZF,EAAAG,YAAa,EACbH,EAAAI,YAAa,EACbJ,EAAAK,YAAa,EACbL,EAAAM,WAAY,EACZN,EAAAO,cAAe,EACfP,EAAAQ,WAAY,EACZR,EAAAS,KAAM,EACNT,EAAAU,KAAM,EACNV,EAAAW,aAAc,EACdX,EAAAY,aAAc,EACdZ,EAAAa,aAAe,EACfb,EAAAc,qBAAuB,EACvBd,EAAAe,WAAY,EAIff,EAAKgB,YAEb,OArBkCC,EAAAnB,EAAAC,GAqBlCD,EArBA,CAAkCH,EAAAuB,iBAuBlCC,EAAA,SAAApB,GA0BI,SAAAoB,EAAY5D,EAAc6D,GAA1B,IAAApB,EACID,EAAA5C,KAAAoC,KAAMhC,EAAM6D,IAAM7B,YAVfS,EAAAqB,aAAe,IAAI1B,EAAA2B,OAAO,EAAG,EAAG,GAGhCtB,EAAAuB,MAAQ,EAEPvB,EAAAwB,eAAiB,IAAI7B,EAAA2B,OAErBtB,EAAAyB,UAAoB,IAyUhC,OAjWkCR,EAAAE,EAAApB,GA8BvBoB,EAAAvC,UAAA8C,kBAAP,WACI,OAAO,GAGJP,EAAAvC,UAAA+C,iBAAP,WACI,OAAO,GAGJR,EAAAvC,UAAAgD,oBAAP,WACI,OAAO,MAIJT,EAAAvC,UAAAiD,kBAAP,SAAyBC,EAAoBC,EAAkBC,GAC3D,GAAIzC,KAAK0C,UACD1C,KAAK2C,qBAAuBH,EAAQI,OACpC,OAAO,EAIVJ,EAAQK,mBACTL,EAAQK,iBAAmB,IAAItC,GAGnC,IAAIuC,EAA+BN,EAAQK,iBACvChB,EAAQ7B,KAAK+C,WAEjB,IAAK/C,KAAKgD,uBAAyBR,EAAQI,QACnC5C,KAAKiD,YAAcpB,EAAMqB,cACzB,OAAO,EAIf,IAAIC,EAAStB,EAAMuB,YAGnB,GAAIN,EAAQO,oBACRP,EAAQQ,UAAW,EACftD,KAAKuD,iBAAmBnD,EAAAoD,iBAAiBC,uBAAuB,CAChE,IAAKzD,KAAKuD,gBAAgBG,UACtB,OAAO,EAEPZ,EAAQQ,UAAW,EACnBR,EAAQpC,SAAU,EAoB9B,GAfAoC,EAAQ/B,YAAYf,KAAK2D,gBAGrBb,EAAQc,gBACRd,EAAQ7B,UAAajB,KAAK6D,aAAehC,EAAMiC,iBAC/ChB,EAAQ5B,IAAOW,EAAMkC,YAAcxB,EAAKyB,UAAYnC,EAAMoC,UAAY7D,EAAA8D,MAAMC,cAAgBnE,KAAK+D,YAIrG3D,EAAAgE,eAAeC,kCAAkCxC,EAAOsB,EAAQL,IAASL,GAGzErC,EAAAgE,eAAeE,4BAA4B/B,EAAMO,GAAS,GAAO,GAG7DA,EAAQyB,QAAS,CACjBzB,EAAQ0B,kBAER3C,EAAM4C,sBAGN,IAAIC,EAAY,IAAItE,EAAAuE,gBAChB7B,EAAQ5B,KACRwD,EAAUE,YAAY,EAAG,OAGzB9B,EAAQvB,qBAAuB,GAC/BmD,EAAUG,uBAAuB,EAAGtC,GAIxC,IAAIuC,GAAW1E,EAAA2E,aAAaC,cAExBlC,EAAQ3B,KACR2D,EAAQG,KAAK7E,EAAA2E,aAAaG,QAG1BpC,EAAQ1B,aACR0D,EAAQG,KAAK7E,EAAA2E,aAAaI,WAG9B/E,EAAAgE,eAAegB,0BAA0BN,EAASvC,EAAMO,EAAS4B,GACjEtE,EAAAgE,eAAeiB,8BAA8BP,EAAShC,GAGtD,IAEIwC,EAAOxC,EAAQyC,WACnB/C,EAAQgD,UAAU3D,EAAMuB,YAAYqC,aAHnB,QAKTC,WAAYZ,EACZa,eAAgB,QAAS,OAAQ,iBAAkB,eAC/C,YAAa,YAAa,YAC1B,gBACA,SACA,aAAc,cAAe,cAAe,cAAe,gBAE3D,OAAQ,SAEZC,uBACAC,UAAW,iBAEP,oBAAqB,kBAEzB/C,QAASwC,EACTZ,UAAWA,EACXoB,WAAY9F,KAAK8F,WACjBC,QAAS/F,KAAK+F,QACdC,gBAAiB,KACjBC,sBAAuB,EACvBC,0BAA2B,MAC5B/C,GAASL,GAGpB,SAAKN,EAAQI,SAAWJ,EAAQI,OAAOc,aAIvC1D,KAAKiD,UAAYpB,EAAMqB,cACvBlD,KAAK2C,qBAAsB,GAEpB,IAGJf,EAAAvC,UAAA8G,eAAP,SAAsBC,EAAe7D,EAAYC,GAC7C,IAAIX,EAAQ7B,KAAK+C,WAGjB,GADmCP,EAAQK,iBAC3C,CAIA,IAAID,EAASJ,EAAQI,OAChBA,IAGL5C,KAAKqG,cAAgBzD,EAGrB5C,KAAKsG,oBAAoBF,GACzBpG,KAAKqG,cAAcE,UAAU,iBAAkB1E,EAAM2E,sBAGrDpG,EAAAgE,eAAeqC,oBAAoBlE,EAAMvC,KAAKqG,eAE1CrG,KAAK0G,YAAY7E,EAAOe,KAEpB5C,KAAKuD,iBAAmBnD,EAAAoD,iBAAiBC,wBACzCzD,KAAKqG,cAAcM,WAAW,iBAAkB3G,KAAKuD,iBAErDvD,KAAKqG,cAAcO,UAAU,gBAAiB5G,KAAKuD,gBAAgBsD,iBAAkB7G,KAAKuD,gBAAgBuD,OAC1G9G,KAAKqG,cAAcE,UAAU,gBAAiBvG,KAAKuD,gBAAgBwD,oBAEnE/G,KAAKqG,cAAcM,WAAW,oBAAqB3G,KAAKgH,oBACxDhH,KAAKqG,cAAcM,WAAW,iBAAkB3G,KAAK2D,kBAIzDvD,EAAAgE,eAAe6C,cAAcjH,KAAKqG,cAAexE,GAG7C7B,KAAK6D,aACL7D,KAAKqG,cAAca,SAAS,YAAalH,KAAKmH,WAGlD/G,EAAAgE,eAAegD,gBAAgBxE,EAAQf,IAG3C7B,KAAKqG,cAAcgB,UAAU,gBAAiBrH,KAAKiC,eAAgBjC,KAAKsH,MAAQ/E,EAAKgF,YAGjF1F,EAAMkC,YAAcxB,EAAKyB,UAAYnC,EAAMoC,UAAY7D,EAAA8D,MAAMC,cAC7DnE,KAAKqG,cAAcE,UAAU,OAAQ1E,EAAM2F,iBAI/CpH,EAAAgE,eAAeqD,kBAAkB5F,EAAOU,EAAMvC,KAAKqG,eAGnDrG,KAAKkC,WAAaL,EAAMuB,YAAYsE,eACpC1H,KAAKqG,cAAca,SAAS,OAAQlH,KAAKkC,WAGzClC,KAAKqG,cAAca,SAAS,QAASlH,KAAKgC,OAE1ChC,KAAK2H,WAAWpF,EAAMvC,KAAKqG,kBAGxBzE,EAAAvC,UAAAuI,eAAP,WACI,IAAIC,KAYJ,OAVI7H,KAAKuD,iBAAmBvD,KAAKuD,gBAAgBuE,YAAc9H,KAAKuD,gBAAgBuE,WAAWC,OAAS,GACpGF,EAAQ5C,KAAKjF,KAAKuD,iBAElBvD,KAAKgH,oBAAsBhH,KAAKgH,mBAAmBc,YAAc9H,KAAKgH,mBAAmBc,WAAWC,OAAS,GAC7GF,EAAQ5C,KAAKjF,KAAKgH,oBAElBhH,KAAK2D,iBAAmB3D,KAAK2D,gBAAgBmE,YAAc9H,KAAK2D,gBAAgBmE,WAAWC,OAAS,GACpGF,EAAQ5C,KAAKjF,KAAK2D,iBAGfkE,GAGJjG,EAAAvC,UAAA2I,kBAAP,WACI,IAAIC,EAAiBzH,EAAAnB,UAAM2I,kBAAiBpK,KAAAoC,MAc5C,OAZIA,KAAKuD,iBACL0E,EAAehD,KAAKjF,KAAKuD,iBAGzBvD,KAAKgH,oBACLiB,EAAehD,KAAKjF,KAAKgH,oBAGzBhH,KAAK2D,iBACLsE,EAAehD,KAAKjF,KAAK2D,iBAGtBsE,GAGJrG,EAAAvC,UAAA6I,WAAP,SAAkBC,GACd,QAAI3H,EAAAnB,UAAM6I,WAAUtK,KAAAoC,KAACmI,KAIjBnI,KAAKuD,kBAAoB4E,IAIzBnI,KAAKgH,qBAAuBmB,GAI5BnI,KAAK2D,kBAAoBwE,KAO1BvG,EAAAvC,UAAA+I,aAAP,WACI,MAAO,gBAGJxG,EAAAvC,UAAAgJ,QAAP,SAAeC,GACPtI,KAAKuD,iBACLvD,KAAKuD,gBAAgB8E,UAErBrI,KAAKgH,oBACLhH,KAAKgH,mBAAmBqB,UAG5B7H,EAAAnB,UAAMgJ,QAAOzK,KAAAoC,KAACsI,IAGX1G,EAAAvC,UAAAkJ,MAAP,SAAavK,GAAb,IAAAyC,EAAAT,KACI,OAAOI,EAAAoI,oBAAoBC,MAAoB,WAAM,WAAI7G,EAAa5D,EAAMyC,EAAKsC,aAAa/C,OAG3F4B,EAAAvC,UAAAqJ,UAAP,WAEI,IAAIC,EAAsBnI,EAAAnB,UAAMqJ,UAAS9K,KAAAoC,MAiBzC,OAhBA2I,EAAoBC,WAAa,uBACjCD,EAAoB7G,aAAe9B,KAAK8B,aAAa+G,UACrDF,EAAoB3G,MAAQhC,KAAKgC,MAE7BhC,KAAKuD,kBACLoF,EAAoBpF,gBAAkBvD,KAAKuD,gBAAgBmF,aAG3D1I,KAAKgH,qBACL2B,EAAoB3B,mBAAqBhH,KAAKgH,mBAAmB0B,aAGjE1I,KAAK2D,kBACLgF,EAAoBhF,gBAAkB3D,KAAK2D,gBAAgB+E,aAGxDC,GAGG/G,EAAAkH,MAAd,SAAoBC,EAAalH,EAAcmH,GAC3C,IAAIC,EAAW,IAAIrH,EAAamH,EAAO/K,KAAM6D,GA6B7C,OA3BAoH,EAASnH,aAAe1B,EAAA2B,OAAOmH,UAAUH,EAAOjH,cAChDmH,EAASjH,MAAQ+G,EAAO/G,MAExBiH,EAAS3B,MAAQyB,EAAOzB,MAExB2B,EAASE,GAAKJ,EAAOI,GAErB/I,EAAAgJ,KAAKC,UAAUJ,EAAUF,EAAOO,MAChCL,EAASM,gBAAkBR,EAAOQ,gBAClCN,EAASO,UAAYT,EAAOS,UAExBT,EAAOxF,kBACP0F,EAAS1F,gBAAkBnD,EAAAqJ,QAAQX,MAAMC,EAAOxF,gBAAiB1B,EAAOmH,IAGxED,EAAO/B,qBACPiC,EAASjC,mBAAqB5G,EAAAqJ,QAAQX,MAAMC,EAAO/B,mBAAoBnF,EAAOmH,IAG9ED,EAAOpF,kBACPsF,EAAStF,gBAAkBvD,EAAAqJ,QAAQX,MAAMC,EAAOpF,gBAAiB9B,EAAOmH,IAGxED,EAAOW,qBACPT,EAASS,mBAAqBX,EAAOW,oBAGlCT,GA7VXU,GADCvJ,EAAAwJ,mBAAmB,yDAGpBD,GADCvJ,EAAAyJ,iBAAiB,0EAIlBF,GADCvJ,EAAAwJ,mBAAmB,+DAGpBD,GADCvJ,EAAAyJ,iBAAiB,6EAIlBF,GADCvJ,EAAAwJ,mBAAmB,yDAGpBD,GADCvJ,EAAAyJ,iBAAiB,0EAIlBF,GADCvJ,EAAA0J,kBAAkB,+CAInBH,GADCvJ,EAAAsI,yCA8UL9G,EAjWA,CAAkCxB,EAAA2J,cAArBhN,EAAA6E,8BC5Bb5E,EAAAD,QAAAM,iBCAAL,EAAAD,QAAA,+zDCAAC,EAAAD,QAAA","file":"babylon.fireMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./fireMaterial\";","import * as MatLib from \"../src/fire/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in MatLib) {\r\n        (<any>globalObject).BABYLON[key] = (<any>MatLib)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/fire/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, Nullable, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, Matrix, Mesh, IAnimatable, SerializationHelper, Tags, Texture, } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"firePixelShader\"] = require(\"./fire.fragment.fx\");\r\nEffect.ShadersStore[\"fireVertexShader\"] = require(\"./fire.vertex.fx\");\r\n\r\nclass FireMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public UV1 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public BonesPerMesh = 0;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FireMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"distortionTexture\")\r\n    private _distortionTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public distortionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public speed = 1.0;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n    private _lastTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FireMaterialDefines();\r\n        }\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines.ALPHATEST = this._opacityTexture ? true : false;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            defines.POINTSIZE = (this.pointsCloud || scene.forcePointsCloud);\r\n            defines.FOG = (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE && this.fogEnabled);\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fire\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                {\r\n                    attributes: attribs,\r\n                    uniformsNames: [\"world\", \"view\", \"viewProjection\", \"vEyePosition\",\r\n                        \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                        \"vDiffuseInfos\",\r\n                        \"mBones\",\r\n                        \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                        // Fire\r\n                        \"time\", \"speed\"\r\n                    ],\r\n                    uniformBuffersNames: [],\r\n                    samplers: [\"diffuseSampler\",\r\n                        // Fire\r\n                        \"distortionSampler\", \"opacitySampler\"\r\n                    ],\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: null,\r\n                    maxSimultaneousLights: 4,\r\n                    transformFeedbackVaryings: null\r\n                }, engine), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n\r\n                this._activeEffect.setTexture(\"distortionSampler\", this._distortionTexture);\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Time\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", this._lastTime);\r\n\r\n        // Speed\r\n        this._activeEffect.setFloat(\"speed\", this.speed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n        if (this._distortionTexture && this._distortionTexture.animations && this._distortionTexture.animations.length > 0) {\r\n            results.push(this._distortionTexture);\r\n        }\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            activeTextures.push(this._distortionTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._distortionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FireMaterial\";\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n        if (this._distortionTexture) {\r\n            this._distortionTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FireMaterial {\r\n        return SerializationHelper.Clone<FireMaterial>(() => new FireMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n\r\n        var serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FireMaterial\";\r\n        serializationObject.diffuseColor = this.diffuseColor.asArray();\r\n        serializationObject.speed = this.speed;\r\n\r\n        if (this._diffuseTexture) {\r\n            serializationObject._diffuseTexture = this._diffuseTexture.serialize();\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            serializationObject._distortionTexture = this._distortionTexture.serialize();\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            serializationObject._opacityTexture = this._opacityTexture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FireMaterial {\r\n        var material = new FireMaterial(source.name, scene);\r\n\r\n        material.diffuseColor = Color3.FromArray(source.diffuseColor);\r\n        material.speed = source.speed;\r\n\r\n        material.alpha = source.alpha;\r\n\r\n        material.id = source.id;\r\n\r\n        Tags.AddTagsTo(material, source.tags);\r\n        material.backFaceCulling = source.backFaceCulling;\r\n        material.wireframe = source.wireframe;\r\n\r\n        if (source._diffuseTexture) {\r\n            material._diffuseTexture = Texture.Parse(source._diffuseTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._distortionTexture) {\r\n            material._distortionTexture = Texture.Parse(source._distortionTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._opacityTexture) {\r\n            material._opacityTexture = Texture.Parse(source._opacityTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source.checkReadyOnlyOnce) {\r\n            material.checkReadyOnlyOnce = source.checkReadyOnlyOnce;\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n\\nuniform sampler2D distortionSampler;\\nuniform sampler2D opacitySampler;\\n#ifdef DIFFUSE\\nvarying vec2 vDistortionCoords1;\\nvarying vec2 vDistortionCoords2;\\nvarying vec2 vDistortionCoords3;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvec4 bx2(vec4 x)\\n{\\nreturn vec4(2.0)*x-vec4(1.0);\\n}\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\n\\nfloat alpha=1.0;\\n#ifdef DIFFUSE\\n\\nconst float distortionAmount0=0.092;\\nconst float distortionAmount1=0.092;\\nconst float distortionAmount2=0.092;\\nvec2 heightAttenuation=vec2(0.3,0.39);\\nvec4 noise0=texture2D(distortionSampler,vDistortionCoords1);\\nvec4 noise1=texture2D(distortionSampler,vDistortionCoords2);\\nvec4 noise2=texture2D(distortionSampler,vDistortionCoords3);\\nvec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;\\nvec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);\\nvec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\\n#ifdef ALPHATEST\\nif (opacityColor.r<0.1)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;\\nbaseColor*=opacityColor;\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n\\nvec4 color=vec4(baseColor.rgb,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n\\nuniform float time;\\nuniform float speed;\\n#ifdef DIFFUSE\\nvarying vec2 vDistortionCoords1;\\nvarying vec2 vDistortionCoords2;\\nvarying vec2 vDistortionCoords3;\\n#endif\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n\\n#ifdef DIFFUSE\\nvDiffuseUV=uv;\\nvDiffuseUV.y-=0.2;\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n#ifdef DIFFUSE\\n\\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;\\nvDistortionCoords1.x=uv.x;\\nvDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;\\nvDistortionCoords2.x=uv.x;\\nvDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;\\nvDistortionCoords3.x=uv.x;\\nvDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\\n#endif\\n}\\n\""],"sourceRoot":""}