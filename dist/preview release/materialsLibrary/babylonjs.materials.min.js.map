{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/legacy/legacy.ts","webpack://MATLIB/../node_modules/webpack/buildin/global.js","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/cell/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/cell/cellMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/cell/cell.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/cell/cell.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/custom/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/custom/customMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fire/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fire/fireMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fire/fire.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fire/fire.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fur/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fur/furMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fur/fur.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/fur/fur.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/gradient/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/gradient/gradientMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/gradient/gradient.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/gradient/gradient.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/grid/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/grid/gridMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/grid/grid.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/grid/grid.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/lava/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/lava/lavaMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/lava/lava.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/lava/lava.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/mix/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/mix/mixMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/mix/mix.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/mix/mix.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/normal/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/normal/normalMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/normal/normal.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/normal/normal.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/shadowOnlyMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/shadowOnly.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/shadowOnly.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/simple/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/simple/simpleMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/simple/simple.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/simple/simple.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/sky/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/sky/skyMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/sky/sky.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/sky/sky.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/terrain/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/terrain/terrainMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/terrain/terrain.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/terrain/terrain.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/triPlanar/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/triPlanar/triPlanarMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/triPlanar/triplanar.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/triPlanar/triplanar.vertex.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/water/index.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/water/waterMaterial.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/water/water.fragment.ts","webpack://MATLIB/../Tools/Gulp/../../materialsLibrary/src/water/water.vertex.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","mat","BABYLON","g","this","Function","eval","e","babylonjs_1","CellMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","POINTSIZE","FOG","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","NDOTL","CUSTOMUSERLIGHTING","CELLBASIC","DEPTHPREPASS","rebuild","__extends","MaterialDefines","CellMaterial","scene","diffuseColor","Color3","_computeHighLevel","_disableLighting","_maxSimultaneousLights","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","StandardMaterial","DiffuseTextureEnabled","isReady","computeHighLevel","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","getClassName","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","source","rootUrl","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial","shader","Effect","ShadersStore","CustomShaderStructure","ShaderSpecialParts","CustomMaterial","CustomParts","customShaderNameResolve","Builder","FragmentShader","VertexShader","AttachAfterBind","el","_newUniformInstances","ea","split","setVector2","setVector3","setVector4","_newSamplerInstances","ReviewUniform","arr","ind","_newUniforms","_customUniform","indexOf","shaderName","_isCreatedShader","_createdShaderName","ShaderIndexer","fn_afterBind","replace","Vertex_Begin","Vertex_Definitions","Vertex_MainBegin","Vertex_Before_PositionUpdated","Vertex_Before_NormalUpdated","Fragment_Begin","Fragment_MainBegin","Fragment_Definitions","Fragment_Custom_Diffuse","Fragment_Custom_Alpha","Fragment_Before_FragColor","AddUniform","kind","param","shaderPart","FireMaterialDefines","FireMaterial","speed","_scaledDiffuse","_lastTime","_opacityTexture","_areMiscDirty","forcePointsCloud","transformFeedbackVaryings","_distortionTexture","getDeltaTime","asArray","material","FromArray","id","Tags","AddTagsTo","tags","backFaceCulling","wireframe","Texture","checkReadyOnlyOnce","FurMaterialDefines","HEIGHTMAP","HIGHLEVEL","FurMaterial","furLength","furAngle","furColor","furOffset","furSpacing","furGravity","Vector3","furSpeed","furDensity","furOcclusion","highLevelFur","_furTime","furTime","updateFur","_meshes","offsetFur","diffuseTexture","furTexture","heightTexture","getCaps","maxVertexTextureImageUnits","markAsUnprocessed","getCachedMaterial","_heightTexture","sourceMeshName","quality","executeWhenReady","sourceMesh","getMeshByName","GenerateTexture","FurifyMesh","DynamicTexture","context","getContext","fillStyle","Math","floor","random","fillRect","getSize","width","height","update","wrapU","WRAP_ADDRESSMODE","wrapV","meshes","materials","pop","EnableFor","offsetMesh","skeleton","position","Zero","parent","serializeAsVector3","GradientMaterialDefines","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","GradientMaterial","topColor","topColorAlpha","bottomColor","bottomColorAlpha","offset","scale","smoothness","GridMaterialDefines","TRANSPARENT","PREMULTIPLYALPHA","GridMaterial","mainColor","Black","lineColor","Teal","gridRatio","gridOffset","majorUnitFrequency","minorUnitVisibility","opacity","preMultiplyAlpha","_gridControl","Vector4","needAlphaBlendingForMesh","multiply","getProjectionMatrix","setColor3","x","y","round","z","w","LavaMaterialDefines","UNLIT","LavaMaterial","movingSpeed","lowFrequencySpeed","fogDensity","_unlit","noiseTexture","fogColor","MixMaterialDefines","SPECULARTERM","MIXMAP2","MixMaterial","specularColor","specularPower","_mixTexture1","_mixTexture2","_diffuseTexture1","uScale","vScale","_diffuseTexture2","_diffuseTexture3","_diffuseTexture4","_diffuseTexture5","_diffuseTexture6","_diffuseTexture7","_diffuseTexture8","NormalMaterialDefines","NormalMaterial","ShadowOnlyMaterialDefines","ShadowOnlyMaterial","shadowColor","_activeLight","light","_i","_a","_lightSources","shadowEnabled","lightPosition","splice","SimpleMaterialDefines","SimpleMaterial","SkyMaterialDefines","SkyMaterial","luminance","turbidity","rayleigh","mieCoefficient","mieDirectionalG","distance","inclination","azimuth","sunPosition","useSunPosition","_cameraPosition","camera","activeCamera","cameraWorldMatrix","getWorldMatrix","theta","PI","phi","cos","sin","TerrainMaterialDefines","BUMP","TerrainMaterial","mixTexture","bumpTexture1","bumpTexture2","bumpTexture3","BumpTextureEnabled","_mixTexture","standardDerivatives","_bumpTexture1","_bumpTexture2","_bumpTexture3","TriPlanarMaterialDefines","DIFFUSEX","DIFFUSEY","DIFFUSEZ","BUMPX","BUMPY","BUMPZ","TriPlanarMaterial","tileSize","textures","diffuseTextureX","diffuseTextureY","diffuseTextureZ","textureDefines","normalTextureX","normalTextureY","normalTextureZ","_diffuseTextureX","_diffuseTextureY","_diffuseTextureZ","_normalTextureX","_normalTextureY","_normalTextureZ","WaterMaterialDefines","REFLECTION","LOGARITHMICDEPTH","FRESNELSEPARATE","BUMPSUPERIMPOSE","BUMPAFFECTSREFLECTION","WaterMaterial","renderTargetSize","Vector2","windForce","windDirection","waveHeight","bumpHeight","_bumpSuperimpose","_fresnelSeparate","_bumpAffectsReflection","waterColor","colorBlendFactor","waterColor2","colorBlendFactor2","waveLength","waveSpeed","_renderTargets","SmartArray","_mesh","_reflectionTransform","Matrix","_lastDeltaTime","_createRenderTargets","getRenderTargetTextures","reset","_reflectionRTT","_refractionRTT","_useLogarithmicDepth","fragmentDepthSupported","_markAllSubMeshesAsMiscDirty","addToRenderList","node","renderList","enableRenderTargets","enable","refreshRate","getRenderList","bumpTexture","ReflectionTextureEnabled","_waitingRenderList","getNodeByID","BindLogDepth","wrvp","deltaTime","isVisible","RenderTargetTexture","MIRROR_ADDRESSMODE","ignoreCameraViewport","savedViewMatrix","clipPlane","mirrorMatrix","onBeforeRender","positiony","Plane","FromPositionAndNormal","onAfterRender","ReflectionToRef","multiplyToRef","setTransformMatrix","cullBackFaces","_mirroredCameraPosition","TransformCoordinates","_bumpTexture","index","customRenderTargets","CreateDefaultMesh","Mesh","CreateGround","serializeAsVector2"],"mappings":"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","file":"babylonjs.materials.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export * from \"./cell\";\r\nexport * from \"./custom\";\r\nexport * from \"./fire\";\r\nexport * from \"./fur\";\r\nexport * from \"./gradient\";\r\nexport * from \"./grid\";\r\nexport * from \"./lava\";\r\nexport * from \"./mix\";\r\nexport * from \"./normal\";\r\nexport * from \"./shadowOnly\";\r\nexport * from \"./simple\";\r\nexport * from \"./sky\";\r\nexport * from \"./terrain\";\r\nexport * from \"./triPlanar\";\r\nexport * from \"./water\";","import * as MatLib from \"../src/index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (var mat in MatLib) {\r\n        if (MatLib.hasOwnProperty(mat)) {\r\n            (<any>globalObject).BABYLON[mat] = (<any>MatLib)[mat];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"../src/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./cellMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, expandToProperty, BaseTexture, serializeAsColor3, Scene, Color3, serialize, AbstractMesh, Nullable, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./cell.fragment\";\r\nimport \"./cell.vertex\";\r\n\r\nclass CellMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public NDOTL = true;\r\n    public CUSTOMUSERLIGHTING = true;\r\n    public CELLBASIC = true;\r\n    public DEPTHPREPASS = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class CellMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"computeHighLevel\")\r\n    public _computeHighLevel: boolean = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public computeHighLevel: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new CellMaterialDefines();\r\n        }\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        defines.CELLBASIC = !this.computeHighLevel;\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"cell\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return this._diffuseTexture === texture;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"CellMaterial\";\r\n    }\r\n\r\n    public clone(name: string): CellMaterial {\r\n        return SerializationHelper.Clone<CellMaterial>(() => new CellMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.CellMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): CellMaterial {\r\n        return SerializationHelper.Parse(() => new CellMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'cellPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\n{\ndiffuseBase=info.diffuse*shadow;\n#ifdef CELLBASIC\nfloat level=1.0;\nif (info.ndl<0.5)\nlevel=0.5;\ndiffuseBase.rgb*vec3(level,level,level);\n#else\nfloat ToonThresholds[4];\nToonThresholds[0]=0.95;\nToonThresholds[1]=0.5;\nToonThresholds[2]=0.2;\nToonThresholds[3]=0.03;\nfloat ToonBrightnessLevels[5];\nToonBrightnessLevels[0]=1.0;\nToonBrightnessLevels[1]=0.8;\nToonBrightnessLevels[2]=0.6;\nToonBrightnessLevels[3]=0.35;\nToonBrightnessLevels[4]=0.2;\nif (info.ndl>ToonThresholds[0])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[0];\n}\nelse if (info.ndl>ToonThresholds[1])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[1];\n}\nelse if (info.ndl>ToonThresholds[2])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[2];\n}\nelse if (info.ndl>ToonThresholds[3])\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[3];\n}\nelse\n{\ndiffuseBase.rgb*=ToonBrightnessLevels[4];\n}\n#endif\nreturn max(diffuseBase,vec3(0.2));\n}\nvoid main(void)\n{\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nlightingInfo info;\nvec3 diffuseBase=vec3(0.,0.,0.);\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'cellVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./customMaterial\";","import { StandardMaterial, Texture, Mesh, Effect, StandardMaterialDefines, Scene } from \"babylonjs\";\n\nexport class CustomShaderStructure {\n\n    public FragmentStore: string;\n    public VertexStore: string;\n\n    constructor() { }\n}\n\nexport class ShaderSpecialParts {\n\n    constructor() { }\n\n    public Fragment_Begin: string;\n    public Fragment_Definitions: string;\n    public Fragment_MainBegin: string;\n\n    // diffuseColor\n    public Fragment_Custom_Diffuse: string;\n\n    // alpha\n    public Fragment_Custom_Alpha: string;\n\n    public Fragment_Before_FragColor: string;\n\n    public Vertex_Begin: string;\n    public Vertex_Definitions: string;\n    public Vertex_MainBegin: string;\n\n    // positionUpdated\n    public Vertex_Before_PositionUpdated: string;\n\n    // normalUpdated\n    public Vertex_Before_NormalUpdated: string;\n}\n\nexport class CustomMaterial extends StandardMaterial {\n    public static ShaderIndexer = 1;\n    public CustomParts: ShaderSpecialParts;\n    _isCreatedShader: boolean;\n    _createdShaderName: string;\n    _customUniform: string[];\n    _newUniforms: string[];\n    _newUniformInstances: any[];\n    _newSamplerInstances: Texture[];\n\n    public  FragmentShader : string ;\n    public  VertexShader : string ;\n\n    public AttachAfterBind(mesh: Mesh, effect: Effect) {\n        for (var el in this._newUniformInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'vec2') {\n                effect.setVector2(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec3') {\n                effect.setVector3(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec4') {\n                effect.setVector4(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'mat4') {\n                effect.setMatrix(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'float') {\n                effect.setFloat(ea[1], this._newUniformInstances[el]);\n            }\n        }\n        for (var el in this._newSamplerInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'sampler2D' && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\n                effect.setTexture(ea[1], this._newSamplerInstances[el]);\n            }\n        }\n    }\n\n    public ReviewUniform(name: string, arr: string[]): string[] {\n        if (name == \"uniform\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') == -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        if (name == \"sampler\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') != -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        return arr;\n    }\n\n    public Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: StandardMaterialDefines): string {\n\n        if (this._isCreatedShader) {\n            return this._createdShaderName;\n        }\n        this._isCreatedShader = false;\n\n        CustomMaterial.ShaderIndexer++;\n        var name: string = \"custom_\" + CustomMaterial.ShaderIndexer;\n\n        this.ReviewUniform(\"uniform\", uniforms);\n        this.ReviewUniform(\"sampler\", samplers);\n\n        var fn_afterBind = this._afterBind.bind(this);\n        this._afterBind = (m, e) => {\n            if (!e) {\n                return;\n            }\n            this.AttachAfterBind(m, e);\n            try { fn_afterBind(m, e); }\n            catch (e) { }\n        };\n\n        BABYLON.Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader\n            .replace('#define CUSTOM_VERTEX_BEGIN', (this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\"))\n            .replace('#define CUSTOM_VERTEX_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_BEGIN', (this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_POSITION', (this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_NORMAL', (this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\"));\n\n            // #define CUSTOM_VERTEX_MAIN_END\n\n        BABYLON.Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader\n            .replace('#define CUSTOM_FRAGMENT_BEGIN', (this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_MAIN_BEGIN', (this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE', (this.CustomParts.Fragment_Custom_Diffuse ? this.CustomParts.Fragment_Custom_Diffuse : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_ALPHA', (this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR', (this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\"));\n\n            // #define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n\n            // #define CUSTOM_FRAGMENT_BEFORE_FOG\n\n        this._isCreatedShader = true;\n        this._createdShaderName = name;\n\n        return name;\n    }\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n        this.CustomParts = new ShaderSpecialParts();\n        this.customShaderNameResolve = this.Builder;\n\n        this.FragmentShader = BABYLON.Effect.ShadersStore[\"defaultPixelShader\"];\n        this.VertexShader = BABYLON.Effect.ShadersStore[\"defaultVertexShader\"];\n    }\n\n    public AddUniform(name: string, kind: string, param: any): CustomMaterial {\n        if (!this._customUniform) {\n            this._customUniform = new Array();\n            this._newUniforms = new Array();\n            this._newSamplerInstances = new Array();\n            this._newUniformInstances = new Array();\n        }\n        if (param) {\n            if (kind.indexOf(\"sampler\") == -1) {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n            else {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n        }\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\n        this._newUniforms.push(name);\n\n        return this;\n    }\n\n    public Fragment_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Begin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Definitions = shaderPart;\n        return this;\n    }\n\n    public Fragment_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_Diffuse(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Diffuse = shaderPart.replace(\"result\", \"diffuseColor\");\n        return this;\n    }\n\n    public Fragment_Custom_Alpha(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\n        return this;\n    }\n\n    public Fragment_Before_FragColor(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\n        return this;\n    }\n\n    public Vertex_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Begin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Definitions = shaderPart;\n        return this;\n    }\n\n    public Vertex_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Before_PositionUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\n        return this;\n    }\n\n    public Vertex_Before_NormalUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\n        return this;\n    }\n}\n","export * from \"./fireMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, Nullable, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, Matrix, Mesh, IAnimatable, SerializationHelper, Tags, Texture, } from \"babylonjs\";\r\n\r\nimport \"./fire.fragment\";\r\nimport \"./fire.vertex\";\r\n\r\nclass FireMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public UV1 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public BonesPerMesh = 0;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FireMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"distortionTexture\")\r\n    private _distortionTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public distortionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public speed = 1.0;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n    private _lastTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FireMaterialDefines();\r\n        }\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines.ALPHATEST = this._opacityTexture ? true : false;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            defines.POINTSIZE = (this.pointsCloud || scene.forcePointsCloud);\r\n            defines.FOG = (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE && this.fogEnabled);\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fire\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                {\r\n                    attributes: attribs,\r\n                    uniformsNames: [\"world\", \"view\", \"viewProjection\", \"vEyePosition\",\r\n                        \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                        \"vDiffuseInfos\",\r\n                        \"mBones\",\r\n                        \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                        // Fire\r\n                        \"time\", \"speed\"\r\n                    ],\r\n                    uniformBuffersNames: [],\r\n                    samplers: [\"diffuseSampler\",\r\n                        // Fire\r\n                        \"distortionSampler\", \"opacitySampler\"\r\n                    ],\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: null,\r\n                    maxSimultaneousLights: 4,\r\n                    transformFeedbackVaryings: null\r\n                }, engine), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n\r\n                this._activeEffect.setTexture(\"distortionSampler\", this._distortionTexture);\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Time\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", this._lastTime);\r\n\r\n        // Speed\r\n        this._activeEffect.setFloat(\"speed\", this.speed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n        if (this._distortionTexture && this._distortionTexture.animations && this._distortionTexture.animations.length > 0) {\r\n            results.push(this._distortionTexture);\r\n        }\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            activeTextures.push(this._distortionTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._distortionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FireMaterial\";\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n        if (this._distortionTexture) {\r\n            this._distortionTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FireMaterial {\r\n        return SerializationHelper.Clone<FireMaterial>(() => new FireMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n\r\n        var serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FireMaterial\";\r\n        serializationObject.diffuseColor = this.diffuseColor.asArray();\r\n        serializationObject.speed = this.speed;\r\n\r\n        if (this._diffuseTexture) {\r\n            serializationObject._diffuseTexture = this._diffuseTexture.serialize();\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            serializationObject._distortionTexture = this._distortionTexture.serialize();\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            serializationObject._opacityTexture = this._opacityTexture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FireMaterial {\r\n        var material = new FireMaterial(source.name, scene);\r\n\r\n        material.diffuseColor = Color3.FromArray(source.diffuseColor);\r\n        material.speed = source.speed;\r\n\r\n        material.alpha = source.alpha;\r\n\r\n        material.id = source.id;\r\n\r\n        Tags.AddTagsTo(material, source.tags);\r\n        material.backFaceCulling = source.backFaceCulling;\r\n        material.wireframe = source.wireframe;\r\n\r\n        if (source._diffuseTexture) {\r\n            material._diffuseTexture = Texture.Parse(source._diffuseTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._distortionTexture) {\r\n            material._distortionTexture = Texture.Parse(source._distortionTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._opacityTexture) {\r\n            material._opacityTexture = Texture.Parse(source._opacityTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source.checkReadyOnlyOnce) {\r\n            material.checkReadyOnlyOnce = source.checkReadyOnlyOnce;\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'firePixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\nuniform sampler2D distortionSampler;\nuniform sampler2D opacitySampler;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvec4 bx2(vec4 x)\n{\nreturn vec4(2.0)*x-vec4(1.0);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\n\nfloat alpha=1.0;\n#ifdef DIFFUSE\n\nconst float distortionAmount0=0.092;\nconst float distortionAmount1=0.092;\nconst float distortionAmount2=0.092;\nvec2 heightAttenuation=vec2(0.3,0.39);\nvec4 noise0=texture2D(distortionSampler,vDistortionCoords1);\nvec4 noise1=texture2D(distortionSampler,vDistortionCoords2);\nvec4 noise2=texture2D(distortionSampler,vDistortionCoords3);\nvec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;\nvec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);\nvec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\n#ifdef ALPHATEST\nif (opacityColor.r<0.1)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;\nbaseColor*=opacityColor;\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=vec4(baseColor.rgb,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'fireVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n\nuniform float time;\nuniform float speed;\n#ifdef DIFFUSE\nvarying vec2 vDistortionCoords1;\nvarying vec2 vDistortionCoords2;\nvarying vec2 vDistortionCoords3;\n#endif\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n\n#ifdef DIFFUSE\nvDiffuseUV=uv;\nvDiffuseUV.y-=0.2;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n#ifdef DIFFUSE\n\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;\nvDistortionCoords1.x=uv.x;\nvDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;\nvDistortionCoords2.x=uv.x;\nvDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;\nvDistortionCoords3.x=uv.x;\nvDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./furMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, serializeAsVector3, Vector3, DynamicTexture, AbstractMesh, Scene, Nullable, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper, Texture, Tags } from \"babylonjs\";\r\n\r\nimport \"./fur.fragment\";\r\nimport \"./fur.vertex\";\r\n\r\nclass FurMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public HEIGHTMAP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public HIGHLEVEL = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FurMaterial extends PushMaterial {\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"heightTexture\")\r\n    private _heightTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public heightTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public furLength: number = 1;\r\n\r\n    @serialize()\r\n    public furAngle: number = 0;\r\n\r\n    @serializeAsColor3()\r\n    public furColor = new Color3(0.44, 0.21, 0.02);\r\n\r\n    @serialize()\r\n    public furOffset: number = 0.0;\r\n\r\n    @serialize()\r\n    public furSpacing: number = 12;\r\n\r\n    @serializeAsVector3()\r\n    public furGravity = new Vector3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public furSpeed: number = 100;\r\n\r\n    @serialize()\r\n    public furDensity: number = 20;\r\n\r\n    @serialize()\r\n    public furOcclusion: number = 0.0;\r\n\r\n    public furTexture: DynamicTexture;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize()\r\n    public highLevelFur: boolean = true;\r\n\r\n    public _meshes: AbstractMesh[];\r\n\r\n    private _renderId: number;\r\n\r\n    private _furTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    @serialize()\r\n    public get furTime() {\r\n        return this._furTime;\r\n    }\r\n\r\n    public set furTime(furTime: number) {\r\n        this._furTime = furTime;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public updateFur(): void {\r\n        for (var i = 1; i < this._meshes.length; i++) {\r\n            var offsetFur = <FurMaterial>this._meshes[i].material;\r\n\r\n            offsetFur.furLength = this.furLength;\r\n            offsetFur.furAngle = this.furAngle;\r\n            offsetFur.furGravity = this.furGravity;\r\n            offsetFur.furSpacing = this.furSpacing;\r\n            offsetFur.furSpeed = this.furSpeed;\r\n            offsetFur.furColor = this.furColor;\r\n            offsetFur.diffuseTexture = this.diffuseTexture;\r\n            offsetFur.furTexture = this.furTexture;\r\n            offsetFur.highLevelFur = this.highLevelFur;\r\n            offsetFur.furTime = this.furTime;\r\n            offsetFur.furDensity = this.furDensity;\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FurMaterialDefines();\r\n        }\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this.diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this.heightTexture && engine.getCaps().maxVertexTextureImageUnits) {\r\n                    if (!this.heightTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.HEIGHTMAP = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        if (this.highLevelFur !== defines.HIGHLEVEL) {\r\n            defines.HIGHLEVEL = true;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fur\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                \"furLength\", \"furAngle\", \"furColor\", \"furOffset\", \"furGravity\", \"furTime\", \"furSpacing\", \"furDensity\", \"furOcclusion\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\",\r\n                \"heightTexture\", \"furTexture\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            if (this._heightTexture) {\r\n                this._activeEffect.setTexture(\"heightTexture\", this._heightTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"furLength\", this.furLength);\r\n        this._activeEffect.setFloat(\"furAngle\", this.furAngle);\r\n        this._activeEffect.setColor4(\"furColor\", this.furColor, 1.0);\r\n\r\n        if (this.highLevelFur) {\r\n            this._activeEffect.setVector3(\"furGravity\", this.furGravity);\r\n            this._activeEffect.setFloat(\"furOffset\", this.furOffset);\r\n            this._activeEffect.setFloat(\"furSpacing\", this.furSpacing);\r\n            this._activeEffect.setFloat(\"furDensity\", this.furDensity);\r\n            this._activeEffect.setFloat(\"furOcclusion\", this.furOcclusion);\r\n\r\n            this._furTime += this.getScene().getEngine().getDeltaTime() / this.furSpeed;\r\n            this._activeEffect.setFloat(\"furTime\", this._furTime);\r\n\r\n            this._activeEffect.setTexture(\"furTexture\", this.furTexture);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        if (this.heightTexture && this.heightTexture.animations && this.heightTexture.animations.length > 0) {\r\n            results.push(this.heightTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._heightTexture) {\r\n            activeTextures.push(this._heightTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._heightTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        if (this._meshes) {\r\n            for (var i = 1; i < this._meshes.length; i++) {\r\n                let mat = this._meshes[i].material;\r\n\r\n                if (mat) {\r\n                    mat.dispose(forceDisposeEffect);\r\n                }\r\n                this._meshes[i].dispose();\r\n            }\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FurMaterial {\r\n        return SerializationHelper.Clone(() => new FurMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.FurMaterial\";\r\n\r\n        if (this._meshes) {\r\n            serializationObject.sourceMeshName = this._meshes[0].name;\r\n            serializationObject.quality = this._meshes.length;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FurMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FurMaterial {\r\n        var material = SerializationHelper.Parse(() => new FurMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.sourceMeshName && material.highLevelFur) {\r\n            scene.executeWhenReady(() => {\r\n                var sourceMesh = <Mesh>scene.getMeshByName(source.sourceMeshName);\r\n                if (sourceMesh) {\r\n                    var furTexture = FurMaterial.GenerateTexture(\"Fur Texture\", scene);\r\n                    material.furTexture = furTexture;\r\n                    FurMaterial.FurifyMesh(sourceMesh, source.quality);\r\n                }\r\n            });\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    public static GenerateTexture(name: string, scene: Scene): DynamicTexture {\r\n        // Generate fur textures\r\n        var texture = new DynamicTexture(\"FurTexture \" + name, 256, scene, true);\r\n        var context = texture.getContext();\r\n\r\n        for (var i = 0; i < 20000; ++i) {\r\n            context.fillStyle = \"rgba(255, \" + Math.floor(Math.random() * 255) + \", \" + Math.floor(Math.random() * 255) + \", 1)\";\r\n            context.fillRect((Math.random() * texture.getSize().width), (Math.random() * texture.getSize().height), 2, 2);\r\n        }\r\n\r\n        texture.update(false);\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        return texture;\r\n    }\r\n\r\n    // Creates and returns an array of meshes used as shells for the Fur Material\r\n    // that can be disposed later in your code\r\n    // The quality is in interval [0, 100]\r\n    public static FurifyMesh(sourceMesh: Mesh, quality: number): Mesh[] {\r\n        var meshes = [sourceMesh];\r\n        var mat: FurMaterial = <FurMaterial>sourceMesh.material;\r\n        var i;\r\n\r\n        if (!(mat instanceof FurMaterial)) {\r\n            throw \"The material of the source mesh must be a Fur Material\";\r\n        }\r\n\r\n        for (i = 1; i < quality; i++) {\r\n            var offsetFur = new FurMaterial(mat.name + i, sourceMesh.getScene());\r\n            sourceMesh.getScene().materials.pop();\r\n            Tags.EnableFor(offsetFur);\r\n            Tags.AddTagsTo(offsetFur, \"furShellMaterial\");\r\n\r\n            offsetFur.furLength = mat.furLength;\r\n            offsetFur.furAngle = mat.furAngle;\r\n            offsetFur.furGravity = mat.furGravity;\r\n            offsetFur.furSpacing = mat.furSpacing;\r\n            offsetFur.furSpeed = mat.furSpeed;\r\n            offsetFur.furColor = mat.furColor;\r\n            offsetFur.diffuseTexture = mat.diffuseTexture;\r\n            offsetFur.furOffset = i / quality;\r\n            offsetFur.furTexture = mat.furTexture;\r\n            offsetFur.highLevelFur = mat.highLevelFur;\r\n            offsetFur.furTime = mat.furTime;\r\n            offsetFur.furDensity = mat.furDensity;\r\n\r\n            var offsetMesh = sourceMesh.clone(sourceMesh.name + i);\r\n\r\n            offsetMesh.material = offsetFur;\r\n            offsetMesh.skeleton = sourceMesh.skeleton;\r\n            offsetMesh.position = Vector3.Zero();\r\n            meshes.push(offsetMesh);\r\n        }\r\n\r\n        for (i = 1; i < meshes.length; i++) {\r\n            meshes[i].parent = sourceMesh;\r\n        }\r\n\r\n        (<FurMaterial>sourceMesh.material)._meshes = meshes;\r\n\r\n        return meshes;\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'furPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nuniform vec4 furColor;\nuniform float furLength;\nvarying vec3 vPositionW;\nvarying float vfur_length;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform float furOcclusion;\nuniform sampler2D furTexture;\nvarying vec2 vFurUV;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<fogFragmentDeclaration>\n#include<clipPlaneFragmentDeclaration>\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=furColor;\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor*=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef HIGHLEVEL\n\nvec4 furTextureColor=texture2D(furTexture,vec2(vFurUV.x,vFurUV.y));\nif (furTextureColor.a<=0.0 || furTextureColor.g<furOffset) {\ndiscard;\n}\nfloat occlusion=mix(0.0,furTextureColor.b*1.2,furOffset);\nbaseColor=vec4(baseColor.xyz*max(occlusion,furOcclusion),1.1-furOffset);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase.rgb*baseColor.rgb,0.0,1.0);\n\n#ifdef HIGHLEVEL\nvec4 color=vec4(finalDiffuse,alpha);\n#else\nfloat r=vfur_length/furLength*0.5;\nvec4 color=vec4(finalDiffuse*(0.5+r),alpha);\n#endif\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'furVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\nuniform float furLength;\nuniform float furAngle;\n#ifdef HIGHLEVEL\nuniform float furOffset;\nuniform vec3 furGravity;\nuniform float furTime;\nuniform float furSpacing;\nuniform float furDensity;\n#endif\n#ifdef HEIGHTMAP\nuniform sampler2D heightTexture;\n#endif\n#ifdef HIGHLEVEL\nvarying vec2 vFurUV;\n#endif\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\nvarying float vfur_length;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nfloat Rand(vec3 rv) {\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\nreturn fract(sin(x)*43758.5453);\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n\nfloat r=Rand(position);\n#ifdef HEIGHTMAP\n#if __VERSION__>100\nvfur_length=furLength*texture(heightTexture,uv).x;\n#else\nvfur_length=furLength*texture2D(heightTexture,uv).r;\n#endif\n#else\nvfur_length=(furLength*r);\n#endif\nvec3 tangent1=vec3(normal.y,-normal.x,0);\nvec3 tangent2=vec3(-normal.z,0,normal.x);\nr=Rand(tangent1*r);\nfloat J=(2.0+4.0*r);\nr=Rand(tangent2*r);\nfloat K=(2.0+2.0*r);\ntangent1=tangent1*J+tangent2*K;\ntangent1=normalize(tangent1);\nvec3 newPosition=position+normal*vfur_length*cos(furAngle)+tangent1*vfur_length*sin(furAngle);\n#ifdef HIGHLEVEL\n\nvec3 forceDirection=vec3(0.0,0.0,0.0);\nforceDirection.x=sin(furTime+position.x*0.05)*0.2;\nforceDirection.y=cos(furTime*0.7+position.y*0.04)*0.2;\nforceDirection.z=sin(furTime*0.7+position.z*0.04)*0.2;\nvec3 displacement=vec3(0.0,0.0,0.0);\ndisplacement=furGravity+forceDirection;\nfloat displacementFactor=pow(furOffset,3.0);\nvec3 aNormal=normal;\naNormal.xyz+=displacement*displacementFactor;\nnewPosition=vec3(newPosition.x,newPosition.y,newPosition.z)+(normalize(aNormal)*furOffset*furSpacing);\n#endif\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\ngl_Position=viewProjection*finalWorld*vec4(newPosition,1.0);\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#ifdef HIGHLEVEL\nvFurUV=vDiffuseUV*furDensity;\n#endif\n#else\n#ifdef HIGHLEVEL\nvFurUV=uv*furDensity;\n#endif\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./gradientMaterial\";","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./gradient.fragment\";\r\nimport \"./gradient.vertex\";\r\n\r\nclass GradientMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class GradientMaterial extends PushMaterial {\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    // The gradient top color, red by default\r\n    @serializeAsColor3()\r\n    public topColor = new Color3(1, 0, 0);\r\n\r\n    @serialize()\r\n    public topColorAlpha = 1.0;\r\n\r\n    // The gradient top color, blue by default\r\n    @serializeAsColor3()\r\n    public bottomColor = new Color3(0, 0, 1);\r\n\r\n    @serialize()\r\n    public bottomColorAlpha = 1.0;\r\n\r\n    // Gradient offset\r\n    @serialize()\r\n    public offset = 0;\r\n\r\n    @serialize()\r\n    public scale = 1.0;\r\n\r\n    @serialize()\r\n    public smoothness = 1.0;\r\n\r\n    @serialize()\r\n    public disableLighting = false;\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0 || this.topColorAlpha < 1.0 || this.bottomColorAlpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GradientMaterialDefines();\r\n        }\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"gradient\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                \"topColor\", \"bottomColor\", \"offset\", \"smoothness\", \"scale\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setColor4(\"topColor\", this.topColor, this.topColorAlpha);\r\n        this._activeEffect.setColor4(\"bottomColor\", this.bottomColor, this.bottomColorAlpha);\r\n        this._activeEffect.setFloat(\"offset\", this.offset);\r\n        this._activeEffect.setFloat(\"scale\", this.scale);\r\n        this._activeEffect.setFloat(\"smoothness\", this.smoothness);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GradientMaterial {\r\n        return SerializationHelper.Clone(() => new GradientMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GradientMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GradientMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial {\r\n        return SerializationHelper.Parse(() => new GradientMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'gradientPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nuniform vec4 topColor;\nuniform vec4 bottomColor;\nuniform float offset;\nuniform float scale;\nuniform float smoothness;\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\nfloat h=vPosition.y*scale+offset;\nfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\nvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\n\nvec3 diffuseColor=baseColor.rgb;\n\nfloat alpha=baseColor.a;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'gradientVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\nvarying vec3 vPosition;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\nvPosition=position;\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./gridMaterial\";","import { MaterialDefines, serializeAsColor3, Color3, serialize, Vector3, Vector4, Scene, AbstractMesh, SubMesh, MaterialHelper, VertexBuffer, Matrix, Mesh, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./grid.fragment\";\r\nimport \"./grid.vertex\";\r\n\r\nclass GridMaterialDefines extends MaterialDefines {\r\n    public TRANSPARENT = false;\r\n    public FOG = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * The grid materials allows you to wrap any shape with a grid.\r\n * Colors are customizable.\r\n */\r\nexport class GridMaterial extends BABYLON.PushMaterial {\r\n\r\n    /**\r\n     * Main color of the grid (e.g. between lines)\r\n     */\r\n    @serializeAsColor3()\r\n    public mainColor = Color3.Black();\r\n\r\n    /**\r\n     * Color of the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public lineColor = Color3.Teal();\r\n\r\n    /**\r\n     * The scale of the grid compared to unit.\r\n     */\r\n    @serialize()\r\n    public gridRatio = 1.0;\r\n\r\n    /**\r\n     * Allows setting an offset for the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public gridOffset = Vector3.Zero();\r\n\r\n    /**\r\n     * The frequency of thicker lines.\r\n     */\r\n    @serialize()\r\n    public majorUnitFrequency = 10;\r\n\r\n    /**\r\n     * The visibility of minor units in the grid.\r\n     */\r\n    @serialize()\r\n    public minorUnitVisibility = 0.33;\r\n\r\n    /**\r\n     * The grid opacity outside of the lines.\r\n     */\r\n    @serialize()\r\n    public opacity = 1.0;\r\n\r\n    /**\r\n     * Determine RBG output is premultiplied by alpha value.\r\n     */\r\n    @serialize()\r\n    public preMultiplyAlpha = false;\r\n\r\n    private _gridControl: Vector4 = new Vector4(this.gridRatio, this.majorUnitFrequency, this.minorUnitVisibility, this.opacity);\r\n\r\n    private _renderId: number;\r\n\r\n    /**\r\n     * constructor\r\n     * @param name The name given to the material in order to identify it afterwards.\r\n     * @param scene The scene the material is used in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Returns wehter or not the grid requires alpha blending.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.opacity < 1.0;\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending();\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GridMaterialDefines();\r\n        }\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines.TRANSPARENT !== (this.opacity < 1.0)) {\r\n            defines.TRANSPARENT = !defines.TRANSPARENT;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        if (defines.PREMULTIPLYALPHA != this.preMultiplyAlpha) {\r\n            defines.PREMULTIPLYALPHA = !defines.PREMULTIPLYALPHA;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, false, this.fogEnabled, false, defines);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Attributes\r\n            var attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n\r\n            // Defines\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(\"grid\",\r\n                attribs,\r\n                [\"projection\", \"worldView\", \"mainColor\", \"lineColor\", \"gridControl\", \"gridOffset\", \"vFogInfos\", \"vFogColor\", \"world\", \"view\"],\r\n                [],\r\n                join,\r\n                undefined,\r\n                this.onCompiled,\r\n                this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"worldView\", world.multiply(scene.getViewMatrix()));\r\n        this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        this._activeEffect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n\r\n        // Uniforms\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor3(\"mainColor\", this.mainColor);\r\n            this._activeEffect.setColor3(\"lineColor\", this.lineColor);\r\n\r\n            this._activeEffect.setVector3(\"gridOffset\", this.gridOffset);\r\n\r\n            this._gridControl.x = this.gridRatio;\r\n            this._gridControl.y = Math.round(this.majorUnitFrequency);\r\n            this._gridControl.z = this.minorUnitVisibility;\r\n            this._gridControl.w = this.opacity;\r\n            this._activeEffect.setVector4(\"gridControl\", this._gridControl);\r\n        }\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and its associated resources.\r\n     * @param forceDisposeEffect will also dispose the used effect when true\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GridMaterial {\r\n        return SerializationHelper.Clone(() => new GridMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GridMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GridMaterial\";\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GridMaterial {\r\n        return SerializationHelper.Parse(() => new GridMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'gridPixelShader';\nlet shader = `#extension GL_OES_standard_derivatives : enable\n#define SQRT2 1.41421356\n#define PI 3.14159\nprecision highp float;\nuniform vec3 mainColor;\nuniform vec3 lineColor;\nuniform vec4 gridControl;\nuniform vec3 gridOffset;\n\n#ifdef TRANSPARENT\nvarying vec4 vCameraSpacePosition;\n#endif\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogFragmentDeclaration>\nfloat getVisibility(float position) {\n\nfloat majorGridFrequency=gridControl.y;\nif (floor(position+0.5) == floor(position/majorGridFrequency+0.5)*majorGridFrequency)\n{\nreturn 1.0;\n}\nreturn gridControl.z;\n}\nfloat getAnisotropicAttenuation(float differentialLength) {\nconst float maxNumberOfLines=10.0;\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\n}\nfloat isPointOnLine(float position,float differentialLength) {\nfloat fractionPartOfPosition=position-floor(position+0.5);\nfractionPartOfPosition/=differentialLength;\nfractionPartOfPosition=clamp(fractionPartOfPosition,-1.,1.);\nfloat result=0.5+0.5*cos(fractionPartOfPosition*PI);\nreturn result;\n}\nfloat contributionOnAxis(float position) {\nfloat differentialLength=length(vec2(dFdx(position),dFdy(position)));\ndifferentialLength*=SQRT2;\n\nfloat result=isPointOnLine(position,differentialLength);\n\nfloat visibility=getVisibility(position);\nresult*=visibility;\n\nfloat anisotropicAttenuation=getAnisotropicAttenuation(differentialLength);\nresult*=anisotropicAttenuation;\nreturn result;\n}\nfloat normalImpactOnAxis(float x) {\nfloat normalImpact=clamp(1.0-3.0*abs(x*x*x),0.0,1.0);\nreturn normalImpact;\n}\nvoid main(void) {\n\nfloat gridRatio=gridControl.x;\nvec3 gridPos=(vPosition+gridOffset)/gridRatio;\n\nfloat x=contributionOnAxis(gridPos.x);\nfloat y=contributionOnAxis(gridPos.y);\nfloat z=contributionOnAxis(gridPos.z);\n\nvec3 normal=normalize(vNormal);\nx*=normalImpactOnAxis(normal.x);\ny*=normalImpactOnAxis(normal.y);\nz*=normalImpactOnAxis(normal.z);\n\nfloat grid=clamp(x+y+z,0.,1.);\n\nvec3 color=mix(mainColor,lineColor,grid);\n#ifdef FOG\n#include<fogFragment>\n#endif\n#ifdef TRANSPARENT\nfloat distanceToFragment=length(vCameraSpacePosition.xyz);\nfloat cameraPassThrough=clamp(distanceToFragment-0.25,0.0,1.0);\nfloat opacity=clamp(grid,0.08,cameraPassThrough*gridControl.w*grid);\ngl_FragColor=vec4(color.rgb,opacity);\n#ifdef PREMULTIPLYALPHA\ngl_FragColor.rgb*=opacity;\n#endif\n#else\n\ngl_FragColor=vec4(color.rgb,1.0);\n#endif\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'gridVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\nattribute vec3 normal;\n\nuniform mat4 projection;\nuniform mat4 world;\nuniform mat4 view;\nuniform mat4 worldView;\n\n#ifdef TRANSPARENT\nvarying vec4 vCameraSpacePosition;\n#endif\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n#include<fogVertexDeclaration>\nvoid main(void) {\n#ifdef FOG\nvec4 worldPos=world*vec4(position,1.0);\n#endif\n#include<fogVertex>\nvec4 cameraSpacePosition=worldView*vec4(position,1.0);\ngl_Position=projection*cameraSpacePosition;\n#ifdef TRANSPARENT\nvCameraSpacePosition=cameraSpacePosition;\n#endif\nvPosition=position;\nvNormal=normal;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./lavaMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\n\nimport \"./lava.fragment\";\nimport \"./lava.vertex\";\n\nclass LavaMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public UNLIT = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class LavaMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n\n    @serializeAsTexture()\n    public noiseTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public fogColor: Color3;\n\n    @serialize()\n    public speed: number = 1;\n\n    @serialize()\n    public movingSpeed: number = 1;\n\n    @serialize()\n    public lowFrequencySpeed: number = 1;\n\n    @serialize()\n    public fogDensity: number = 0.15;\n\n    private _lastTime: number = 0;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"unlit\")\n    private _unlit = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public unlit: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    private _scaledDiffuse = new Color3();\n    private _renderId: number;\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    // Methods\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (this._wasPreviouslyReady && subMesh.effect) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new LavaMaterialDefines();\n        }\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        // Lights\n        defines._needNormals = true;\n\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"lava\";\n            var join = defines.toString();\n\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\n                \"time\", \"speed\", \"movingSpeed\",\n                \"fogColor\", \"fogDensity\", \"lowFrequencySpeed\"\n            ];\n\n            var samplers = [\"diffuseSampler\",\n                \"noiseTexture\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <EffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\n                }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        this._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        defines.UNLIT = this._unlit;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n\n            if (this.noiseTexture) {\n                this._activeEffect.setTexture(\"noiseTexture\", this.noiseTexture);\n            }\n\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        this._lastTime += scene.getEngine().getDeltaTime();\n        this._activeEffect.setFloat(\"time\", this._lastTime * this.speed / 1000);\n\n        if (!this.fogColor) {\n            this.fogColor = Color3.Black();\n        }\n        this._activeEffect.setColor3(\"fogColor\", this.fogColor);\n        this._activeEffect.setFloat(\"fogDensity\", this.fogDensity);\n\n        this._activeEffect.setFloat(\"lowFrequencySpeed\", this.lowFrequencySpeed);\n        this._activeEffect.setFloat(\"movingSpeed\", this.movingSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n\n        if (this.noiseTexture && this.noiseTexture.animations && this.noiseTexture.animations.length > 0) {\n            results.push(this.noiseTexture);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        if (this.noiseTexture) {\n            this.noiseTexture.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): LavaMaterial {\n        return SerializationHelper.Clone(() => new LavaMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.LavaMaterial\";\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"LavaMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): LavaMaterial {\n        return SerializationHelper.Parse(() => new LavaMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n","import { Effect } from \"babylonjs\";\n\nlet name = 'lavaPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n\nuniform float time;\nuniform float speed;\nuniform float movingSpeed;\nuniform vec3 fogColor;\nuniform sampler2D noiseTexture;\nuniform float fogDensity;\n\nvarying float noise;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nfloat random( vec3 scale,float seed ){\nreturn fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;\n}\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\n\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );\nvec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time*0.02;\nvec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;\nT1.x+=noiseTex.x*2.0;\nT1.y+=noiseTex.y*2.0;\nT2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;\nT2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;\nfloat p=texture2D( noiseTexture,T1*3.0 ).a;\nvec4 lavaColor=texture2D( diffuseSampler,T2*4.0);\nvec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );\nbaseColor=temp;\nfloat depth=gl_FragCoord.z*4.0;\nconst float LOG2=1.442695;\nfloat fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );\nfogFactor=1.0-clamp( fogFactor,0.0,1.0 );\nbaseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );\ndiffuseColor=baseColor.rgb;\n\n\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef UNLIT\nvec3 diffuseBase=vec3(1.,1.,1.);\n#else\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'lavaVertexShader';\nlet shader = `precision highp float;\n\nuniform float time;\nuniform float lowFrequencySpeed;\n\nvarying float noise;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n\n\nvec3 mod289(vec3 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 mod289(vec4 x)\n{\nreturn x-floor(x*(1.0/289.0))*289.0;\n}\nvec4 permute(vec4 x)\n{\nreturn mod289(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\nreturn 1.79284291400159-0.85373472095314*r;\n}\nvec3 fade(vec3 t) {\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise(vec3 P,vec3 rep)\n{\nvec3 Pi0=mod(floor(P),rep);\nvec3 Pi1=mod(Pi0+vec3(1.0),rep);\nPi0=mod289(Pi0);\nPi1=mod289(Pi1);\nvec3 Pf0=fract(P);\nvec3 Pf1=Pf0-vec3(1.0);\nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);\nvec4 iy=vec4(Pi0.yy,Pi1.yy);\nvec4 iz0=Pi0.zzzz;\nvec4 iz1=Pi1.zzzz;\nvec4 ixy=permute(permute(ix)+iy);\nvec4 ixy0=permute(ixy+iz0);\nvec4 ixy1=permute(ixy+iz1);\nvec4 gx0=ixy0*(1.0/7.0);\nvec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;\ngx0=fract(gx0);\nvec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);\nvec4 sz0=step(gz0,vec4(0.0));\ngx0-=sz0*(step(0.0,gx0)-0.5);\ngy0-=sz0*(step(0.0,gy0)-0.5);\nvec4 gx1=ixy1*(1.0/7.0);\nvec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;\ngx1=fract(gx1);\nvec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);\nvec4 sz1=step(gz1,vec4(0.0));\ngx1-=sz1*(step(0.0,gx1)-0.5);\ngy1-=sz1*(step(0.0,gy1)-0.5);\nvec3 g000=vec3(gx0.x,gy0.x,gz0.x);\nvec3 g100=vec3(gx0.y,gy0.y,gz0.y);\nvec3 g010=vec3(gx0.z,gy0.z,gz0.z);\nvec3 g110=vec3(gx0.w,gy0.w,gz0.w);\nvec3 g001=vec3(gx1.x,gy1.x,gz1.x);\nvec3 g101=vec3(gx1.y,gy1.y,gz1.y);\nvec3 g011=vec3(gx1.z,gy1.z,gz1.z);\nvec3 g111=vec3(gx1.w,gy1.w,gz1.w);\nvec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));\ng000*=norm0.x;\ng010*=norm0.y;\ng100*=norm0.z;\ng110*=norm0.w;\nvec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));\ng001*=norm1.x;\ng011*=norm1.y;\ng101*=norm1.z;\ng111*=norm1.w;\nfloat n000=dot(g000,Pf0);\nfloat n100=dot(g100,vec3(Pf1.x,Pf0.yz));\nfloat n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));\nfloat n110=dot(g110,vec3(Pf1.xy,Pf0.z));\nfloat n001=dot(g001,vec3(Pf0.xy,Pf1.z));\nfloat n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));\nfloat n011=dot(g011,vec3(Pf0.x,Pf1.yz));\nfloat n111=dot(g111,Pf1);\nvec3 fade_xyz=fade(Pf0);\nvec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);\nvec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);\nfloat n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);\nreturn 2.2*n_xyz;\n}\n\nfloat turbulence( vec3 p ) {\nfloat w=100.0;\nfloat t=-.5;\nfor (float f=1.0 ; f<=10.0 ; f++ ){\nfloat power=pow( 2.0,f );\nt+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );\n}\nreturn t;\n}\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\n#ifdef NORMAL\n\nnoise=10.0*-.10*turbulence( .5*normal+time*1.15 );\n\nfloat b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );\n\nfloat displacement =-1.5*noise+b;\n\nvec3 newPosition=position+normal*displacement;\ngl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\nvPositionW=vec3(worldPos);\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./mixMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, Texture, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./mix.fragment\";\r\nimport \"./mix.vertex\";\r\n\r\nclass MixMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public MIXMAP2 = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MixMaterial extends PushMaterial {\r\n    /**\r\n     * Mix textures\r\n     */\r\n\r\n    @serializeAsTexture(\"mixTexture1\")\r\n    private _mixTexture1: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture1: BaseTexture;\r\n\r\n    @serializeAsTexture(\"mixTexture2\")\r\n    private _mixTexture2: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture2: BaseTexture;\r\n\r\n    /**\r\n     * Diffuse textures\r\n     */\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture4: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture4: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture5: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture5: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture6: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture6: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture7: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture7: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture8: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture8: Texture;\r\n\r\n    /**\r\n     * Uniforms\r\n     */\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new MixMaterialDefines();\r\n        }\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (StandardMaterial.DiffuseTextureEnabled) {\r\n                if (this._mixTexture1) {\r\n                    if (!this._mixTexture1.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this._mixTexture2) {\r\n                    if (!this._mixTexture2.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines.MIXMAP2 = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"mix\";\r\n            var join = defines.toString();\r\n            var uniforms = [\r\n                \"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\", \"diffuse4Infos\",\r\n                \"diffuse5Infos\", \"diffuse6Infos\", \"diffuse7Infos\", \"diffuse8Infos\"\r\n            ];\r\n            var samplers = [\r\n                \"mixMap1Sampler\", \"mixMap2Sampler\",\r\n                \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\", \"diffuse4Sampler\",\r\n                \"diffuse5Sampler\", \"diffuse6Sampler\", \"diffuse7Sampler\", \"diffuse8Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._mixTexture1) {\r\n                this._activeEffect.setTexture(\"mixMap1Sampler\", this._mixTexture1);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture1.getTextureMatrix());\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                    if (this._diffuseTexture4) {\r\n                        this._activeEffect.setTexture(\"diffuse4Sampler\", this._diffuseTexture4);\r\n                        this._activeEffect.setFloat2(\"diffuse4Infos\", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._mixTexture2) {\r\n                this._activeEffect.setTexture(\"mixMap2Sampler\", this._mixTexture2);\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture5) {\r\n                        this._activeEffect.setTexture(\"diffuse5Sampler\", this._diffuseTexture5);\r\n                        this._activeEffect.setFloat2(\"diffuse5Infos\", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);\r\n                    }\r\n                    if (this._diffuseTexture6) {\r\n                        this._activeEffect.setTexture(\"diffuse6Sampler\", this._diffuseTexture6);\r\n                        this._activeEffect.setFloat2(\"diffuse6Infos\", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);\r\n                    }\r\n                    if (this._diffuseTexture7) {\r\n                        this._activeEffect.setTexture(\"diffuse7Sampler\", this._diffuseTexture7);\r\n                        this._activeEffect.setFloat2(\"diffuse7Infos\", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);\r\n                    }\r\n                    if (this._diffuseTexture8) {\r\n                        this._activeEffect.setTexture(\"diffuse8Sampler\", this._diffuseTexture8);\r\n                        this._activeEffect.setFloat2(\"diffuse8Infos\", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {\r\n            results.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {\r\n            results.push(this._mixTexture2);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1) {\r\n            activeTextures.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._diffuseTexture4) {\r\n            activeTextures.push(this._diffuseTexture4);\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2) {\r\n            activeTextures.push(this._mixTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture5) {\r\n            activeTextures.push(this._diffuseTexture5);\r\n        }\r\n\r\n        if (this._diffuseTexture6) {\r\n            activeTextures.push(this._diffuseTexture6);\r\n        }\r\n\r\n        if (this._diffuseTexture7) {\r\n            activeTextures.push(this._diffuseTexture7);\r\n        }\r\n\r\n        if (this._diffuseTexture8) {\r\n            activeTextures.push(this._diffuseTexture8);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture4 === texture) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture5 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture6 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture7 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture8 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._mixTexture1) {\r\n            this._mixTexture1.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MixMaterial {\r\n        return SerializationHelper.Clone(() => new MixMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MixMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MixMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MixMaterial {\r\n        return SerializationHelper.Parse(() => new MixMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'mixPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D mixMap1Sampler;\nuniform vec2 vTextureInfos;\n#ifdef MIXMAP2\nuniform sampler2D mixMap2Sampler;\n#endif\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform sampler2D diffuse4Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\nuniform vec2 diffuse4Infos;\n#ifdef MIXMAP2\nuniform sampler2D diffuse5Sampler;\nuniform sampler2D diffuse6Sampler;\nuniform sampler2D diffuse7Sampler;\nuniform sampler2D diffuse8Sampler;\nuniform vec2 diffuse5Infos;\nuniform vec2 diffuse6Infos;\nuniform vec2 diffuse7Infos;\nuniform vec2 diffuse8Infos;\n#endif\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 finalMixColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef MIXMAP2\nvec4 mixColor2=vec4(1.,1.,1.,1.);\n#endif\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\n#include<depthPrePass>\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\nvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\ndiffuse1Color.rgb*=mixColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\ndiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\n#ifdef MIXMAP2\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\nmixColor.rgb*=vTextureInfos.y;\nvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\nvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\nvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\nvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\ndiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\ndiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\ndiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\nfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\n#endif\n#endif\n#ifdef VERTEXCOLOR\nfinalMixColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'mixVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./normalMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./normal.fragment\";\r\nimport \"./normal.vertex\";\r\n\r\nclass NormalMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class NormalMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new NormalMaterialDefines();\r\n        }\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"normal\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): NormalMaterial {\r\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"NormalMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\r\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'normalPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0]\n#include<__decl__lightFragment>[1]\n#include<__decl__lightFragment>[2]\n#include<__decl__lightFragment>[3]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef NORMAL\nbaseColor=mix(baseColor,vec4(vNormalW,1.0),0.5);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0]\n#include<lightFragment>[1]\n#include<lightFragment>[2]\n#include<lightFragment>[3]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'normalVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./shadowOnlyMaterial\";","import { MaterialDefines, PushMaterial, IShadowLight, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./shadowOnly.fragment\";\r\nimport \"./shadowOnly.vertex\";\r\n\r\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class ShadowOnlyMaterial extends PushMaterial {\r\n    private _renderId: number;\r\n    private _activeLight: IShadowLight;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public shadowColor = BABYLON.Color3.Black();\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public get activeLight(): IShadowLight {\r\n        return this._activeLight;\r\n    }\r\n\r\n    public set activeLight(light: IShadowLight) {\r\n        this._activeLight = light;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new ShadowOnlyMaterialDefines();\r\n        }\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Ensure that active light is the first shadow light\r\n        if (this._activeLight) {\r\n            for (var light of mesh._lightSources) {\r\n                if (light.shadowEnabled) {\r\n                    if (this._activeLight === light) {\r\n                        break; // We are good\r\n                    }\r\n\r\n                    var lightPosition = mesh._lightSources.indexOf(this._activeLight);\r\n\r\n                    if (lightPosition !== -1) {\r\n                        mesh._lightSources.splice(lightPosition, 1);\r\n                        mesh._lightSources.splice(0, 0, this._activeLight);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"shadowOnly\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\"\r\n            ];\r\n            var samplers = new Array<string>();\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 1\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 1 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\r\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public clone(name: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Clone<ShadowOnlyMaterial>(() => new ShadowOnlyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"ShadowOnlyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'shadowOnlyPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform float alpha;\nuniform vec3 shadowColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..1]\n\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'shadowOnlyVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./simpleMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./simple.fragment\";\r\nimport \"./simple.vertex\";\r\n\r\nclass SimpleMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SimpleMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SimpleMaterialDefines();\r\n        }\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"simple\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SimpleMaterial {\r\n        return SerializationHelper.Clone<SimpleMaterial>(() => new SimpleMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.SimpleMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SimpleMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SimpleMaterial {\r\n        return SerializationHelper.Parse(() => new SimpleMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'simplePixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'simpleVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./skyMaterial\";","import { MaterialDefines, PushMaterial, serialize, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./sky.fragment\";\r\nimport \"./sky.vertex\";\r\n\r\nclass SkyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SkyMaterial extends PushMaterial {\r\n    // Public members\r\n    @serialize()\r\n    public luminance: number = 1.0;\r\n\r\n    @serialize()\r\n    public turbidity: number = 10.0;\r\n\r\n    @serialize()\r\n    public rayleigh: number = 2.0;\r\n\r\n    @serialize()\r\n    public mieCoefficient: number = 0.005;\r\n\r\n    @serialize()\r\n    public mieDirectionalG: number = 0.8;\r\n\r\n    @serialize()\r\n    public distance: number = 500;\r\n\r\n    @serialize()\r\n    public inclination: number = 0.49;\r\n\r\n    @serialize()\r\n    public azimuth: number = 0.25;\r\n\r\n    @serializeAsVector3()\r\n    public sunPosition: Vector3 = new Vector3(0, 100, 0);\r\n\r\n    @serialize()\r\n    public useSunPosition: boolean = false;\r\n\r\n    // Private members\r\n    private _cameraPosition: Vector3 = Vector3.Zero();\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SkyMaterialDefines();\r\n        }\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, false, defines);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            var shaderName = \"sky\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                attribs,\r\n                [\"world\", \"viewProjection\", \"view\",\r\n                    \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\",\r\n                    \"luminance\", \"turbidity\", \"rayleigh\", \"mieCoefficient\", \"mieDirectionalG\", \"sunPosition\",\r\n                    \"cameraPosition\"\r\n                ],\r\n                [],\r\n                join, fallbacks, this.onCompiled, this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n\r\n            BABYLON.MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Sky\r\n        var camera = scene.activeCamera;\r\n        if (camera) {\r\n            var cameraWorldMatrix = camera.getWorldMatrix();\r\n            this._cameraPosition.x = cameraWorldMatrix.m[12];\r\n            this._cameraPosition.y = cameraWorldMatrix.m[13];\r\n            this._cameraPosition.z = cameraWorldMatrix.m[14];\r\n            this._activeEffect.setVector3(\"cameraPosition\", this._cameraPosition);\r\n        }\r\n\r\n        if (this.luminance > 0) {\r\n            this._activeEffect.setFloat(\"luminance\", this.luminance);\r\n        }\r\n\r\n        this._activeEffect.setFloat(\"turbidity\", this.turbidity);\r\n        this._activeEffect.setFloat(\"rayleigh\", this.rayleigh);\r\n        this._activeEffect.setFloat(\"mieCoefficient\", this.mieCoefficient);\r\n        this._activeEffect.setFloat(\"mieDirectionalG\", this.mieDirectionalG);\r\n\r\n        if (!this.useSunPosition) {\r\n            var theta = Math.PI * (this.inclination - 0.5);\r\n            var phi = 2 * Math.PI * (this.azimuth - 0.5);\r\n\r\n            this.sunPosition.x = this.distance * Math.cos(phi);\r\n            this.sunPosition.y = this.distance * Math.sin(phi) * Math.sin(theta);\r\n            this.sunPosition.z = this.distance * Math.sin(phi) * Math.cos(theta);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"sunPosition\", this.sunPosition);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SkyMaterial {\r\n        return SerializationHelper.Clone<SkyMaterial>(() => new SkyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType  = \"BABYLON.SkyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SkyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SkyMaterial {\r\n        return SerializationHelper.Parse(() => new SkyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'skyPixelShader';\nlet shader = `precision highp float;\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\nuniform vec3 cameraPosition;\nuniform float luminance;\nuniform float turbidity;\nuniform float rayleigh;\nuniform float mieCoefficient;\nuniform float mieDirectionalG;\nuniform vec3 sunPosition;\n\n#include<fogFragmentDeclaration>\n\nconst float e=2.71828182845904523536028747135266249775724709369995957;\nconst float pi=3.141592653589793238462643383279502884197169;\nconst float n=1.0003;\nconst float N=2.545E25;\nconst float pn=0.035;\nconst vec3 lambda=vec3(680E-9,550E-9,450E-9);\nconst vec3 K=vec3(0.686,0.678,0.666);\nconst float v=4.0;\nconst float rayleighZenithLength=8.4E3;\nconst float mieZenithLength=1.25E3;\nconst vec3 up=vec3(0.0,1.0,0.0);\nconst float EE=1000.0;\nconst float sunAngularDiameterCos=0.999956676946448443553574619906976478926848692873900859324;\nconst float cutoffAngle=pi/1.95;\nconst float steepness=1.5;\nvec3 totalRayleigh(vec3 lambda)\n{\nreturn (8.0*pow(pi,3.0)*pow(pow(n,2.0)-1.0,2.0)*(6.0+3.0*pn))/(3.0*N*pow(lambda,vec3(4.0))*(6.0-7.0*pn));\n}\nvec3 simplifiedRayleigh()\n{\nreturn 0.0005/vec3(94,40,18);\n}\nfloat rayleighPhase(float cosTheta)\n{\nreturn (3.0/(16.0*pi))*(1.0+pow(cosTheta,2.0));\n}\nvec3 totalMie(vec3 lambda,vec3 K,float T)\n{\nfloat c=(0.2*T )*10E-18;\nreturn 0.434*c*pi*pow((2.0*pi)/lambda,vec3(v-2.0))*K;\n}\nfloat hgPhase(float cosTheta,float g)\n{\nreturn (1.0/(4.0*pi))*((1.0-pow(g,2.0))/pow(1.0-2.0*g*cosTheta+pow(g,2.0),1.5));\n}\nfloat sunIntensity(float zenithAngleCos)\n{\nreturn EE*max(0.0,1.0-exp((-(cutoffAngle-acos(zenithAngleCos))/steepness)));\n}\nfloat A=0.15;\nfloat B=0.50;\nfloat C=0.10;\nfloat D=0.20;\nfloat EEE=0.02;\nfloat F=0.30;\nfloat W=1000.0;\nvec3 Uncharted2Tonemap(vec3 x)\n{\nreturn ((x*(A*x+C*B)+D*EEE)/(x*(A*x+B)+D*F))-EEE/F;\n}\nvoid main(void) {\n\n#include<clipPlaneFragment>\n\nfloat sunfade=1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\nfloat rayleighCoefficient=rayleigh-(1.0*(1.0-sunfade));\nvec3 sunDirection=normalize(sunPosition);\nfloat sunE=sunIntensity(dot(sunDirection,up));\nvec3 betaR=simplifiedRayleigh()*rayleighCoefficient;\nvec3 betaM=totalMie(lambda,K,turbidity)*mieCoefficient;\nfloat zenithAngle=acos(max(0.0,dot(up,normalize(vPositionW-cameraPosition))));\nfloat sR=rayleighZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nfloat sM=mieZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\nvec3 Fex=exp(-(betaR*sR+betaM*sM));\nfloat cosTheta=dot(normalize(vPositionW-cameraPosition),sunDirection);\nfloat rPhase=rayleighPhase(cosTheta*0.5+0.5);\nvec3 betaRTheta=betaR*rPhase;\nfloat mPhase=hgPhase(cosTheta,mieDirectionalG);\nvec3 betaMTheta=betaM*mPhase;\nvec3 Lin=pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*(1.0-Fex),vec3(1.5));\nLin*=mix(vec3(1.0),pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up,sunDirection),5.0),0.0,1.0));\nvec3 direction=normalize(vPositionW-cameraPosition);\nfloat theta=acos(direction.y);\nfloat phi=atan(direction.z,direction.x);\nvec2 uv=vec2(phi,theta)/vec2(2.0*pi,pi)+vec2(0.5,0.0);\nvec3 L0=vec3(0.1)*Fex;\nfloat sundisk=smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\nL0+=(sunE*19000.0*Fex)*sundisk;\nvec3 whiteScale=1.0/Uncharted2Tonemap(vec3(W));\nvec3 texColor=(Lin+L0);\ntexColor*=0.04 ;\ntexColor+=vec3(0.0,0.001,0.0025)*0.3;\nfloat g_fMaxLuminance=1.0;\nfloat fLumScaled=0.1/luminance;\nfloat fLumCompressed=(fLumScaled*(1.0+(fLumScaled/(g_fMaxLuminance*g_fMaxLuminance))))/(1.0+fLumScaled);\nfloat ExposureBias=fLumCompressed;\nvec3 curr=Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\n\n\n\nvec3 retColor=curr*whiteScale;\n\n\nfloat alpha=1.0;\n#ifdef VERTEXCOLOR\nretColor.rgb*=vColor.rgb;\n#endif\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec4 color=clamp(vec4(retColor.rgb,alpha),0.0,1.0);\n\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'skyVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n\nuniform mat4 world;\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\nvoid main(void) {\ngl_Position=viewProjection*world*vec4(position,1.0);\nvec4 worldPos=world*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./terrainMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, Texture, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./terrain.fragment\";\r\nimport \"./terrain.vertex\";\r\n\r\nclass TerrainMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public BUMP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TerrainMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"mixTexture\")\r\n    private _mixTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture1\")\r\n    private _bumpTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture2\")\r\n    private _bumpTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture3\")\r\n    private _bumpTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture3: Texture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TerrainMaterialDefines();\r\n        }\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this.mixTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                if (!this.mixTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n            if ((this.bumpTexture1 || this.bumpTexture2 || this.bumpTexture3) && StandardMaterial.BumpTextureEnabled) {\r\n                defines._needUVs = true;\r\n                defines._needNormals = true;\r\n                defines.BUMP = true;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"terrain\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\"\r\n            ];\r\n            var samplers = [\"textureSampler\", \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\",\r\n                \"bump1Sampler\", \"bump2Sampler\", \"bump3Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.mixTexture) {\r\n                this._activeEffect.setTexture(\"textureSampler\", this._mixTexture);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture.coordinatesIndex, this._mixTexture.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture.getTextureMatrix());\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                }\r\n\r\n                if (StandardMaterial.BumpTextureEnabled && scene.getEngine().getCaps().standardDerivatives) {\r\n                    if (this._bumpTexture1) {\r\n                        this._activeEffect.setTexture(\"bump1Sampler\", this._bumpTexture1);\r\n                    }\r\n                    if (this._bumpTexture2) {\r\n                        this._activeEffect.setTexture(\"bump2Sampler\", this._bumpTexture2);\r\n                    }\r\n                    if (this._bumpTexture3) {\r\n                        this._activeEffect.setTexture(\"bump3Sampler\", this._bumpTexture3);\r\n                    }\r\n                }\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._mixTexture) {\r\n            activeTextures.push(this._mixTexture);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._bumpTexture1) {\r\n            activeTextures.push(this._bumpTexture1);\r\n        }\r\n\r\n        if (this._bumpTexture2) {\r\n            activeTextures.push(this._bumpTexture2);\r\n        }\r\n\r\n        if (this._bumpTexture3) {\r\n            activeTextures.push(this._bumpTexture3);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._mixTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TerrainMaterial {\r\n        return SerializationHelper.Clone(() => new TerrainMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TerrainMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TerrainMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TerrainMaterial {\r\n        return SerializationHelper.Parse(() => new TerrainMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'terrainPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform sampler2D textureSampler;\nuniform vec2 vTextureInfos;\nuniform sampler2D diffuse1Sampler;\nuniform sampler2D diffuse2Sampler;\nuniform sampler2D diffuse3Sampler;\nuniform vec2 diffuse1Infos;\nuniform vec2 diffuse2Infos;\nuniform vec2 diffuse3Infos;\n#endif\n#ifdef BUMP\nuniform sampler2D bump1Sampler;\nuniform sampler2D bump2Sampler;\nuniform sampler2D bump3Sampler;\n#endif\n\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\n\n#ifdef BUMP\n#extension GL_OES_standard_derivatives : enable\n\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\n{\n\nvec3 dp1=dFdx(p);\nvec3 dp2=dFdy(p);\nvec2 duv1=dFdx(uv);\nvec2 duv2=dFdy(uv);\n\nvec3 dp2perp=cross(dp2,normal);\nvec3 dp1perp=cross(normal,dp1);\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\nvec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;\n\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));\nreturn mat3(tangent*invmax,binormal*invmax,normal);\n}\nvec3 perturbNormal(vec3 viewDir,vec3 mixColor)\n{\nvec3 bump1Color=texture2D(bump1Sampler,vTextureUV*diffuse1Infos).xyz;\nvec3 bump2Color=texture2D(bump2Sampler,vTextureUV*diffuse2Infos).xyz;\nvec3 bump3Color=texture2D(bump3Sampler,vTextureUV*diffuse3Infos).xyz;\nbump1Color.rgb*=mixColor.r;\nbump2Color.rgb=mix(bump1Color.rgb,bump2Color.rgb,mixColor.g);\nvec3 map=mix(bump2Color.rgb,bump3Color.rgb,mixColor.b);\nmap=map*255./127.-128./127.;\nmat3 TBN=cotangent_frame(vNormalW*vTextureInfos.y,-viewDir,vTextureUV);\nreturn normalize(TBN*map);\n}\n#endif\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n#ifdef DIFFUSE\nbaseColor=texture2D(textureSampler,vTextureUV);\n#if defined(BUMP) && defined(DIFFUSE)\nnormalW=perturbNormal(viewDirectionW,baseColor.rgb);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vTextureInfos.y;\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\ndiffuse1Color.rgb*=baseColor.r;\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,baseColor.g);\nbaseColor.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,baseColor.b);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*baseColor.rgb,0.0,1.0);\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'terrainVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vTextureUV;\nuniform mat4 textureMatrix;\nuniform vec2 vTextureInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vTextureInfos.x == 0.)\n{\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./triPlanarMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serialize, serializeAsColor3, Color3, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nimport \"./triplanar.fragment\";\r\nimport \"./triplanar.vertex\";\r\n\r\nclass TriPlanarMaterialDefines extends MaterialDefines {\r\n    public DIFFUSEX = false;\r\n    public DIFFUSEY = false;\r\n    public DIFFUSEZ = false;\r\n\r\n    public BUMPX = false;\r\n    public BUMPY = false;\r\n    public BUMPZ = false;\r\n\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TriPlanarMaterial extends PushMaterial {\r\n    @serializeAsTexture()\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureX\")\r\n    private _diffuseTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexturY\")\r\n    private _diffuseTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureZ\")\r\n    private _diffuseTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureZ: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureX\")\r\n    private _normalTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureY\")\r\n    private _normalTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureZ\")\r\n    private _normalTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureZ: BaseTexture;\r\n\r\n    @serialize()\r\n    public tileSize: number = 1;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0.2, 0.2, 0.2);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TriPlanarMaterialDefines();\r\n        }\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    var textures = [this.diffuseTextureX, this.diffuseTextureY, this.diffuseTextureZ];\r\n                    var textureDefines = [\"DIFFUSEX\", \"DIFFUSEY\", \"DIFFUSEZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (StandardMaterial.BumpTextureEnabled) {\r\n                    var textures = [this.normalTextureX, this.normalTextureY, this.normalTextureZ];\r\n                    var textureDefines = [\"BUMPX\", \"BUMPY\", \"BUMPZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"triplanar\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\",\r\n                \"tileSize\"\r\n            ];\r\n            var samplers = [\"diffuseSamplerX\", \"diffuseSamplerY\", \"diffuseSamplerZ\",\r\n                \"normalSamplerX\", \"normalSamplerY\", \"normalSamplerZ\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"tileSize\", this.tileSize);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this.diffuseTextureX) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerX\", this.diffuseTextureX);\r\n            }\r\n            if (this.diffuseTextureY) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerY\", this.diffuseTextureY);\r\n            }\r\n            if (this.diffuseTextureZ) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerZ\", this.diffuseTextureZ);\r\n            }\r\n            if (this.normalTextureX) {\r\n                this._activeEffect.setTexture(\"normalSamplerX\", this.normalTextureX);\r\n            }\r\n            if (this.normalTextureY) {\r\n                this._activeEffect.setTexture(\"normalSamplerY\", this.normalTextureY);\r\n            }\r\n            if (this.normalTextureZ) {\r\n                this._activeEffect.setTexture(\"normalSamplerZ\", this.normalTextureZ);\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTextureX) {\r\n            activeTextures.push(this._diffuseTextureX);\r\n        }\r\n\r\n        if (this._diffuseTextureY) {\r\n            activeTextures.push(this._diffuseTextureY);\r\n        }\r\n\r\n        if (this._diffuseTextureZ) {\r\n            activeTextures.push(this._diffuseTextureZ);\r\n        }\r\n\r\n        if (this._normalTextureX) {\r\n            activeTextures.push(this._normalTextureX);\r\n        }\r\n\r\n        if (this._normalTextureY) {\r\n            activeTextures.push(this._normalTextureY);\r\n        }\r\n\r\n        if (this._normalTextureZ) {\r\n            activeTextures.push(this._normalTextureZ);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureZ === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureZ === texture) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TriPlanarMaterial {\r\n        return SerializationHelper.Clone(() => new TriPlanarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TriPlanarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TriPlanarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TriPlanarMaterial {\r\n        return SerializationHelper.Parse(() => new TriPlanarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","import { Effect } from \"babylonjs\";\n\nlet name = 'triplanarPixelShader';\nlet shader = `precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\nuniform sampler2D diffuseSamplerX;\n#ifdef BUMPX\nuniform sampler2D normalSamplerX;\n#endif\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\nuniform sampler2D diffuseSamplerY;\n#ifdef BUMPY\nuniform sampler2D normalSamplerY;\n#endif\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\nuniform sampler2D diffuseSamplerZ;\n#ifdef BUMPZ\nuniform sampler2D normalSamplerZ;\n#endif\n#endif\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(0.,0.,0.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n\n#ifdef NORMAL\nvec3 normalW=tangentSpace[2];\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\nvec4 baseNormal=vec4(0.0,0.0,0.0,1.0);\nnormalW*=normalW;\n#ifdef DIFFUSEX\nbaseColor+=texture2D(diffuseSamplerX,vTextureUVX)*normalW.x;\n#ifdef BUMPX\nbaseNormal+=texture2D(normalSamplerX,vTextureUVX)*normalW.x;\n#endif\n#endif\n#ifdef DIFFUSEY\nbaseColor+=texture2D(diffuseSamplerY,vTextureUVY)*normalW.y;\n#ifdef BUMPY\nbaseNormal+=texture2D(normalSamplerY,vTextureUVY)*normalW.y;\n#endif\n#endif\n#ifdef DIFFUSEZ\nbaseColor+=texture2D(diffuseSamplerZ,vTextureUVZ)*normalW.z;\n#ifdef BUMPZ\nbaseNormal+=texture2D(normalSamplerZ,vTextureUVZ)*normalW.z;\n#endif\n#endif\n#ifdef NORMAL\nnormalW=normalize((2.0*baseNormal.xyz-1.0)*tangentSpace);\n#endif\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'triplanarVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSEX\nvarying vec2 vTextureUVX;\n#endif\n#ifdef DIFFUSEY\nvarying vec2 vTextureUVY;\n#endif\n#ifdef DIFFUSEZ\nvarying vec2 vTextureUVZ;\n#endif\nuniform float tileSize;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying mat3 tangentSpace;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void)\n{\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef DIFFUSEX\nvTextureUVX=worldPos.zy/tileSize;\n#endif\n#ifdef DIFFUSEY\nvTextureUVY=worldPos.xz/tileSize;\n#endif\n#ifdef DIFFUSEZ\nvTextureUVZ=worldPos.xy/tileSize;\n#endif\n#ifdef NORMAL\n\nvec3 xtan=vec3(0,0,1);\nvec3 xbin=vec3(0,1,0);\nvec3 ytan=vec3(1,0,0);\nvec3 ybin=vec3(0,0,1);\nvec3 ztan=vec3(1,0,0);\nvec3 zbin=vec3(0,1,0);\nvec3 normalizedNormal=normalize(normal);\nnormalizedNormal*=normalizedNormal;\nvec3 worldBinormal=normalize(xbin*normalizedNormal.x+ybin*normalizedNormal.y+zbin*normalizedNormal.z);\nvec3 worldTangent=normalize(xtan*normalizedNormal.x+ytan*normalizedNormal.y+ztan*normalizedNormal.z);\nworldTangent=(world*vec4(worldTangent,1.0)).xyz;\nworldBinormal=(world*vec4(worldBinormal,1.0)).xyz;\nvec3 worldNormal=normalize(cross(worldTangent,worldBinormal));\ntangentSpace[0]=worldTangent;\ntangentSpace[1]=worldBinormal;\ntangentSpace[2]=worldNormal;\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","export * from \"./waterMaterial\";","import { MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, serializeAsVector2, Vector2, SmartArray, RenderTargetTexture, Nullable, AbstractMesh, Matrix, Scene, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Mesh, Plane, Vector3, Camera, IAnimatable, SerializationHelper } from \"babylonjs\";\n\nimport \"./water.fragment\";\nimport \"./water.vertex\";\n\nclass WaterMaterialDefines extends MaterialDefines {\n    public BUMP = false;\n    public REFLECTION = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public SPECULARTERM = false;\n    public LOGARITHMICDEPTH = false;\n    public FRESNELSEPARATE = false;\n    public BUMPSUPERIMPOSE = false;\n    public BUMPAFFECTSREFLECTION = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class WaterMaterial extends PushMaterial {\n    /*\n    * Public members\n    */\n    @serializeAsTexture(\"bumpTexture\")\n    private _bumpTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public bumpTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serializeAsColor3()\n    public specularColor = new Color3(0, 0, 0);\n\n    @serialize()\n    public specularPower = 64;\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    /**\n    * @param {number}: Represents the wind force\n    */\n    @serialize()\n    public windForce: number = 6;\n    /**\n    * @param {Vector2}: The direction of the wind in the plane (X, Z)\n    */\n    @serializeAsVector2()\n    public windDirection: Vector2 = new Vector2(0, 1);\n    /**\n    * @param {number}: Wave height, represents the height of the waves\n    */\n    @serialize()\n    public waveHeight: number = 0.4;\n    /**\n    * @param {number}: Bump height, represents the bump height related to the bump map\n    */\n    @serialize()\n    public bumpHeight: number = 0.4;\n    /**\n     * @param {boolean}: Add a smaller moving bump to less steady waves.\n     */\n    @serialize(\"bumpSuperimpose\")\n    private _bumpSuperimpose = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpSuperimpose: boolean;\n\n    /**\n     * @param {boolean}: Color refraction and reflection differently with .waterColor2 and .colorBlendFactor2. Non-linear (physically correct) fresnel.\n     */\n    @serialize(\"fresnelSeparate\")\n    private _fresnelSeparate = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public fresnelSeparate: boolean;\n\n    /**\n     * @param {boolean}: bump Waves modify the reflection.\n     */\n    @serialize(\"bumpAffectsReflection\")\n    private _bumpAffectsReflection = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpAffectsReflection: boolean;\n\n    /**\n    * @param {number}: The water color blended with the refraction (near)\n    */\n    @serializeAsColor3()\n    public waterColor: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n    * @param {number}: The blend factor related to the water color\n    */\n    @serialize()\n    public colorBlendFactor: number = 0.2;\n    /**\n     * @param {number}: The water color blended with the reflection (far)\n     */\n    @serializeAsColor3()\n    public waterColor2: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n     * @param {number}: The blend factor related to the water color (reflection, far)\n     */\n    @serialize()\n    public colorBlendFactor2: number = 0.2;\n    /**\n    * @param {number}: Represents the maximum length of a wave\n    */\n    @serialize()\n    public waveLength: number = 0.1;\n\n    /**\n    * @param {number}: Defines the waves speed\n    */\n    @serialize()\n    public waveSpeed: number = 1.0;\n\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\n\n    /*\n    * Private members\n    */\n    private _mesh: Nullable<AbstractMesh> = null;\n\n    private _refractionRTT: Nullable<RenderTargetTexture>;\n    private _reflectionRTT: Nullable<RenderTargetTexture>;\n\n    private _reflectionTransform: Matrix = Matrix.Zero();\n    private _lastTime: number = 0;\n    private _lastDeltaTime: number = 0;\n\n    private _renderId: number;\n\n    private _useLogarithmicDepth: boolean;\n\n    private _waitingRenderList: Nullable<string[]>;\n\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    public get hasRenderTargetTextures(): boolean {\n        return true;\n        }\n\n    /**\n    * Constructor\n    */\n    constructor(name: string, scene: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {\n        super(name, scene);\n\n        this._createRenderTargets(scene, renderTargetSize);\n\n        // Create render targets\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\n            this._renderTargets.reset();\n            this._renderTargets.push(<RenderTargetTexture>this._reflectionRTT);\n            this._renderTargets.push(<RenderTargetTexture>this._refractionRTT);\n\n            return this._renderTargets;\n        };\n    }\n\n    @serialize()\n    public get useLogarithmicDepth(): boolean {\n        return this._useLogarithmicDepth;\n    }\n\n    public set useLogarithmicDepth(value: boolean) {\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        this._markAllSubMeshesAsMiscDirty();\n    }\n\n    // Get / Set\n    public get refractionTexture(): Nullable<RenderTargetTexture> {\n        return this._refractionRTT;\n    }\n\n    public get reflectionTexture(): Nullable<RenderTargetTexture> {\n        return this._reflectionRTT;\n    }\n\n    // Methods\n    public addToRenderList(node: any): void {\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            this._refractionRTT.renderList.push(node);\n        }\n\n        if (this._reflectionRTT && this._reflectionRTT.renderList) {\n            this._reflectionRTT.renderList.push(node);\n        }\n    }\n\n    public enableRenderTargets(enable: boolean): void {\n        var refreshRate = enable ? 1 : 0;\n\n        if (this._refractionRTT) {\n            this._refractionRTT.refreshRate = refreshRate;\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.refreshRate = refreshRate;\n        }\n    }\n\n    public getRenderList(): Nullable<AbstractMesh[]> {\n        return this._refractionRTT ? this._refractionRTT.renderList : [];\n    }\n\n    public get renderTargetsEnabled(): boolean {\n        return !(this._refractionRTT && this._refractionRTT.refreshRate === 0);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (this._wasPreviouslyReady && subMesh.effect) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new WaterMaterialDefines();\n        }\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this.bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    if (!this.bumpTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.BUMP = true;\n                    }\n                }\n\n                if (StandardMaterial.ReflectionTextureEnabled) {\n                    defines.REFLECTION = true;\n                }\n            }\n        }\n\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        if (defines._areMiscDirty) {\n            if (this._fresnelSeparate) {\n                defines.FRESNELSEPARATE = true;\n            }\n\n            if (this._bumpSuperimpose) {\n                defines.BUMPSUPERIMPOSE = true;\n            }\n\n            if (this._bumpAffectsReflection) {\n                defines.BUMPAFFECTSREFLECTION = true;\n            }\n        }\n\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Configure this\n        this._mesh = mesh;\n\n        if (this._waitingRenderList) {\n            for (var i = 0; i < this._waitingRenderList.length; i++) {\n                this.addToRenderList(scene.getNodeByID(this._waitingRenderList[i]));\n            }\n\n            this._waitingRenderList = null;\n        }\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"water\";\n            var join = defines.toString();\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vNormalInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"normalMatrix\",\n                \"logarithmicDepthConstant\",\n\n                // Water\n                \"worldReflectionViewProjection\", \"windDirection\", \"waveLength\", \"time\", \"windForce\",\n                \"cameraPosition\", \"bumpHeight\", \"waveHeight\", \"waterColor\", \"waterColor2\", \"colorBlendFactor\", \"colorBlendFactor2\", \"waveSpeed\"\n            ];\n            var samplers = [\"normalSampler\",\n                // Water\n                \"refractionSampler\", \"reflectionSampler\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <EffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights }\n                }, engine), defines);\n\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        this._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n        if (!effect || !this._mesh) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                this._activeEffect.setTexture(\"normalSampler\", this.bumpTexture);\n\n                this._activeEffect.setFloat2(\"vNormalInfos\", this.bumpTexture.coordinatesIndex, this.bumpTexture.level);\n                this._activeEffect.setMatrix(\"normalMatrix\", this.bumpTexture.getTextureMatrix());\n            }\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n\n        if (defines.SPECULARTERM) {\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n        }\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        // Log. depth\n        MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n\n        // Water\n        if (StandardMaterial.ReflectionTextureEnabled) {\n            this._activeEffect.setTexture(\"refractionSampler\", this._refractionRTT);\n            this._activeEffect.setTexture(\"reflectionSampler\", this._reflectionRTT);\n        }\n\n        var wrvp = this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(scene.getProjectionMatrix());\n\n        // Add delta time. Prevent adding delta time if it hasn't changed.\n        let deltaTime = scene.getEngine().getDeltaTime();\n        if (deltaTime !== this._lastDeltaTime) {\n            this._lastDeltaTime = deltaTime;\n            this._lastTime += this._lastDeltaTime;\n        }\n\n        this._activeEffect.setMatrix(\"worldReflectionViewProjection\", wrvp);\n        this._activeEffect.setVector2(\"windDirection\", this.windDirection);\n        this._activeEffect.setFloat(\"waveLength\", this.waveLength);\n        this._activeEffect.setFloat(\"time\", this._lastTime / 100000);\n        this._activeEffect.setFloat(\"windForce\", this.windForce);\n        this._activeEffect.setFloat(\"waveHeight\", this.waveHeight);\n        this._activeEffect.setFloat(\"bumpHeight\", this.bumpHeight);\n        this._activeEffect.setColor4(\"waterColor\", this.waterColor, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor\", this.colorBlendFactor);\n        this._activeEffect.setColor4(\"waterColor2\", this.waterColor2, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor2\", this.colorBlendFactor2);\n        this._activeEffect.setFloat(\"waveSpeed\", this.waveSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    private _createRenderTargets(scene: Scene, renderTargetSize: Vector2): void {\n        // Render targets\n        this._refractionRTT = new RenderTargetTexture(name + \"_refraction\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._refractionRTT.wrapU = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._refractionRTT.wrapV = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._refractionRTT.ignoreCameraViewport = true;\n\n        this._reflectionRTT = new RenderTargetTexture(name + \"_reflection\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._reflectionRTT.wrapU = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._reflectionRTT.wrapV = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._reflectionRTT.ignoreCameraViewport = true;\n\n        var isVisible: boolean;\n        var clipPlane: Nullable<Plane> = null;\n        var savedViewMatrix: Matrix;\n        var mirrorMatrix = Matrix.Zero();\n\n        this._refractionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n            // Clip plane\n            clipPlane = scene.clipPlane;\n\n            var positiony = this._mesh ? this._mesh.position.y : 0.0;\n            scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony + 0.05, 0), new Vector3(0, 1, 0));\n        };\n\n        this._refractionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            scene.clipPlane = clipPlane;\n        };\n\n        this._reflectionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n\n            // Clip plane\n            clipPlane = scene.clipPlane;\n\n            var positiony = this._mesh ? this._mesh.position.y : 0.0;\n            scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony - 0.05, 0), new Vector3(0, -1, 0));\n\n            // Transform\n            Matrix.ReflectionToRef(scene.clipPlane, mirrorMatrix);\n            savedViewMatrix = scene.getViewMatrix();\n\n            mirrorMatrix.multiplyToRef(savedViewMatrix, this._reflectionTransform);\n            scene.setTransformMatrix(this._reflectionTransform, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = false;\n            scene._mirroredCameraPosition = Vector3.TransformCoordinates((<Camera>scene.activeCamera).position, mirrorMatrix);\n        };\n\n        this._reflectionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            scene.clipPlane = clipPlane;\n\n            // Transform\n            scene.setTransformMatrix(savedViewMatrix, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = true;\n            scene._mirroredCameraPosition = null;\n        };\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.bumpTexture && this.bumpTexture.animations && this.bumpTexture.animations.length > 0) {\n            results.push(this.bumpTexture);\n        }\n        if (this._reflectionRTT && this._reflectionRTT.animations && this._reflectionRTT.animations.length > 0) {\n            results.push(this._reflectionRTT);\n        }\n        if (this._refractionRTT && this._refractionRTT.animations && this._refractionRTT.animations.length > 0) {\n            results.push(this._refractionRTT);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.bumpTexture) {\n            this.bumpTexture.dispose();\n        }\n\n        var index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._refractionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n        index = -1;\n        index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._reflectionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.dispose();\n        }\n        if (this._refractionRTT) {\n            this._refractionRTT.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): WaterMaterial {\n        return SerializationHelper.Clone(() => new WaterMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.WaterMaterial\";\n\n        serializationObject.renderList = [];\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            for (var i = 0; i < this._refractionRTT.renderList.length; i++) {\n                serializationObject.renderList.push(this._refractionRTT.renderList[i].id);\n            }\n        }\n\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"WaterMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): WaterMaterial {\n        var mat = SerializationHelper.Parse(() => new WaterMaterial(source.name, scene), source, scene, rootUrl);\n        mat._waitingRenderList = source.renderList;\n\n        return mat;\n    }\n\n    public static CreateDefaultMesh(name: string, scene: Scene): Mesh {\n        var mesh = Mesh.CreateGround(name, 512, 512, 32, scene, false);\n        return mesh;\n    }\n}","import { Effect } from \"babylonjs\";\n\nlet name = 'waterPixelShader';\nlet shader = `#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n#ifdef SPECULARTERM\nuniform vec4 vSpecularColor;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef BUMP\nvarying vec2 vNormalUV;\nvarying vec2 vNormalUV2;\nuniform sampler2D normalSampler;\nuniform vec2 vNormalInfos;\n#endif\nuniform sampler2D refractionSampler;\nuniform sampler2D reflectionSampler;\n\nconst float LOG2=1.442695;\nuniform vec3 cameraPosition;\nuniform vec4 waterColor;\nuniform float colorBlendFactor;\nuniform vec4 waterColor2;\nuniform float colorBlendFactor2;\nuniform float bumpHeight;\nuniform float time;\n\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvarying vec3 vPosition;\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef BUMP\n#ifdef BUMPSUPERIMPOSE\nbaseColor=0.6*texture2D(normalSampler,vNormalUV)+0.4*texture2D(normalSampler,vec2(vNormalUV2.x,vNormalUV2.y));\n#else\nbaseColor=texture2D(normalSampler,vNormalUV);\n#endif\nvec3 bumpColor=baseColor.rgb;\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\nbaseColor.rgb*=vNormalInfos.y;\n#else\nvec3 bumpColor=vec3(1.0);\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec2 perturbation=bumpHeight*(baseColor.rg-0.5);\n#ifdef BUMPAFFECTSREFLECTION\nvec3 normalW=normalize(vNormalW+vec3(perturbation.x*8.0,0.0,perturbation.y*8.0));\nif (normalW.y<0.0) {\nnormalW.y=-normalW.y;\n}\n#else\nvec3 normalW=normalize(vNormalW);\n#endif\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\nvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\n#endif\n#ifdef FRESNELSEPARATE\n#ifdef REFLECTION\n\nvec3 eyeVector=normalize(vEyePosition-vPosition);\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation*0.5,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\nvec2 projectedReflectionTexCoords=clamp(vec2(\nvReflectionMapTexCoord.x/vReflectionMapTexCoord.z+perturbation.x*0.3,\nvReflectionMapTexCoord.y/vReflectionMapTexCoord.z+perturbation.y\n),0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=clamp(abs(pow(dot(eyeVector,upVector),3.0)),0.05,0.65);\nfloat IfresnelTerm=1.0-fresnelTerm;\nrefractiveColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*refractiveColor;\nreflectiveColor=IfresnelTerm*colorBlendFactor2*waterColor+(1.0-colorBlendFactor2*IfresnelTerm)*reflectiveColor;\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*IfresnelTerm;\nbaseColor=combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#else\n#ifdef REFLECTION\n\nvec3 eyeVector=normalize(vEyePosition-vPosition);\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\nvec3 upVector=vec3(0.0,1.0,0.0);\nfloat fresnelTerm=max(dot(eyeVector,upVector),0.0);\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*(1.0-fresnelTerm);\nbaseColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*combinedColor;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularBase=vec3(0.,0.,0.);\nvec3 specularColor=vSpecularColor.rgb;\n#else\nfloat glossiness=0.;\n#endif\n#include<lightFragment>[0..maxSimultaneousLights]\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n#endif\n\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\n#include<logDepthFragment>\n#include<fogFragment>\ngl_FragColor=color;\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n","import { Effect } from \"babylonjs\";\n\nlet name = 'waterVertexShader';\nlet shader = `precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef BUMP\nvarying vec2 vNormalUV;\n#ifdef BUMPSUPERIMPOSE\nvarying vec2 vNormalUV2;\n#endif\nuniform mat4 normalMatrix;\nuniform vec2 vNormalInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<logDepthDeclaration>\n\nuniform mat4 worldReflectionViewProjection;\nuniform vec2 windDirection;\nuniform float waveLength;\nuniform float time;\nuniform float windForce;\nuniform float waveHeight;\nuniform float waveSpeed;\n\nvarying vec3 vPosition;\nvarying vec3 vRefractionMapTexCoord;\nvarying vec3 vReflectionMapTexCoord;\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef BUMP\nif (vNormalInfos.x == 0.)\n{\nvNormalUV=vec2(normalMatrix*vec4((uv*1.0)/waveLength+time*windForce*windDirection,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv*0.721)/waveLength+time*1.2*windForce*windDirection,1.0,0.0));\n#endif\n}\nelse\n{\nvNormalUV=vec2(normalMatrix*vec4((uv2*1.0)/waveLength+time*windForce*windDirection ,1.0,0.0));\n#ifdef BUMPSUPERIMPOSE\nvNormalUV2=vec2(normalMatrix*vec4((uv2*0.721)/waveLength+time*1.2*windForce*windDirection ,1.0,0.0));\n#endif\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\nvColor=color;\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\nvec3 p=position;\nfloat newY=(sin(((p.x/0.05)+time*waveSpeed))*waveHeight*windDirection.x*5.0)\n+(cos(((p.z/0.05)+time*waveSpeed))*waveHeight*windDirection.y*5.0);\np.y+=abs(newY);\ngl_Position=viewProjection*finalWorld*vec4(p,1.0);\n#ifdef REFLECTION\nworldPos=viewProjection*finalWorld*vec4(p,1.0);\n\nvPosition=position;\nvRefractionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvRefractionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvRefractionMapTexCoord.z=worldPos.w;\nworldPos=worldReflectionViewProjection*vec4(position,1.0);\nvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvReflectionMapTexCoord.z=worldPos.w;\n#endif\n#include<logDepthVertex>\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n\nexport { shader, name };\n"],"sourceRoot":""}