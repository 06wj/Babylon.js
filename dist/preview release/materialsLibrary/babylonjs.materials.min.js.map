{"version":3,"sources":["webpack://BABYLON/webpack/universalModuleDefinition","webpack://BABYLON/webpack/bootstrap","webpack://BABYLON/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/legacy.ts","webpack://BABYLON/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/cell/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/cell/cellMaterial.ts","webpack://BABYLON/./src/cell/cell.fragment.fx","webpack://BABYLON/./src/cell/cell.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/custom/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/custom/customMaterial.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/fire/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/fire/fireMaterial.ts","webpack://BABYLON/./src/fire/fire.fragment.fx","webpack://BABYLON/./src/fire/fire.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/fur/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/fur/furMaterial.ts","webpack://BABYLON/./src/fur/fur.fragment.fx","webpack://BABYLON/./src/fur/fur.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/gradient/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/gradient/gradientMaterial.ts","webpack://BABYLON/./src/gradient/gradient.fragment.fx","webpack://BABYLON/./src/gradient/gradient.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/grid/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/grid/gridMaterial.ts","webpack://BABYLON/./src/grid/grid.fragment.fx","webpack://BABYLON/./src/grid/grid.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/lava/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/lava/lavaMaterial.ts","webpack://BABYLON/./src/lava/lava.fragment.fx","webpack://BABYLON/./src/lava/lava.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/mix/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/mix/mixMaterial.ts","webpack://BABYLON/./src/mix/mix.fragment.fx","webpack://BABYLON/./src/mix/mix.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/normal/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/normal/normalMaterial.ts","webpack://BABYLON/./src/normal/normal.fragment.fx","webpack://BABYLON/./src/normal/normal.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/shadowOnly/shadowOnlyMaterial.ts","webpack://BABYLON/./src/shadowOnly/shadowOnly.fragment.fx","webpack://BABYLON/./src/shadowOnly/shadowOnly.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/simple/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/simple/simpleMaterial.ts","webpack://BABYLON/./src/simple/simple.fragment.fx","webpack://BABYLON/./src/simple/simple.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/sky/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/sky/skyMaterial.ts","webpack://BABYLON/./src/sky/sky.fragment.fx","webpack://BABYLON/./src/sky/sky.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/terrain/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/terrain/terrainMaterial.ts","webpack://BABYLON/./src/terrain/terrain.fragment.fx","webpack://BABYLON/./src/terrain/terrain.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/triPlanar/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/triPlanar/triPlanarMaterial.ts","webpack://BABYLON/./src/triPlanar/triPlanar.fragment.fx","webpack://BABYLON/./src/triPlanar/triPlanar.vertex.fx","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/water/index.ts","webpack://BABYLON/../Tools/Gulp/../../materialsLibrary/src/water/waterMaterial.ts","webpack://BABYLON/./src/water/water.fragment.fx","webpack://BABYLON/./src/water/water.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","mat","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","CellMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","POINTSIZE","FOG","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","NDOTL","CUSTOMUSERLIGHTING","CELLBASIC","DEPTHPREPASS","rebuild","__extends","MaterialDefines","CellMaterial","scene","diffuseColor","Color3","_computeHighLevel","_disableLighting","_maxSimultaneousLights","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","StandardMaterial","DiffuseTextureEnabled","isReady","computeHighLevel","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","getClassName","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","source","rootUrl","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial","CustomShaderStructure","ShaderSpecialParts","CustomMaterial","CustomParts","customShaderNameResolve","Builder","FragmentShader","VertexShader","AttachAfterBind","el","_newUniformInstances","ea","split","setVector2","setVector3","setVector4","_newSamplerInstances","ReviewUniform","arr","ind","_newUniforms","_customUniform","indexOf","shaderName","_isCreatedShader","_createdShaderName","ShaderIndexer","fn_afterBind","replace","Vertex_Begin","Vertex_Definitions","Vertex_MainBegin","Vertex_Before_PositionUpdated","Vertex_Before_NormalUpdated","Fragment_Begin","Fragment_MainBegin","Fragment_Definitions","Fragment_Custom_Diffuse","Fragment_Custom_Alpha","Fragment_Before_FragColor","AddUniform","kind","param","shaderPart","FireMaterialDefines","FireMaterial","speed","_scaledDiffuse","_lastTime","_opacityTexture","_areMiscDirty","forcePointsCloud","transformFeedbackVaryings","_distortionTexture","getDeltaTime","asArray","material","FromArray","id","Tags","AddTagsTo","tags","backFaceCulling","wireframe","Texture","checkReadyOnlyOnce","FurMaterialDefines","HEIGHTMAP","HIGHLEVEL","FurMaterial","furLength","furAngle","furColor","furOffset","furSpacing","furGravity","Vector3","furSpeed","furDensity","furOcclusion","highLevelFur","_furTime","furTime","updateFur","_meshes","offsetFur","diffuseTexture","furTexture","heightTexture","getCaps","maxVertexTextureImageUnits","markAsUnprocessed","getCachedMaterial","_heightTexture","sourceMeshName","quality","executeWhenReady","sourceMesh","getMeshByName","GenerateTexture","FurifyMesh","DynamicTexture","context","getContext","fillStyle","Math","floor","random","fillRect","getSize","width","height","update","wrapU","WRAP_ADDRESSMODE","wrapV","meshes","materials","pop","EnableFor","offsetMesh","skeleton","position","Zero","parent","serializeAsVector3","GradientMaterialDefines","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","GradientMaterial","topColor","topColorAlpha","bottomColor","bottomColorAlpha","offset","scale","smoothness","GridMaterialDefines","TRANSPARENT","PREMULTIPLYALPHA","GridMaterial","mainColor","Black","lineColor","Teal","gridRatio","gridOffset","majorUnitFrequency","minorUnitVisibility","opacity","preMultiplyAlpha","_gridControl","Vector4","needAlphaBlendingForMesh","multiply","getProjectionMatrix","setColor3","x","y","round","z","w","LavaMaterialDefines","UNLIT","LavaMaterial","movingSpeed","lowFrequencySpeed","fogDensity","_unlit","noiseTexture","fogColor","MixMaterialDefines","SPECULARTERM","MIXMAP2","MixMaterial","specularColor","specularPower","_mixTexture1","_mixTexture2","_diffuseTexture1","uScale","vScale","_diffuseTexture2","_diffuseTexture3","_diffuseTexture4","_diffuseTexture5","_diffuseTexture6","_diffuseTexture7","_diffuseTexture8","NormalMaterialDefines","NormalMaterial","ShadowOnlyMaterialDefines","ShadowOnlyMaterial","shadowColor","_activeLight","light","_i","_a","_lightSources","shadowEnabled","lightPosition","splice","SimpleMaterialDefines","SimpleMaterial","SkyMaterialDefines","SkyMaterial","luminance","turbidity","rayleigh","mieCoefficient","mieDirectionalG","distance","inclination","azimuth","sunPosition","useSunPosition","_cameraPosition","camera","activeCamera","cameraWorldMatrix","getWorldMatrix","theta","PI","phi","cos","sin","TerrainMaterialDefines","BUMP","TerrainMaterial","mixTexture","bumpTexture1","bumpTexture2","bumpTexture3","BumpTextureEnabled","_mixTexture","standardDerivatives","_bumpTexture1","_bumpTexture2","_bumpTexture3","TriPlanarMaterialDefines","DIFFUSEX","DIFFUSEY","DIFFUSEZ","BUMPX","BUMPY","BUMPZ","TriPlanarMaterial","tileSize","textures","diffuseTextureX","diffuseTextureY","diffuseTextureZ","textureDefines","normalTextureX","normalTextureY","normalTextureZ","_diffuseTextureX","_diffuseTextureY","_diffuseTextureZ","_normalTextureX","_normalTextureY","_normalTextureZ","WaterMaterialDefines","REFLECTION","LOGARITHMICDEPTH","FRESNELSEPARATE","BUMPSUPERIMPOSE","BUMPAFFECTSREFLECTION","WaterMaterial","renderTargetSize","Vector2","windForce","windDirection","waveHeight","bumpHeight","_bumpSuperimpose","_fresnelSeparate","_bumpAffectsReflection","waterColor","colorBlendFactor","waterColor2","colorBlendFactor2","waveLength","waveSpeed","_renderTargets","SmartArray","_mesh","_reflectionTransform","Matrix","_lastDeltaTime","_createRenderTargets","getRenderTargetTextures","reset","_reflectionRTT","_refractionRTT","_useLogarithmicDepth","fragmentDepthSupported","_markAllSubMeshesAsMiscDirty","addToRenderList","node","renderList","enableRenderTargets","enable","refreshRate","getRenderList","bumpTexture","ReflectionTextureEnabled","_waitingRenderList","getNodeByID","BindLogDepth","wrvp","deltaTime","isVisible","RenderTargetTexture","MIRROR_ADDRESSMODE","ignoreCameraViewport","savedViewMatrix","clipPlane","mirrorMatrix","onBeforeRender","positiony","Plane","FromPositionAndNormal","onAfterRender","ReflectionToRef","multiplyToRef","setTransformMatrix","cullBackFaces","_mirroredCameraPosition","TransformCoordinates","_bumpTexture","index","customRenderTargets","CreateDefaultMesh","Mesh","CreateGround","serializeAsVector2"],"mappings":"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","file":"babylonjs.materials.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export * from \"./cell\";\r\nexport * from \"./custom\";\r\nexport * from \"./fire\";\r\nexport * from \"./fur\";\r\nexport * from \"./gradient\";\r\nexport * from \"./grid\";\r\nexport * from \"./lava\";\r\nexport * from \"./mix\";\r\nexport * from \"./normal\";\r\nexport * from \"./shadowOnly\";\r\nexport * from \"./simple\";\r\nexport * from \"./sky\";\r\nexport * from \"./terrain\";\r\nexport * from \"./triPlanar\";\r\nexport * from \"./water\";","import * as MatLib from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GridMaterial... (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    for (var mat in MatLib) {\r\n        if (MatLib.hasOwnProperty(mat)) {\r\n            (<any>globalObject).BABYLON[mat] = (<any>MatLib)[mat];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./cellMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, expandToProperty, BaseTexture, serializeAsColor3, Scene, Color3, serialize, AbstractMesh, Nullable, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"cellPixelShader\"] = require(\"./cell.fragment.fx\");\r\nEffect.ShadersStore[\"cellVertexShader\"] = require(\"./cell.vertex.fx\");\r\n\r\nclass CellMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public NDOTL = true;\r\n    public CUSTOMUSERLIGHTING = true;\r\n    public CELLBASIC = true;\r\n    public DEPTHPREPASS = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class CellMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"computeHighLevel\")\r\n    public _computeHighLevel: boolean = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public computeHighLevel: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new CellMaterialDefines();\r\n        }\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        defines.CELLBASIC = !this.computeHighLevel;\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"cell\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return this._diffuseTexture === texture;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"CellMaterial\";\r\n    }\r\n\r\n    public clone(name: string): CellMaterial {\r\n        return SerializationHelper.Clone<CellMaterial>(() => new CellMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.CellMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): CellMaterial {\r\n        return SerializationHelper.Parse(() => new CellMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\n\\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\\n{\\ndiffuseBase=info.diffuse*shadow;\\n#ifdef CELLBASIC\\nfloat level=1.0;\\nif (info.ndl<0.5)\\nlevel=0.5;\\ndiffuseBase.rgb*vec3(level,level,level);\\n#else\\nfloat ToonThresholds[4];\\nToonThresholds[0]=0.95;\\nToonThresholds[1]=0.5;\\nToonThresholds[2]=0.2;\\nToonThresholds[3]=0.03;\\nfloat ToonBrightnessLevels[5];\\nToonBrightnessLevels[0]=1.0;\\nToonBrightnessLevels[1]=0.8;\\nToonBrightnessLevels[2]=0.6;\\nToonBrightnessLevels[3]=0.35;\\nToonBrightnessLevels[4]=0.2;\\nif (info.ndl>ToonThresholds[0])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[0];\\n}\\nelse if (info.ndl>ToonThresholds[1])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[1];\\n}\\nelse if (info.ndl>ToonThresholds[2])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[2];\\n}\\nelse if (info.ndl>ToonThresholds[3])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[3];\\n}\\nelse\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[4];\\n}\\n#endif\\nreturn max(diffuseBase,vec3(0.2));\\n}\\nvoid main(void)\\n{\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nlightingInfo info;\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif \\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./customMaterial\";","import { StandardMaterial, Texture, Mesh, Effect, StandardMaterialDefines, Scene } from \"babylonjs\";\n\nexport class CustomShaderStructure {\n\n    public FragmentStore: string;\n    public VertexStore: string;\n\n    constructor() { }\n}\n\nexport class ShaderSpecialParts {\n\n    constructor() { }\n\n    public Fragment_Begin: string;\n    public Fragment_Definitions: string;\n    public Fragment_MainBegin: string;\n\n    // diffuseColor\n    public Fragment_Custom_Diffuse: string;\n\n    // alpha\n    public Fragment_Custom_Alpha: string;\n\n    public Fragment_Before_FragColor: string;\n\n    public Vertex_Begin: string;\n    public Vertex_Definitions: string;\n    public Vertex_MainBegin: string;\n\n    // positionUpdated\n    public Vertex_Before_PositionUpdated: string;\n\n    // normalUpdated\n    public Vertex_Before_NormalUpdated: string;\n}\n\nexport class CustomMaterial extends StandardMaterial {\n    public static ShaderIndexer = 1;\n    public CustomParts: ShaderSpecialParts;\n    _isCreatedShader: boolean;\n    _createdShaderName: string;\n    _customUniform: string[];\n    _newUniforms: string[];\n    _newUniformInstances: any[];\n    _newSamplerInstances: Texture[];\n\n    public  FragmentShader : string ;\n    public  VertexShader : string ;\n\n    public AttachAfterBind(mesh: Mesh, effect: Effect) {\n        for (var el in this._newUniformInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'vec2') {\n                effect.setVector2(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec3') {\n                effect.setVector3(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'vec4') {\n                effect.setVector4(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'mat4') {\n                effect.setMatrix(ea[1], this._newUniformInstances[el]);\n            }\n            else if (ea[0] == 'float') {\n                effect.setFloat(ea[1], this._newUniformInstances[el]);\n            }\n        }\n        for (var el in this._newSamplerInstances) {\n            var ea = el.toString().split('-');\n            if (ea[0] == 'sampler2D' && this._newSamplerInstances[el].isReady && this._newSamplerInstances[el].isReady()) {\n                effect.setTexture(ea[1], this._newSamplerInstances[el]);\n            }\n        }\n    }\n\n    public ReviewUniform(name: string, arr: string[]): string[] {\n        if (name == \"uniform\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') == -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        if (name == \"sampler\") {\n            for (var ind in this._newUniforms) {\n                if (this._customUniform[ind].indexOf('sampler') != -1) {\n                    arr.push(this._newUniforms[ind]);\n                }\n            }\n        }\n        return arr;\n    }\n\n    public Builder(shaderName: string, uniforms: string[], uniformBuffers: string[], samplers: string[], defines: StandardMaterialDefines): string {\n\n        if (this._isCreatedShader) {\n            return this._createdShaderName;\n        }\n        this._isCreatedShader = false;\n\n        CustomMaterial.ShaderIndexer++;\n        var name: string = \"custom_\" + CustomMaterial.ShaderIndexer;\n\n        this.ReviewUniform(\"uniform\", uniforms);\n        this.ReviewUniform(\"sampler\", samplers);\n\n        var fn_afterBind = this._afterBind.bind(this);\n        this._afterBind = (m, e) => {\n            if (!e) {\n                return;\n            }\n            this.AttachAfterBind(m, e);\n            try { fn_afterBind(m, e); }\n            catch (e) { }\n        };\n\n        BABYLON.Effect.ShadersStore[name + \"VertexShader\"] = this.VertexShader\n            .replace('#define CUSTOM_VERTEX_BEGIN', (this.CustomParts.Vertex_Begin ? this.CustomParts.Vertex_Begin : \"\"))\n            .replace('#define CUSTOM_VERTEX_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Vertex_Definitions ? this.CustomParts.Vertex_Definitions : \"\"))\n            .replace('#define CUSTOM_VERTEX_MAIN_BEGIN', (this.CustomParts.Vertex_MainBegin ? this.CustomParts.Vertex_MainBegin : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_POSITION', (this.CustomParts.Vertex_Before_PositionUpdated ? this.CustomParts.Vertex_Before_PositionUpdated : \"\"))\n            .replace('#define CUSTOM_VERTEX_UPDATE_NORMAL', (this.CustomParts.Vertex_Before_NormalUpdated ? this.CustomParts.Vertex_Before_NormalUpdated : \"\"));\n\n            // #define CUSTOM_VERTEX_MAIN_END\n\n        BABYLON.Effect.ShadersStore[name + \"PixelShader\"] = this.FragmentShader\n            .replace('#define CUSTOM_FRAGMENT_BEGIN', (this.CustomParts.Fragment_Begin ? this.CustomParts.Fragment_Begin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_MAIN_BEGIN', (this.CustomParts.Fragment_MainBegin ? this.CustomParts.Fragment_MainBegin : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_DEFINITIONS', (this._customUniform ? this._customUniform.join(\"\\n\") : \"\") + (this.CustomParts.Fragment_Definitions ? this.CustomParts.Fragment_Definitions : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_DIFFUSE', (this.CustomParts.Fragment_Custom_Diffuse ? this.CustomParts.Fragment_Custom_Diffuse : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_UPDATE_ALPHA', (this.CustomParts.Fragment_Custom_Alpha ? this.CustomParts.Fragment_Custom_Alpha : \"\"))\n            .replace('#define CUSTOM_FRAGMENT_BEFORE_FRAGCOLOR', (this.CustomParts.Fragment_Before_FragColor ? this.CustomParts.Fragment_Before_FragColor : \"\"));\n\n            // #define CUSTOM_FRAGMENT_BEFORE_LIGHTS\n\n            // #define CUSTOM_FRAGMENT_BEFORE_FOG\n\n        this._isCreatedShader = true;\n        this._createdShaderName = name;\n\n        return name;\n    }\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n        this.CustomParts = new ShaderSpecialParts();\n        this.customShaderNameResolve = this.Builder;\n\n        this.FragmentShader = BABYLON.Effect.ShadersStore[\"defaultPixelShader\"];\n        this.VertexShader = BABYLON.Effect.ShadersStore[\"defaultVertexShader\"];\n    }\n\n    public AddUniform(name: string, kind: string, param: any): CustomMaterial {\n        if (!this._customUniform) {\n            this._customUniform = new Array();\n            this._newUniforms = new Array();\n            this._newSamplerInstances = new Array();\n            this._newUniformInstances = new Array();\n        }\n        if (param) {\n            if (kind.indexOf(\"sampler\") == -1) {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n            else {\n                (<any>this._newUniformInstances)[kind + \"-\" + name] = param;\n            }\n        }\n        this._customUniform.push(\"uniform \" + kind + \" \" + name + \";\");\n        this._newUniforms.push(name);\n\n        return this;\n    }\n\n    public Fragment_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Begin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Definitions = shaderPart;\n        return this;\n    }\n\n    public Fragment_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Fragment_Custom_Diffuse(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Diffuse = shaderPart.replace(\"result\", \"diffuseColor\");\n        return this;\n    }\n\n    public Fragment_Custom_Alpha(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Custom_Alpha = shaderPart.replace(\"result\", \"alpha\");\n        return this;\n    }\n\n    public Fragment_Before_FragColor(shaderPart: string): CustomMaterial {\n        this.CustomParts.Fragment_Before_FragColor = shaderPart.replace(\"result\", \"color\");\n        return this;\n    }\n\n    public Vertex_Begin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Begin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Definitions(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Definitions = shaderPart;\n        return this;\n    }\n\n    public Vertex_MainBegin(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_MainBegin = shaderPart;\n        return this;\n    }\n\n    public Vertex_Before_PositionUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_PositionUpdated = shaderPart.replace(\"result\", \"positionUpdated\");\n        return this;\n    }\n\n    public Vertex_Before_NormalUpdated(shaderPart: string): CustomMaterial {\n        this.CustomParts.Vertex_Before_NormalUpdated = shaderPart.replace(\"result\", \"normalUpdated\");\n        return this;\n    }\n}\n","export * from \"./fireMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, Nullable, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, Matrix, Mesh, IAnimatable, SerializationHelper, Tags, Texture, } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"firePixelShader\"] = require(\"./fire.fragment.fx\");\r\nEffect.ShadersStore[\"fireVertexShader\"] = require(\"./fire.vertex.fx\");\r\n\r\nclass FireMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public UV1 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public BonesPerMesh = 0;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FireMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"distortionTexture\")\r\n    private _distortionTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public distortionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture>;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public speed = 1.0;\r\n\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n    private _lastTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FireMaterialDefines();\r\n        }\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                if (!this._diffuseTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        defines.ALPHATEST = this._opacityTexture ? true : false;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            defines.POINTSIZE = (this.pointsCloud || scene.forcePointsCloud);\r\n            defines.FOG = (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE && this.fogEnabled);\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fire\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                {\r\n                    attributes: attribs,\r\n                    uniformsNames: [\"world\", \"view\", \"viewProjection\", \"vEyePosition\",\r\n                        \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                        \"vDiffuseInfos\",\r\n                        \"mBones\",\r\n                        \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                        // Fire\r\n                        \"time\", \"speed\"\r\n                    ],\r\n                    uniformBuffersNames: [],\r\n                    samplers: [\"diffuseSampler\",\r\n                        // Fire\r\n                        \"distortionSampler\", \"opacitySampler\"\r\n                    ],\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: null,\r\n                    maxSimultaneousLights: 4,\r\n                    transformFeedbackVaryings: null\r\n                }, engine), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FireMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n\r\n                this._activeEffect.setTexture(\"distortionSampler\", this._distortionTexture);\r\n                this._activeEffect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Time\r\n        this._lastTime += scene.getEngine().getDeltaTime();\r\n        this._activeEffect.setFloat(\"time\", this._lastTime);\r\n\r\n        // Speed\r\n        this._activeEffect.setFloat(\"speed\", this.speed);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n        if (this._distortionTexture && this._distortionTexture.animations && this._distortionTexture.animations.length > 0) {\r\n            results.push(this._distortionTexture);\r\n        }\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            activeTextures.push(this._distortionTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._distortionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FireMaterial\";\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n        if (this._distortionTexture) {\r\n            this._distortionTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FireMaterial {\r\n        return SerializationHelper.Clone<FireMaterial>(() => new FireMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n\r\n        var serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.FireMaterial\";\r\n        serializationObject.diffuseColor = this.diffuseColor.asArray();\r\n        serializationObject.speed = this.speed;\r\n\r\n        if (this._diffuseTexture) {\r\n            serializationObject._diffuseTexture = this._diffuseTexture.serialize();\r\n        }\r\n\r\n        if (this._distortionTexture) {\r\n            serializationObject._distortionTexture = this._distortionTexture.serialize();\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            serializationObject._opacityTexture = this._opacityTexture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FireMaterial {\r\n        var material = new FireMaterial(source.name, scene);\r\n\r\n        material.diffuseColor = Color3.FromArray(source.diffuseColor);\r\n        material.speed = source.speed;\r\n\r\n        material.alpha = source.alpha;\r\n\r\n        material.id = source.id;\r\n\r\n        Tags.AddTagsTo(material, source.tags);\r\n        material.backFaceCulling = source.backFaceCulling;\r\n        material.wireframe = source.wireframe;\r\n\r\n        if (source._diffuseTexture) {\r\n            material._diffuseTexture = Texture.Parse(source._diffuseTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._distortionTexture) {\r\n            material._distortionTexture = Texture.Parse(source._distortionTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source._opacityTexture) {\r\n            material._opacityTexture = Texture.Parse(source._opacityTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (source.checkReadyOnlyOnce) {\r\n            material.checkReadyOnlyOnce = source.checkReadyOnlyOnce;\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n\\nuniform sampler2D distortionSampler;\\nuniform sampler2D opacitySampler;\\n#ifdef DIFFUSE\\nvarying vec2 vDistortionCoords1;\\nvarying vec2 vDistortionCoords2;\\nvarying vec2 vDistortionCoords3;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvec4 bx2(vec4 x)\\n{\\nreturn vec4(2.0)*x-vec4(1.0);\\n}\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\n\\nfloat alpha=1.0;\\n#ifdef DIFFUSE\\n\\nconst float distortionAmount0=0.092;\\nconst float distortionAmount1=0.092;\\nconst float distortionAmount2=0.092;\\nvec2 heightAttenuation=vec2(0.3,0.39);\\nvec4 noise0=texture2D(distortionSampler,vDistortionCoords1);\\nvec4 noise1=texture2D(distortionSampler,vDistortionCoords2);\\nvec4 noise2=texture2D(distortionSampler,vDistortionCoords3);\\nvec4 noiseSum=bx2(noise0)*distortionAmount0+bx2(noise1)*distortionAmount1+bx2(noise2)*distortionAmount2;\\nvec4 perturbedBaseCoords=vec4(vDiffuseUV,0.0,1.0)+noiseSum*(vDiffuseUV.y*heightAttenuation.x+heightAttenuation.y);\\nvec4 opacityColor=texture2D(opacitySampler,perturbedBaseCoords.xy);\\n#ifdef ALPHATEST\\nif (opacityColor.r<0.1)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor=texture2D(diffuseSampler,perturbedBaseCoords.xy)*2.0;\\nbaseColor*=opacityColor;\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(1.0,1.0,1.0);\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n\\nvec4 color=vec4(baseColor.rgb,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n\\nuniform float time;\\nuniform float speed;\\n#ifdef DIFFUSE\\nvarying vec2 vDistortionCoords1;\\nvarying vec2 vDistortionCoords2;\\nvarying vec2 vDistortionCoords3;\\n#endif\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n\\n#ifdef DIFFUSE\\nvDiffuseUV=uv;\\nvDiffuseUV.y-=0.2;\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n#ifdef DIFFUSE\\n\\nvec3 layerSpeed=vec3(-0.2,-0.52,-0.1)*speed;\\nvDistortionCoords1.x=uv.x;\\nvDistortionCoords1.y=uv.y+layerSpeed.x*time/1000.0;\\nvDistortionCoords2.x=uv.x;\\nvDistortionCoords2.y=uv.y+layerSpeed.y*time/1000.0;\\nvDistortionCoords3.x=uv.x;\\nvDistortionCoords3.y=uv.y+layerSpeed.z*time/1000.0;\\n#endif\\n}\\n\"","export * from \"./furMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, serializeAsVector3, Vector3, DynamicTexture, AbstractMesh, Scene, Nullable, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper, Texture, Tags } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"furPixelShader\"] = require(\"./fur.fragment.fx\");\r\nEffect.ShadersStore[\"furVertexShader\"] = require(\"./fur.vertex.fx\");\r\n\r\nclass FurMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public HEIGHTMAP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public HIGHLEVEL = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class FurMaterial extends PushMaterial {\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"heightTexture\")\r\n    private _heightTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public heightTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize()\r\n    public furLength: number = 1;\r\n\r\n    @serialize()\r\n    public furAngle: number = 0;\r\n\r\n    @serializeAsColor3()\r\n    public furColor = new Color3(0.44, 0.21, 0.02);\r\n\r\n    @serialize()\r\n    public furOffset: number = 0.0;\r\n\r\n    @serialize()\r\n    public furSpacing: number = 12;\r\n\r\n    @serializeAsVector3()\r\n    public furGravity = new Vector3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public furSpeed: number = 100;\r\n\r\n    @serialize()\r\n    public furDensity: number = 20;\r\n\r\n    @serialize()\r\n    public furOcclusion: number = 0.0;\r\n\r\n    public furTexture: DynamicTexture;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize()\r\n    public highLevelFur: boolean = true;\r\n\r\n    public _meshes: AbstractMesh[];\r\n\r\n    private _renderId: number;\r\n\r\n    private _furTime: number = 0;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    @serialize()\r\n    public get furTime() {\r\n        return this._furTime;\r\n    }\r\n\r\n    public set furTime(furTime: number) {\r\n        this._furTime = furTime;\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public updateFur(): void {\r\n        for (var i = 1; i < this._meshes.length; i++) {\r\n            var offsetFur = <FurMaterial>this._meshes[i].material;\r\n\r\n            offsetFur.furLength = this.furLength;\r\n            offsetFur.furAngle = this.furAngle;\r\n            offsetFur.furGravity = this.furGravity;\r\n            offsetFur.furSpacing = this.furSpacing;\r\n            offsetFur.furSpeed = this.furSpeed;\r\n            offsetFur.furColor = this.furColor;\r\n            offsetFur.diffuseTexture = this.diffuseTexture;\r\n            offsetFur.furTexture = this.furTexture;\r\n            offsetFur.highLevelFur = this.highLevelFur;\r\n            offsetFur.furTime = this.furTime;\r\n            offsetFur.furDensity = this.furDensity;\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FurMaterialDefines();\r\n        }\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this.diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this.heightTexture && engine.getCaps().maxVertexTextureImageUnits) {\r\n                    if (!this.heightTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.HEIGHTMAP = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        if (this.highLevelFur !== defines.HIGHLEVEL) {\r\n            defines.HIGHLEVEL = true;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"fur\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                \"furLength\", \"furAngle\", \"furColor\", \"furOffset\", \"furGravity\", \"furTime\", \"furSpacing\", \"furDensity\", \"furOcclusion\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\",\r\n                \"heightTexture\", \"furTexture\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FurMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            if (this._heightTexture) {\r\n                this._activeEffect.setTexture(\"heightTexture\", this._heightTexture);\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"furLength\", this.furLength);\r\n        this._activeEffect.setFloat(\"furAngle\", this.furAngle);\r\n        this._activeEffect.setColor4(\"furColor\", this.furColor, 1.0);\r\n\r\n        if (this.highLevelFur) {\r\n            this._activeEffect.setVector3(\"furGravity\", this.furGravity);\r\n            this._activeEffect.setFloat(\"furOffset\", this.furOffset);\r\n            this._activeEffect.setFloat(\"furSpacing\", this.furSpacing);\r\n            this._activeEffect.setFloat(\"furDensity\", this.furDensity);\r\n            this._activeEffect.setFloat(\"furOcclusion\", this.furOcclusion);\r\n\r\n            this._furTime += this.getScene().getEngine().getDeltaTime() / this.furSpeed;\r\n            this._activeEffect.setFloat(\"furTime\", this._furTime);\r\n\r\n            this._activeEffect.setTexture(\"furTexture\", this.furTexture);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        if (this.heightTexture && this.heightTexture.animations && this.heightTexture.animations.length > 0) {\r\n            results.push(this.heightTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._heightTexture) {\r\n            activeTextures.push(this._heightTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._heightTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        if (this._meshes) {\r\n            for (var i = 1; i < this._meshes.length; i++) {\r\n                let mat = this._meshes[i].material;\r\n\r\n                if (mat) {\r\n                    mat.dispose(forceDisposeEffect);\r\n                }\r\n                this._meshes[i].dispose();\r\n            }\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FurMaterial {\r\n        return SerializationHelper.Clone(() => new FurMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.FurMaterial\";\r\n\r\n        if (this._meshes) {\r\n            serializationObject.sourceMeshName = this._meshes[0].name;\r\n            serializationObject.quality = this._meshes.length;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FurMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FurMaterial {\r\n        var material = SerializationHelper.Parse(() => new FurMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.sourceMeshName && material.highLevelFur) {\r\n            scene.executeWhenReady(() => {\r\n                var sourceMesh = <Mesh>scene.getMeshByName(source.sourceMeshName);\r\n                if (sourceMesh) {\r\n                    var furTexture = FurMaterial.GenerateTexture(\"Fur Texture\", scene);\r\n                    material.furTexture = furTexture;\r\n                    FurMaterial.FurifyMesh(sourceMesh, source.quality);\r\n                }\r\n            });\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    public static GenerateTexture(name: string, scene: Scene): DynamicTexture {\r\n        // Generate fur textures\r\n        var texture = new DynamicTexture(\"FurTexture \" + name, 256, scene, true);\r\n        var context = texture.getContext();\r\n\r\n        for (var i = 0; i < 20000; ++i) {\r\n            context.fillStyle = \"rgba(255, \" + Math.floor(Math.random() * 255) + \", \" + Math.floor(Math.random() * 255) + \", 1)\";\r\n            context.fillRect((Math.random() * texture.getSize().width), (Math.random() * texture.getSize().height), 2, 2);\r\n        }\r\n\r\n        texture.update(false);\r\n        texture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        texture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        return texture;\r\n    }\r\n\r\n    // Creates and returns an array of meshes used as shells for the Fur Material\r\n    // that can be disposed later in your code\r\n    // The quality is in interval [0, 100]\r\n    public static FurifyMesh(sourceMesh: Mesh, quality: number): Mesh[] {\r\n        var meshes = [sourceMesh];\r\n        var mat: FurMaterial = <FurMaterial>sourceMesh.material;\r\n        var i;\r\n\r\n        if (!(mat instanceof FurMaterial)) {\r\n            throw \"The material of the source mesh must be a Fur Material\";\r\n        }\r\n\r\n        for (i = 1; i < quality; i++) {\r\n            var offsetFur = new FurMaterial(mat.name + i, sourceMesh.getScene());\r\n            sourceMesh.getScene().materials.pop();\r\n            Tags.EnableFor(offsetFur);\r\n            Tags.AddTagsTo(offsetFur, \"furShellMaterial\");\r\n\r\n            offsetFur.furLength = mat.furLength;\r\n            offsetFur.furAngle = mat.furAngle;\r\n            offsetFur.furGravity = mat.furGravity;\r\n            offsetFur.furSpacing = mat.furSpacing;\r\n            offsetFur.furSpeed = mat.furSpeed;\r\n            offsetFur.furColor = mat.furColor;\r\n            offsetFur.diffuseTexture = mat.diffuseTexture;\r\n            offsetFur.furOffset = i / quality;\r\n            offsetFur.furTexture = mat.furTexture;\r\n            offsetFur.highLevelFur = mat.highLevelFur;\r\n            offsetFur.furTime = mat.furTime;\r\n            offsetFur.furDensity = mat.furDensity;\r\n\r\n            var offsetMesh = sourceMesh.clone(sourceMesh.name + i);\r\n\r\n            offsetMesh.material = offsetFur;\r\n            offsetMesh.skeleton = sourceMesh.skeleton;\r\n            offsetMesh.position = Vector3.Zero();\r\n            meshes.push(offsetMesh);\r\n        }\r\n\r\n        for (i = 1; i < meshes.length; i++) {\r\n            meshes[i].parent = sourceMesh;\r\n        }\r\n\r\n        (<FurMaterial>sourceMesh.material)._meshes = meshes;\r\n\r\n        return meshes;\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nuniform vec4 furColor;\\nuniform float furLength;\\nvarying vec3 vPositionW;\\nvarying float vfur_length;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n\\n#ifdef HIGHLEVEL\\nuniform float furOffset;\\nuniform float furOcclusion;\\nuniform sampler2D furTexture;\\nvarying vec2 vFurUV;\\n#endif\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<fogFragmentDeclaration>\\n#include<clipPlaneFragmentDeclaration>\\nfloat Rand(vec3 rv) {\\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\\nreturn fract(sin(x)*43758.5453);\\n}\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=furColor;\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\nbaseColor*=texture2D(diffuseSampler,vDiffuseUV);\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef HIGHLEVEL\\n\\nvec4 furTextureColor=texture2D(furTexture,vec2(vFurUV.x,vFurUV.y));\\nif (furTextureColor.a<=0.0 || furTextureColor.g<furOffset) {\\ndiscard;\\n}\\nfloat occlusion=mix(0.0,furTextureColor.b*1.2,furOffset);\\nbaseColor=vec4(baseColor.xyz*max(occlusion,furOcclusion),1.1-furOffset);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase.rgb*baseColor.rgb,0.0,1.0);\\n\\n#ifdef HIGHLEVEL\\nvec4 color=vec4(finalDiffuse,alpha);\\n#else\\nfloat r=vfur_length/furLength*0.5;\\nvec4 color=vec4(finalDiffuse*(0.5+r),alpha);\\n#endif\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\nuniform float furLength;\\nuniform float furAngle;\\n#ifdef HIGHLEVEL\\nuniform float furOffset;\\nuniform vec3 furGravity;\\nuniform float furTime;\\nuniform float furSpacing;\\nuniform float furDensity;\\n#endif\\n#ifdef HEIGHTMAP\\nuniform sampler2D heightTexture;\\n#endif\\n#ifdef HIGHLEVEL\\nvarying vec2 vFurUV;\\n#endif\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\nvarying float vfur_length;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nfloat Rand(vec3 rv) {\\nfloat x=dot(rv,vec3(12.9898,78.233,24.65487));\\nreturn fract(sin(x)*43758.5453);\\n}\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\n\\nfloat r=Rand(position);\\n#ifdef HEIGHTMAP\\n#if __VERSION__>100\\nvfur_length=furLength*texture(heightTexture,uv).x;\\n#else\\nvfur_length=furLength*texture2D(heightTexture,uv).r;\\n#endif\\n#else \\nvfur_length=(furLength*r);\\n#endif\\nvec3 tangent1=vec3(normal.y,-normal.x,0);\\nvec3 tangent2=vec3(-normal.z,0,normal.x);\\nr=Rand(tangent1*r);\\nfloat J=(2.0+4.0*r);\\nr=Rand(tangent2*r);\\nfloat K=(2.0+2.0*r);\\ntangent1=tangent1*J+tangent2*K;\\ntangent1=normalize(tangent1);\\nvec3 newPosition=position+normal*vfur_length*cos(furAngle)+tangent1*vfur_length*sin(furAngle);\\n#ifdef HIGHLEVEL\\n\\nvec3 forceDirection=vec3(0.0,0.0,0.0);\\nforceDirection.x=sin(furTime+position.x*0.05)*0.2;\\nforceDirection.y=cos(furTime*0.7+position.y*0.04)*0.2;\\nforceDirection.z=sin(furTime*0.7+position.z*0.04)*0.2;\\nvec3 displacement=vec3(0.0,0.0,0.0);\\ndisplacement=furGravity+forceDirection;\\nfloat displacementFactor=pow(furOffset,3.0);\\nvec3 aNormal=normal;\\naNormal.xyz+=displacement*displacementFactor;\\nnewPosition=vec3(newPosition.x,newPosition.y,newPosition.z)+(normalize(aNormal)*furOffset*furSpacing);\\n#endif\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\ngl_Position=viewProjection*finalWorld*vec4(newPosition,1.0);\\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\\nvPositionW=vec3(worldPos);\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#ifdef HIGHLEVEL\\nvFurUV=vDiffuseUV*furDensity;\\n#endif\\n#else\\n#ifdef HIGHLEVEL\\nvFurUV=uv*furDensity;\\n#endif\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./gradientMaterial\";","import { Effect, MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"gradientPixelShader\"] = require(\"./gradient.fragment.fx\");\r\nEffect.ShadersStore[\"gradientVertexShader\"] = require(\"./gradient.vertex.fx\");\r\n\r\nclass GradientMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class GradientMaterial extends PushMaterial {\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    // The gradient top color, red by default\r\n    @serializeAsColor3()\r\n    public topColor = new Color3(1, 0, 0);\r\n\r\n    @serialize()\r\n    public topColorAlpha = 1.0;\r\n\r\n    // The gradient top color, blue by default\r\n    @serializeAsColor3()\r\n    public bottomColor = new Color3(0, 0, 1);\r\n\r\n    @serialize()\r\n    public bottomColorAlpha = 1.0;\r\n\r\n    // Gradient offset\r\n    @serialize()\r\n    public offset = 0;\r\n\r\n    @serialize()\r\n    public scale = 1.0;\r\n\r\n    @serialize()\r\n    public smoothness = 1.0;\r\n\r\n    @serialize()\r\n    public disableLighting = false;\r\n    private _scaledDiffuse = new Color3();\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0 || this.topColorAlpha < 1.0 || this.bottomColorAlpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GradientMaterialDefines();\r\n        }\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"gradient\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\r\n                \"topColor\", \"bottomColor\", \"offset\", \"smoothness\", \"scale\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GradientMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setColor4(\"topColor\", this.topColor, this.topColorAlpha);\r\n        this._activeEffect.setColor4(\"bottomColor\", this.bottomColor, this.bottomColorAlpha);\r\n        this._activeEffect.setFloat(\"offset\", this.offset);\r\n        this._activeEffect.setFloat(\"scale\", this.scale);\r\n        this._activeEffect.setFloat(\"smoothness\", this.smoothness);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GradientMaterial {\r\n        return SerializationHelper.Clone(() => new GradientMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GradientMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GradientMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GradientMaterial {\r\n        return SerializationHelper.Parse(() => new GradientMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nuniform vec4 topColor;\\nuniform vec4 bottomColor;\\nuniform float offset;\\nuniform float scale;\\nuniform float smoothness;\\n\\nvarying vec3 vPositionW;\\nvarying vec3 vPosition;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0]\\n#include<__decl__lightFragment>[1]\\n#include<__decl__lightFragment>[2]\\n#include<__decl__lightFragment>[3]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\nfloat h=vPosition.y*scale+offset;\\nfloat mysmoothness=clamp(smoothness,0.01,max(smoothness,10.));\\nvec4 baseColor=mix(bottomColor,topColor,max(pow(max(h,0.0),mysmoothness),0.0));\\n\\nvec3 diffuseColor=baseColor.rgb;\\n\\nfloat alpha=baseColor.a;\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0]\\n#include<lightFragment>[1]\\n#include<lightFragment>[2]\\n#include<lightFragment>[3]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\nvarying vec3 vPosition;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex> \\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\nvPosition=position;\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./gridMaterial\";","import { Effect, MaterialDefines, serializeAsColor3, Color3, serialize, Vector3, Vector4, Scene, AbstractMesh, SubMesh, MaterialHelper, VertexBuffer, Matrix, Mesh, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"gridPixelShader\"] = require(\"./grid.fragment.fx\");\r\nEffect.ShadersStore[\"gridVertexShader\"] = require(\"./grid.vertex.fx\");\r\n\r\nclass GridMaterialDefines extends MaterialDefines {\r\n    public TRANSPARENT = false;\r\n    public FOG = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * The grid materials allows you to wrap any shape with a grid.\r\n * Colors are customizable.\r\n */\r\nexport class GridMaterial extends BABYLON.PushMaterial {\r\n\r\n    /**\r\n     * Main color of the grid (e.g. between lines)\r\n     */\r\n    @serializeAsColor3()\r\n    public mainColor = Color3.Black();\r\n\r\n    /**\r\n     * Color of the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public lineColor = Color3.Teal();\r\n\r\n    /**\r\n     * The scale of the grid compared to unit.\r\n     */\r\n    @serialize()\r\n    public gridRatio = 1.0;\r\n\r\n    /**\r\n     * Allows setting an offset for the grid lines.\r\n     */\r\n    @serializeAsColor3()\r\n    public gridOffset = Vector3.Zero();\r\n\r\n    /**\r\n     * The frequency of thicker lines.\r\n     */\r\n    @serialize()\r\n    public majorUnitFrequency = 10;\r\n\r\n    /**\r\n     * The visibility of minor units in the grid.\r\n     */\r\n    @serialize()\r\n    public minorUnitVisibility = 0.33;\r\n\r\n    /**\r\n     * The grid opacity outside of the lines.\r\n     */\r\n    @serialize()\r\n    public opacity = 1.0;\r\n\r\n    /**\r\n     * Determine RBG output is premultiplied by alpha value.\r\n     */\r\n    @serialize()\r\n    public preMultiplyAlpha = false;\r\n\r\n    private _gridControl: Vector4 = new Vector4(this.gridRatio, this.majorUnitFrequency, this.minorUnitVisibility, this.opacity);\r\n\r\n    private _renderId: number;\r\n\r\n    /**\r\n     * constructor\r\n     * @param name The name given to the material in order to identify it afterwards.\r\n     * @param scene The scene the material is used in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Returns wehter or not the grid requires alpha blending.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.opacity < 1.0;\r\n    }\r\n\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        return this.needAlphaBlending();\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new GridMaterialDefines();\r\n        }\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines.TRANSPARENT !== (this.opacity < 1.0)) {\r\n            defines.TRANSPARENT = !defines.TRANSPARENT;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        if (defines.PREMULTIPLYALPHA != this.preMultiplyAlpha) {\r\n            defines.PREMULTIPLYALPHA = !defines.PREMULTIPLYALPHA;\r\n            defines.markAsUnprocessed();\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, false, this.fogEnabled, false, defines);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Attributes\r\n            var attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n\r\n            // Defines\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(\"grid\",\r\n                attribs,\r\n                [\"projection\", \"worldView\", \"mainColor\", \"lineColor\", \"gridControl\", \"gridOffset\", \"vFogInfos\", \"vFogColor\", \"world\", \"view\"],\r\n                [],\r\n                join,\r\n                undefined,\r\n                this.onCompiled,\r\n                this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <GridMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"worldView\", world.multiply(scene.getViewMatrix()));\r\n        this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        this._activeEffect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n\r\n        // Uniforms\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor3(\"mainColor\", this.mainColor);\r\n            this._activeEffect.setColor3(\"lineColor\", this.lineColor);\r\n\r\n            this._activeEffect.setVector3(\"gridOffset\", this.gridOffset);\r\n\r\n            this._gridControl.x = this.gridRatio;\r\n            this._gridControl.y = Math.round(this.majorUnitFrequency);\r\n            this._gridControl.z = this.minorUnitVisibility;\r\n            this._gridControl.w = this.opacity;\r\n            this._activeEffect.setVector4(\"gridControl\", this._gridControl);\r\n        }\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): GridMaterial {\r\n        return SerializationHelper.Clone(() => new GridMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GridMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"GridMaterial\";\r\n    }\r\n\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): GridMaterial {\r\n        return SerializationHelper.Parse(() => new GridMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","module.exports = \"#extension GL_OES_standard_derivatives : enable\\n#define SQRT2 1.41421356\\n#define PI 3.14159\\nprecision highp float;\\nuniform vec3 mainColor;\\nuniform vec3 lineColor;\\nuniform vec4 gridControl;\\nuniform vec3 gridOffset;\\n\\n#ifdef TRANSPARENT\\nvarying vec4 vCameraSpacePosition;\\n#endif\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\n#include<fogFragmentDeclaration>\\nfloat getVisibility(float position) {\\n\\nfloat majorGridFrequency=gridControl.y;\\nif (floor(position+0.5) == floor(position/majorGridFrequency+0.5)*majorGridFrequency)\\n{\\nreturn 1.0;\\n} \\nreturn gridControl.z;\\n}\\nfloat getAnisotropicAttenuation(float differentialLength) {\\nconst float maxNumberOfLines=10.0;\\nreturn clamp(1.0/(differentialLength+1.0)-1.0/maxNumberOfLines,0.0,1.0);\\n}\\nfloat isPointOnLine(float position,float differentialLength) {\\nfloat fractionPartOfPosition=position-floor(position+0.5); \\nfractionPartOfPosition/=differentialLength; \\nfractionPartOfPosition=clamp(fractionPartOfPosition,-1.,1.);\\nfloat result=0.5+0.5*cos(fractionPartOfPosition*PI); \\nreturn result; \\n}\\nfloat contributionOnAxis(float position) {\\nfloat differentialLength=length(vec2(dFdx(position),dFdy(position)));\\ndifferentialLength*=SQRT2; \\n\\nfloat result=isPointOnLine(position,differentialLength);\\n\\nfloat visibility=getVisibility(position);\\nresult*=visibility;\\n\\nfloat anisotropicAttenuation=getAnisotropicAttenuation(differentialLength);\\nresult*=anisotropicAttenuation;\\nreturn result;\\n}\\nfloat normalImpactOnAxis(float x) {\\nfloat normalImpact=clamp(1.0-3.0*abs(x*x*x),0.0,1.0);\\nreturn normalImpact;\\n}\\nvoid main(void) {\\n\\nfloat gridRatio=gridControl.x;\\nvec3 gridPos=(vPosition+gridOffset)/gridRatio;\\n\\nfloat x=contributionOnAxis(gridPos.x);\\nfloat y=contributionOnAxis(gridPos.y);\\nfloat z=contributionOnAxis(gridPos.z);\\n\\nvec3 normal=normalize(vNormal);\\nx*=normalImpactOnAxis(normal.x);\\ny*=normalImpactOnAxis(normal.y);\\nz*=normalImpactOnAxis(normal.z);\\n\\nfloat grid=clamp(x+y+z,0.,1.);\\n\\nvec3 color=mix(mainColor,lineColor,grid);\\n#ifdef FOG\\n#include<fogFragment>\\n#endif\\n#ifdef TRANSPARENT\\nfloat distanceToFragment=length(vCameraSpacePosition.xyz);\\nfloat cameraPassThrough=clamp(distanceToFragment-0.25,0.0,1.0);\\nfloat opacity=clamp(grid,0.08,cameraPassThrough*gridControl.w*grid);\\ngl_FragColor=vec4(color.rgb,opacity);\\n#ifdef PREMULTIPLYALPHA\\ngl_FragColor.rgb*=opacity;\\n#endif\\n#else\\n\\ngl_FragColor=vec4(color.rgb,1.0);\\n#endif\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\n\\nuniform mat4 projection;\\nuniform mat4 world;\\nuniform mat4 view;\\nuniform mat4 worldView;\\n\\n#ifdef TRANSPARENT\\nvarying vec4 vCameraSpacePosition;\\n#endif\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\n#include<fogVertexDeclaration>\\nvoid main(void) {\\n#ifdef FOG\\nvec4 worldPos=world*vec4(position,1.0);\\n#endif\\n#include<fogVertex>\\nvec4 cameraSpacePosition=worldView*vec4(position,1.0);\\ngl_Position=projection*cameraSpacePosition;\\n#ifdef TRANSPARENT\\nvCameraSpacePosition=cameraSpacePosition;\\n#endif\\nvPosition=position;\\nvNormal=normal;\\n}\"","export * from \"./lavaMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"lavaPixelShader\"] = require(\"./lava.fragment.fx\");\nEffect.ShadersStore[\"lavaVertexShader\"] = require(\"./lava.vertex.fx\");\n\nclass LavaMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public UNLIT = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class LavaMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n\n    @serializeAsTexture()\n    public noiseTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public fogColor: Color3;\n\n    @serialize()\n    public speed: number = 1;\n\n    @serialize()\n    public movingSpeed: number = 1;\n\n    @serialize()\n    public lowFrequencySpeed: number = 1;\n\n    @serialize()\n    public fogDensity: number = 0.15;\n\n    private _lastTime: number = 0;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"unlit\")\n    private _unlit = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public unlit: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    private _scaledDiffuse = new Color3();\n    private _renderId: number;\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    // Methods\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (this._wasPreviouslyReady && subMesh.effect) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new LavaMaterialDefines();\n        }\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        // Lights\n        defines._needNormals = true;\n\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"lava\";\n            var join = defines.toString();\n\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\n                \"time\", \"speed\", \"movingSpeed\",\n                \"fogColor\", \"fogDensity\", \"lowFrequencySpeed\"\n            ];\n\n            var samplers = [\"diffuseSampler\",\n                \"noiseTexture\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <EffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\n                }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        this._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        defines.UNLIT = this._unlit;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n\n            if (this.noiseTexture) {\n                this._activeEffect.setTexture(\"noiseTexture\", this.noiseTexture);\n            }\n\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        this._lastTime += scene.getEngine().getDeltaTime();\n        this._activeEffect.setFloat(\"time\", this._lastTime * this.speed / 1000);\n\n        if (!this.fogColor) {\n            this.fogColor = Color3.Black();\n        }\n        this._activeEffect.setColor3(\"fogColor\", this.fogColor);\n        this._activeEffect.setFloat(\"fogDensity\", this.fogDensity);\n\n        this._activeEffect.setFloat(\"lowFrequencySpeed\", this.lowFrequencySpeed);\n        this._activeEffect.setFloat(\"movingSpeed\", this.movingSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n\n        if (this.noiseTexture && this.noiseTexture.animations && this.noiseTexture.animations.length > 0) {\n            results.push(this.noiseTexture);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        if (this.noiseTexture) {\n            this.noiseTexture.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): LavaMaterial {\n        return SerializationHelper.Clone(() => new LavaMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.LavaMaterial\";\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"LavaMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): LavaMaterial {\n        return SerializationHelper.Parse(() => new LavaMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n\\nuniform float time;\\nuniform float speed;\\nuniform float movingSpeed;\\nuniform vec3 fogColor;\\nuniform sampler2D noiseTexture;\\nuniform float fogDensity;\\n\\nvarying float noise;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0]\\n#include<__decl__lightFragment>[1]\\n#include<__decl__lightFragment>[2]\\n#include<__decl__lightFragment>[3]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nfloat random( vec3 scale,float seed ){\\nreturn fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;\\n}\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\n\\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );\\nvec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time*0.02;\\nvec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;\\nT1.x+=noiseTex.x*2.0;\\nT1.y+=noiseTex.y*2.0;\\nT2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;\\nT2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;\\nfloat p=texture2D( noiseTexture,T1*3.0 ).a;\\nvec4 lavaColor=texture2D( diffuseSampler,T2*4.0);\\nvec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );\\nbaseColor=temp;\\nfloat depth=gl_FragCoord.z*4.0;\\nconst float LOG2=1.442695;\\nfloat fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );\\nfogFactor=1.0-clamp( fogFactor,0.0,1.0 );\\nbaseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );\\ndiffuseColor=baseColor.rgb;\\n\\n\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef UNLIT\\nvec3 diffuseBase=vec3(1.,1.,1.);\\n#else\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0]\\n#include<lightFragment>[1]\\n#include<lightFragment>[2]\\n#include<lightFragment>[3]\\n#endif\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nuniform float time;\\nuniform float lowFrequencySpeed;\\n\\nvarying float noise;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n\\n\\nvec3 mod289(vec3 x)\\n{\\nreturn x-floor(x*(1.0/289.0))*289.0;\\n}\\nvec4 mod289(vec4 x)\\n{\\nreturn x-floor(x*(1.0/289.0))*289.0;\\n}\\nvec4 permute(vec4 x)\\n{\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\nreturn 1.79284291400159-0.85373472095314*r;\\n}\\nvec3 fade(vec3 t) {\\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat pnoise(vec3 P,vec3 rep)\\n{\\nvec3 Pi0=mod(floor(P),rep); \\nvec3 Pi1=mod(Pi0+vec3(1.0),rep); \\nPi0=mod289(Pi0);\\nPi1=mod289(Pi1);\\nvec3 Pf0=fract(P); \\nvec3 Pf1=Pf0-vec3(1.0); \\nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);\\nvec4 iy=vec4(Pi0.yy,Pi1.yy);\\nvec4 iz0=Pi0.zzzz;\\nvec4 iz1=Pi1.zzzz;\\nvec4 ixy=permute(permute(ix)+iy);\\nvec4 ixy0=permute(ixy+iz0);\\nvec4 ixy1=permute(ixy+iz1);\\nvec4 gx0=ixy0*(1.0/7.0);\\nvec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;\\ngx0=fract(gx0);\\nvec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);\\nvec4 sz0=step(gz0,vec4(0.0));\\ngx0-=sz0*(step(0.0,gx0)-0.5);\\ngy0-=sz0*(step(0.0,gy0)-0.5);\\nvec4 gx1=ixy1*(1.0/7.0);\\nvec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;\\ngx1=fract(gx1);\\nvec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);\\nvec4 sz1=step(gz1,vec4(0.0));\\ngx1-=sz1*(step(0.0,gx1)-0.5);\\ngy1-=sz1*(step(0.0,gy1)-0.5);\\nvec3 g000=vec3(gx0.x,gy0.x,gz0.x);\\nvec3 g100=vec3(gx0.y,gy0.y,gz0.y);\\nvec3 g010=vec3(gx0.z,gy0.z,gz0.z);\\nvec3 g110=vec3(gx0.w,gy0.w,gz0.w);\\nvec3 g001=vec3(gx1.x,gy1.x,gz1.x);\\nvec3 g101=vec3(gx1.y,gy1.y,gz1.y);\\nvec3 g011=vec3(gx1.z,gy1.z,gz1.z);\\nvec3 g111=vec3(gx1.w,gy1.w,gz1.w);\\nvec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));\\ng000*=norm0.x;\\ng010*=norm0.y;\\ng100*=norm0.z;\\ng110*=norm0.w;\\nvec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));\\ng001*=norm1.x;\\ng011*=norm1.y;\\ng101*=norm1.z;\\ng111*=norm1.w;\\nfloat n000=dot(g000,Pf0);\\nfloat n100=dot(g100,vec3(Pf1.x,Pf0.yz));\\nfloat n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));\\nfloat n110=dot(g110,vec3(Pf1.xy,Pf0.z));\\nfloat n001=dot(g001,vec3(Pf0.xy,Pf1.z));\\nfloat n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));\\nfloat n011=dot(g011,vec3(Pf0.x,Pf1.yz));\\nfloat n111=dot(g111,Pf1);\\nvec3 fade_xyz=fade(Pf0);\\nvec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);\\nvec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);\\nfloat n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);\\nreturn 2.2*n_xyz;\\n}\\n\\nfloat turbulence( vec3 p ) {\\nfloat w=100.0;\\nfloat t=-.5;\\nfor (float f=1.0 ; f<=10.0 ; f++ ){\\nfloat power=pow( 2.0,f );\\nt+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );\\n}\\nreturn t;\\n}\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\n#ifdef NORMAL\\n\\nnoise=10.0*-.10*turbulence( .5*normal+time*1.15 );\\n\\nfloat b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );\\n\\nfloat displacement =-1.5*noise+b;\\n\\nvec3 newPosition=position+normal*displacement;\\ngl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );\\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\\nvPositionW=vec3(worldPos);\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\"","export * from \"./mixMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, Texture, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"mixPixelShader\"] = require(\"./mix.fragment.fx\");\r\nEffect.ShadersStore[\"mixVertexShader\"] = require(\"./mix.vertex.fx\");\r\n\r\nclass MixMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public MIXMAP2 = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MixMaterial extends PushMaterial {\r\n    /**\r\n     * Mix textures\r\n     */\r\n\r\n    @serializeAsTexture(\"mixTexture1\")\r\n    private _mixTexture1: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture1: BaseTexture;\r\n\r\n    @serializeAsTexture(\"mixTexture2\")\r\n    private _mixTexture2: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture2: BaseTexture;\r\n\r\n    /**\r\n     * Diffuse textures\r\n     */\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture4: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture4: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture5: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture5: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture6: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture6: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture7: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture7: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture8: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture8: Texture;\r\n\r\n    /**\r\n     * Uniforms\r\n     */\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new MixMaterialDefines();\r\n        }\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (StandardMaterial.DiffuseTextureEnabled) {\r\n                if (this._mixTexture1) {\r\n                    if (!this._mixTexture1.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this._mixTexture2) {\r\n                    if (!this._mixTexture2.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines.MIXMAP2 = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"mix\";\r\n            var join = defines.toString();\r\n            var uniforms = [\r\n                \"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\", \"diffuse4Infos\",\r\n                \"diffuse5Infos\", \"diffuse6Infos\", \"diffuse7Infos\", \"diffuse8Infos\"\r\n            ];\r\n            var samplers = [\r\n                \"mixMap1Sampler\", \"mixMap2Sampler\",\r\n                \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\", \"diffuse4Sampler\",\r\n                \"diffuse5Sampler\", \"diffuse6Sampler\", \"diffuse7Sampler\", \"diffuse8Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._mixTexture1) {\r\n                this._activeEffect.setTexture(\"mixMap1Sampler\", this._mixTexture1);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture1.getTextureMatrix());\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                    if (this._diffuseTexture4) {\r\n                        this._activeEffect.setTexture(\"diffuse4Sampler\", this._diffuseTexture4);\r\n                        this._activeEffect.setFloat2(\"diffuse4Infos\", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._mixTexture2) {\r\n                this._activeEffect.setTexture(\"mixMap2Sampler\", this._mixTexture2);\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture5) {\r\n                        this._activeEffect.setTexture(\"diffuse5Sampler\", this._diffuseTexture5);\r\n                        this._activeEffect.setFloat2(\"diffuse5Infos\", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);\r\n                    }\r\n                    if (this._diffuseTexture6) {\r\n                        this._activeEffect.setTexture(\"diffuse6Sampler\", this._diffuseTexture6);\r\n                        this._activeEffect.setFloat2(\"diffuse6Infos\", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);\r\n                    }\r\n                    if (this._diffuseTexture7) {\r\n                        this._activeEffect.setTexture(\"diffuse7Sampler\", this._diffuseTexture7);\r\n                        this._activeEffect.setFloat2(\"diffuse7Infos\", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);\r\n                    }\r\n                    if (this._diffuseTexture8) {\r\n                        this._activeEffect.setTexture(\"diffuse8Sampler\", this._diffuseTexture8);\r\n                        this._activeEffect.setFloat2(\"diffuse8Infos\", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {\r\n            results.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {\r\n            results.push(this._mixTexture2);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1) {\r\n            activeTextures.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._diffuseTexture4) {\r\n            activeTextures.push(this._diffuseTexture4);\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2) {\r\n            activeTextures.push(this._mixTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture5) {\r\n            activeTextures.push(this._diffuseTexture5);\r\n        }\r\n\r\n        if (this._diffuseTexture6) {\r\n            activeTextures.push(this._diffuseTexture6);\r\n        }\r\n\r\n        if (this._diffuseTexture7) {\r\n            activeTextures.push(this._diffuseTexture7);\r\n        }\r\n\r\n        if (this._diffuseTexture8) {\r\n            activeTextures.push(this._diffuseTexture8);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture4 === texture) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture5 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture6 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture7 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture8 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._mixTexture1) {\r\n            this._mixTexture1.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MixMaterial {\r\n        return SerializationHelper.Clone(() => new MixMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MixMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MixMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MixMaterial {\r\n        return SerializationHelper.Parse(() => new MixMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n#ifdef SPECULARTERM\\nuniform vec4 vSpecularColor;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform sampler2D mixMap1Sampler;\\nuniform vec2 vTextureInfos;\\n#ifdef MIXMAP2\\nuniform sampler2D mixMap2Sampler;\\n#endif\\nuniform sampler2D diffuse1Sampler;\\nuniform sampler2D diffuse2Sampler;\\nuniform sampler2D diffuse3Sampler;\\nuniform sampler2D diffuse4Sampler;\\nuniform vec2 diffuse1Infos;\\nuniform vec2 diffuse2Infos;\\nuniform vec2 diffuse3Infos;\\nuniform vec2 diffuse4Infos;\\n#ifdef MIXMAP2\\nuniform sampler2D diffuse5Sampler;\\nuniform sampler2D diffuse6Sampler;\\nuniform sampler2D diffuse7Sampler;\\nuniform sampler2D diffuse8Sampler;\\nuniform vec2 diffuse5Infos;\\nuniform vec2 diffuse6Infos;\\nuniform vec2 diffuse7Infos;\\nuniform vec2 diffuse8Infos;\\n#endif\\n#endif\\n\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 finalMixColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n#ifdef MIXMAP2\\nvec4 mixColor2=vec4(1.,1.,1.,1.);\\n#endif\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n\\nfloat alpha=vDiffuseColor.a;\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef DIFFUSE\\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\\n#include<depthPrePass>\\nmixColor.rgb*=vTextureInfos.y;\\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\\nvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\\ndiffuse1Color.rgb*=mixColor.r;\\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\\ndiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\\nfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\\n#ifdef MIXMAP2\\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\\nmixColor.rgb*=vTextureInfos.y;\\nvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\\nvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\\nvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\\nvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\\ndiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\\ndiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\\ndiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\\nfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\\n#endif\\n#endif\\n#ifdef VERTEXCOLOR\\nfinalMixColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\\n\\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform mat4 textureMatrix;\\nuniform vec2 vTextureInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vTextureInfos.x == 0.)\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./normalMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"normalPixelShader\"] = require(\"./normal.fragment.fx\");\r\nEffect.ShadersStore[\"normalVertexShader\"] = require(\"./normal.vertex.fx\");\r\n\r\nclass NormalMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LIGHT0 = false;\r\n    public LIGHT1 = false;\r\n    public LIGHT2 = false;\r\n    public LIGHT3 = false;\r\n    public SPOTLIGHT0 = false;\r\n    public SPOTLIGHT1 = false;\r\n    public SPOTLIGHT2 = false;\r\n    public SPOTLIGHT3 = false;\r\n    public HEMILIGHT0 = false;\r\n    public HEMILIGHT1 = false;\r\n    public HEMILIGHT2 = false;\r\n    public HEMILIGHT3 = false;\r\n    public DIRLIGHT0 = false;\r\n    public DIRLIGHT1 = false;\r\n    public DIRLIGHT2 = false;\r\n    public DIRLIGHT3 = false;\r\n    public POINTLIGHT0 = false;\r\n    public POINTLIGHT1 = false;\r\n    public POINTLIGHT2 = false;\r\n    public POINTLIGHT3 = false;\r\n    public SHADOW0 = false;\r\n    public SHADOW1 = false;\r\n    public SHADOW2 = false;\r\n    public SHADOW3 = false;\r\n    public SHADOWS = false;\r\n    public SHADOWESM0 = false;\r\n    public SHADOWESM1 = false;\r\n    public SHADOWESM2 = false;\r\n    public SHADOWESM3 = false;\r\n    public SHADOWPOISSON0 = false;\r\n    public SHADOWPOISSON1 = false;\r\n    public SHADOWPOISSON2 = false;\r\n    public SHADOWPOISSON3 = false;\r\n    public SHADOWPCF0 = false;\r\n    public SHADOWPCF1 = false;\r\n    public SHADOWPCF2 = false;\r\n    public SHADOWPCF3 = false;\r\n    public SHADOWPCSS0 = false;\r\n    public SHADOWPCSS1 = false;\r\n    public SHADOWPCSS2 = false;\r\n    public SHADOWPCSS3 = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class NormalMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new NormalMaterialDefines();\r\n        }\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"normal\";\r\n            var join = defines.toString();\r\n\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <NormalMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\r\n            results.push(this.diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.diffuseTexture) {\r\n            this.diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): NormalMaterial {\r\n        return SerializationHelper.Clone(() => new NormalMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.NormalMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"NormalMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): NormalMaterial {\r\n        return SerializationHelper.Parse(() => new NormalMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0]\\n#include<__decl__lightFragment>[1]\\n#include<__decl__lightFragment>[2]\\n#include<__decl__lightFragment>[3]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef NORMAL\\nbaseColor=mix(baseColor,vec4(vNormalW,1.0),0.5);\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0]\\n#include<lightFragment>[1]\\n#include<lightFragment>[2]\\n#include<lightFragment>[3]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./shadowOnlyMaterial\";","import { Effect, MaterialDefines, PushMaterial, IShadowLight, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"shadowOnlyPixelShader\"] = require(\"./shadowOnly.fragment.fx\");\r\nEffect.ShadersStore[\"shadowOnlyVertexShader\"] = require(\"./shadowOnly.vertex.fx\");\r\n\r\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class ShadowOnlyMaterial extends PushMaterial {\r\n    private _renderId: number;\r\n    private _activeLight: IShadowLight;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public shadowColor = BABYLON.Color3.Black();\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public get activeLight(): IShadowLight {\r\n        return this._activeLight;\r\n    }\r\n\r\n    public set activeLight(light: IShadowLight) {\r\n        this._activeLight = light;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new ShadowOnlyMaterialDefines();\r\n        }\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Ensure that active light is the first shadow light\r\n        if (this._activeLight) {\r\n            for (var light of mesh._lightSources) {\r\n                if (light.shadowEnabled) {\r\n                    if (this._activeLight === light) {\r\n                        break; // We are good\r\n                    }\r\n\r\n                    var lightPosition = mesh._lightSources.indexOf(this._activeLight);\r\n\r\n                    if (lightPosition !== -1) {\r\n                        mesh._lightSources.splice(lightPosition, 1);\r\n                        mesh._lightSources.splice(0, 0, this._activeLight);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"shadowOnly\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\"\r\n            ];\r\n            var samplers = new Array<string>();\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 1\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 1 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\r\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public clone(name: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Clone<ShadowOnlyMaterial>(() => new ShadowOnlyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"ShadowOnlyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform float alpha;\\nuniform vec3 shadowColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0..1]\\n\\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./simpleMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"simplePixelShader\"] = require(\"./simple.fragment.fx\");\r\nEffect.ShadersStore[\"simpleVertexShader\"] = require(\"./simple.vertex.fx\");\r\n\r\nclass SimpleMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SimpleMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SimpleMaterialDefines();\r\n        }\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"simple\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SimpleMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SimpleMaterial {\r\n        return SerializationHelper.Clone<SimpleMaterial>(() => new SimpleMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.SimpleMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SimpleMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SimpleMaterial {\r\n        return SerializationHelper.Parse(() => new SimpleMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif \\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./skyMaterial\";","import { Effect, MaterialDefines, PushMaterial, serialize, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"skyPixelShader\"] = require(\"./sky.fragment.fx\");\r\nEffect.ShadersStore[\"skyVertexShader\"] = require(\"./sky.vertex.fx\");\r\n\r\nclass SkyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class SkyMaterial extends PushMaterial {\r\n    // Public members\r\n    @serialize()\r\n    public luminance: number = 1.0;\r\n\r\n    @serialize()\r\n    public turbidity: number = 10.0;\r\n\r\n    @serialize()\r\n    public rayleigh: number = 2.0;\r\n\r\n    @serialize()\r\n    public mieCoefficient: number = 0.005;\r\n\r\n    @serialize()\r\n    public mieDirectionalG: number = 0.8;\r\n\r\n    @serialize()\r\n    public distance: number = 500;\r\n\r\n    @serialize()\r\n    public inclination: number = 0.49;\r\n\r\n    @serialize()\r\n    public azimuth: number = 0.25;\r\n\r\n    @serializeAsVector3()\r\n    public sunPosition: Vector3 = new Vector3(0, 100, 0);\r\n\r\n    @serialize()\r\n    public useSunPosition: boolean = false;\r\n\r\n    // Private members\r\n    private _cameraPosition: Vector3 = Vector3.Zero();\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new SkyMaterialDefines();\r\n        }\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, false, defines);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, false);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            var shaderName = \"sky\";\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                attribs,\r\n                [\"world\", \"viewProjection\", \"view\",\r\n                    \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\",\r\n                    \"luminance\", \"turbidity\", \"rayleigh\", \"mieCoefficient\", \"mieDirectionalG\", \"sunPosition\",\r\n                    \"cameraPosition\"\r\n                ],\r\n                [],\r\n                join, fallbacks, this.onCompiled, this.onError), defines);\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <SkyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n\r\n            BABYLON.MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        // Sky\r\n        var camera = scene.activeCamera;\r\n        if (camera) {\r\n            var cameraWorldMatrix = camera.getWorldMatrix();\r\n            this._cameraPosition.x = cameraWorldMatrix.m[12];\r\n            this._cameraPosition.y = cameraWorldMatrix.m[13];\r\n            this._cameraPosition.z = cameraWorldMatrix.m[14];\r\n            this._activeEffect.setVector3(\"cameraPosition\", this._cameraPosition);\r\n        }\r\n\r\n        if (this.luminance > 0) {\r\n            this._activeEffect.setFloat(\"luminance\", this.luminance);\r\n        }\r\n\r\n        this._activeEffect.setFloat(\"turbidity\", this.turbidity);\r\n        this._activeEffect.setFloat(\"rayleigh\", this.rayleigh);\r\n        this._activeEffect.setFloat(\"mieCoefficient\", this.mieCoefficient);\r\n        this._activeEffect.setFloat(\"mieDirectionalG\", this.mieDirectionalG);\r\n\r\n        if (!this.useSunPosition) {\r\n            var theta = Math.PI * (this.inclination - 0.5);\r\n            var phi = 2 * Math.PI * (this.azimuth - 0.5);\r\n\r\n            this.sunPosition.x = this.distance * Math.cos(phi);\r\n            this.sunPosition.y = this.distance * Math.sin(phi) * Math.sin(theta);\r\n            this.sunPosition.z = this.distance * Math.sin(phi) * Math.cos(theta);\r\n        }\r\n\r\n        this._activeEffect.setVector3(\"sunPosition\", this.sunPosition);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        return [];\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): SkyMaterial {\r\n        return SerializationHelper.Clone<SkyMaterial>(() => new SkyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType  = \"BABYLON.SkyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"SkyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SkyMaterial {\r\n        return SerializationHelper.Parse(() => new SkyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\nuniform vec3 cameraPosition;\\nuniform float luminance;\\nuniform float turbidity;\\nuniform float rayleigh;\\nuniform float mieCoefficient;\\nuniform float mieDirectionalG;\\nuniform vec3 sunPosition;\\n\\n#include<fogFragmentDeclaration>\\n\\nconst float e=2.71828182845904523536028747135266249775724709369995957;\\nconst float pi=3.141592653589793238462643383279502884197169;\\nconst float n=1.0003;\\nconst float N=2.545E25;\\nconst float pn=0.035;\\nconst vec3 lambda=vec3(680E-9,550E-9,450E-9);\\nconst vec3 K=vec3(0.686,0.678,0.666);\\nconst float v=4.0;\\nconst float rayleighZenithLength=8.4E3;\\nconst float mieZenithLength=1.25E3;\\nconst vec3 up=vec3(0.0,1.0,0.0);\\nconst float EE=1000.0;\\nconst float sunAngularDiameterCos=0.999956676946448443553574619906976478926848692873900859324;\\nconst float cutoffAngle=pi/1.95;\\nconst float steepness=1.5;\\nvec3 totalRayleigh(vec3 lambda)\\n{\\nreturn (8.0*pow(pi,3.0)*pow(pow(n,2.0)-1.0,2.0)*(6.0+3.0*pn))/(3.0*N*pow(lambda,vec3(4.0))*(6.0-7.0*pn));\\n}\\nvec3 simplifiedRayleigh()\\n{\\nreturn 0.0005/vec3(94,40,18);\\n}\\nfloat rayleighPhase(float cosTheta)\\n{ \\nreturn (3.0/(16.0*pi))*(1.0+pow(cosTheta,2.0));\\n}\\nvec3 totalMie(vec3 lambda,vec3 K,float T)\\n{\\nfloat c=(0.2*T )*10E-18;\\nreturn 0.434*c*pi*pow((2.0*pi)/lambda,vec3(v-2.0))*K;\\n}\\nfloat hgPhase(float cosTheta,float g)\\n{\\nreturn (1.0/(4.0*pi))*((1.0-pow(g,2.0))/pow(1.0-2.0*g*cosTheta+pow(g,2.0),1.5));\\n}\\nfloat sunIntensity(float zenithAngleCos)\\n{\\nreturn EE*max(0.0,1.0-exp((-(cutoffAngle-acos(zenithAngleCos))/steepness)));\\n}\\nfloat A=0.15;\\nfloat B=0.50;\\nfloat C=0.10;\\nfloat D=0.20;\\nfloat EEE=0.02;\\nfloat F=0.30;\\nfloat W=1000.0;\\nvec3 Uncharted2Tonemap(vec3 x)\\n{\\nreturn ((x*(A*x+C*B)+D*EEE)/(x*(A*x+B)+D*F))-EEE/F;\\n}\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\n\\nfloat sunfade=1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\\nfloat rayleighCoefficient=rayleigh-(1.0*(1.0-sunfade));\\nvec3 sunDirection=normalize(sunPosition);\\nfloat sunE=sunIntensity(dot(sunDirection,up));\\nvec3 betaR=simplifiedRayleigh()*rayleighCoefficient;\\nvec3 betaM=totalMie(lambda,K,turbidity)*mieCoefficient;\\nfloat zenithAngle=acos(max(0.0,dot(up,normalize(vPositionW-cameraPosition))));\\nfloat sR=rayleighZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\\nfloat sM=mieZenithLength/(cos(zenithAngle)+0.15*pow(93.885-((zenithAngle*180.0)/pi),-1.253));\\nvec3 Fex=exp(-(betaR*sR+betaM*sM));\\nfloat cosTheta=dot(normalize(vPositionW-cameraPosition),sunDirection);\\nfloat rPhase=rayleighPhase(cosTheta*0.5+0.5);\\nvec3 betaRTheta=betaR*rPhase;\\nfloat mPhase=hgPhase(cosTheta,mieDirectionalG);\\nvec3 betaMTheta=betaM*mPhase;\\nvec3 Lin=pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*(1.0-Fex),vec3(1.5));\\nLin*=mix(vec3(1.0),pow(sunE*((betaRTheta+betaMTheta)/(betaR+betaM))*Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up,sunDirection),5.0),0.0,1.0));\\nvec3 direction=normalize(vPositionW-cameraPosition);\\nfloat theta=acos(direction.y);\\nfloat phi=atan(direction.z,direction.x);\\nvec2 uv=vec2(phi,theta)/vec2(2.0*pi,pi)+vec2(0.5,0.0);\\nvec3 L0=vec3(0.1)*Fex;\\nfloat sundisk=smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\\nL0+=(sunE*19000.0*Fex)*sundisk;\\nvec3 whiteScale=1.0/Uncharted2Tonemap(vec3(W));\\nvec3 texColor=(Lin+L0); \\ntexColor*=0.04 ;\\ntexColor+=vec3(0.0,0.001,0.0025)*0.3;\\nfloat g_fMaxLuminance=1.0;\\nfloat fLumScaled=0.1/luminance; \\nfloat fLumCompressed=(fLumScaled*(1.0+(fLumScaled/(g_fMaxLuminance*g_fMaxLuminance))))/(1.0+fLumScaled); \\nfloat ExposureBias=fLumCompressed;\\nvec3 curr=Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\\n\\n\\n\\nvec3 retColor=curr*whiteScale;\\n\\n\\nfloat alpha=1.0;\\n#ifdef VERTEXCOLOR\\nretColor.rgb*=vColor.rgb;\\n#endif\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n\\nvec4 color=clamp(vec4(retColor.rgb,alpha),0.0,1.0);\\n\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n\\nuniform mat4 world;\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\nvoid main(void) {\\ngl_Position=viewProjection*world*vec4(position,1.0);\\nvec4 worldPos=world*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./terrainMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, Texture, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"terrainPixelShader\"] = require(\"./terrain.fragment.fx\");\r\nEffect.ShadersStore[\"terrainVertexShader\"] = require(\"./terrain.vertex.fx\");\r\n\r\nclass TerrainMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public BUMP = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TerrainMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"mixTexture\")\r\n    private _mixTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture1\")\r\n    private _bumpTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture2\")\r\n    private _bumpTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"bumpTexture3\")\r\n    private _bumpTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture3: Texture;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TerrainMaterialDefines();\r\n        }\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this.mixTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                if (!this.mixTexture.isReady()) {\r\n                    return false;\r\n                } else {\r\n                    defines._needUVs = true;\r\n                    defines.DIFFUSE = true;\r\n                }\r\n            }\r\n            if ((this.bumpTexture1 || this.bumpTexture2 || this.bumpTexture3) && StandardMaterial.BumpTextureEnabled) {\r\n                defines._needUVs = true;\r\n                defines._needNormals = true;\r\n                defines.BUMP = true;\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"terrain\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\"\r\n            ];\r\n            var samplers = [\"textureSampler\", \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\",\r\n                \"bump1Sampler\", \"bump2Sampler\", \"bump3Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TerrainMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this.mixTexture) {\r\n                this._activeEffect.setTexture(\"textureSampler\", this._mixTexture);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture.coordinatesIndex, this._mixTexture.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture.getTextureMatrix());\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                }\r\n\r\n                if (StandardMaterial.BumpTextureEnabled && scene.getEngine().getCaps().standardDerivatives) {\r\n                    if (this._bumpTexture1) {\r\n                        this._activeEffect.setTexture(\"bump1Sampler\", this._bumpTexture1);\r\n                    }\r\n                    if (this._bumpTexture2) {\r\n                        this._activeEffect.setTexture(\"bump2Sampler\", this._bumpTexture2);\r\n                    }\r\n                    if (this._bumpTexture3) {\r\n                        this._activeEffect.setTexture(\"bump3Sampler\", this._bumpTexture3);\r\n                    }\r\n                }\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._mixTexture) {\r\n            activeTextures.push(this._mixTexture);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._bumpTexture1) {\r\n            activeTextures.push(this._bumpTexture1);\r\n        }\r\n\r\n        if (this._bumpTexture2) {\r\n            activeTextures.push(this._bumpTexture2);\r\n        }\r\n\r\n        if (this._bumpTexture3) {\r\n            activeTextures.push(this._bumpTexture3);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._mixTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TerrainMaterial {\r\n        return SerializationHelper.Clone(() => new TerrainMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TerrainMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TerrainMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TerrainMaterial {\r\n        return SerializationHelper.Parse(() => new TerrainMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n#ifdef SPECULARTERM\\nuniform vec4 vSpecularColor;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform sampler2D textureSampler;\\nuniform vec2 vTextureInfos;\\nuniform sampler2D diffuse1Sampler;\\nuniform sampler2D diffuse2Sampler;\\nuniform sampler2D diffuse3Sampler;\\nuniform vec2 diffuse1Infos;\\nuniform vec2 diffuse2Infos;\\nuniform vec2 diffuse3Infos;\\n#endif\\n#ifdef BUMP\\nuniform sampler2D bump1Sampler;\\nuniform sampler2D bump2Sampler;\\nuniform sampler2D bump3Sampler;\\n#endif\\n\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\n\\n#ifdef BUMP\\n#extension GL_OES_standard_derivatives : enable\\n\\nmat3 cotangent_frame(vec3 normal,vec3 p,vec2 uv)\\n{\\n\\nvec3 dp1=dFdx(p);\\nvec3 dp2=dFdy(p);\\nvec2 duv1=dFdx(uv);\\nvec2 duv2=dFdy(uv);\\n\\nvec3 dp2perp=cross(dp2,normal);\\nvec3 dp1perp=cross(normal,dp1);\\nvec3 tangent=dp2perp*duv1.x+dp1perp*duv2.x;\\nvec3 binormal=dp2perp*duv1.y+dp1perp*duv2.y;\\n\\nfloat invmax=inversesqrt(max(dot(tangent,tangent),dot(binormal,binormal)));\\nreturn mat3(tangent*invmax,binormal*invmax,normal);\\n}\\nvec3 perturbNormal(vec3 viewDir,vec3 mixColor)\\n{ \\nvec3 bump1Color=texture2D(bump1Sampler,vTextureUV*diffuse1Infos).xyz;\\nvec3 bump2Color=texture2D(bump2Sampler,vTextureUV*diffuse2Infos).xyz;\\nvec3 bump3Color=texture2D(bump3Sampler,vTextureUV*diffuse3Infos).xyz;\\nbump1Color.rgb*=mixColor.r;\\nbump2Color.rgb=mix(bump1Color.rgb,bump2Color.rgb,mixColor.g);\\nvec3 map=mix(bump2Color.rgb,bump3Color.rgb,mixColor.b);\\nmap=map*255./127.-128./127.;\\nmat3 TBN=cotangent_frame(vNormalW*vTextureInfos.y,-viewDir,vTextureUV);\\nreturn normalize(TBN*map);\\n}\\n#endif\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n\\nfloat alpha=vDiffuseColor.a;\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef DIFFUSE\\nbaseColor=texture2D(textureSampler,vTextureUV);\\n#if defined(BUMP) && defined(DIFFUSE)\\nnormalW=perturbNormal(viewDirectionW,baseColor.rgb);\\n#endif\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vTextureInfos.y;\\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\\ndiffuse1Color.rgb*=baseColor.r;\\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,baseColor.g);\\nbaseColor.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,baseColor.b);\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*baseColor.rgb,0.0,1.0);\\n\\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform mat4 textureMatrix;\\nuniform vec2 vTextureInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vTextureInfos.x == 0.)\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./triPlanarMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serialize, serializeAsColor3, Color3, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"triPlanarPixelShader\"] = require(\"./triPlanar.fragment.fx\");\r\nEffect.ShadersStore[\"triPlanarVertexShader\"] = require(\"./triPlanar.vertex.fx\");\r\n\r\nclass TriPlanarMaterialDefines extends MaterialDefines {\r\n    public DIFFUSEX = false;\r\n    public DIFFUSEY = false;\r\n    public DIFFUSEZ = false;\r\n\r\n    public BUMPX = false;\r\n    public BUMPY = false;\r\n    public BUMPZ = false;\r\n\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class TriPlanarMaterial extends PushMaterial {\r\n    @serializeAsTexture()\r\n    public mixTexture: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureX\")\r\n    private _diffuseTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTexturY\")\r\n    private _diffuseTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"diffuseTextureZ\")\r\n    private _diffuseTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTextureZ: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureX\")\r\n    private _normalTextureX: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureX: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureY\")\r\n    private _normalTextureY: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureY: BaseTexture;\r\n\r\n    @serializeAsTexture(\"normalTextureZ\")\r\n    private _normalTextureZ: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalTextureZ: BaseTexture;\r\n\r\n    @serialize()\r\n    public tileSize: number = 1;\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0.2, 0.2, 0.2);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new TriPlanarMaterialDefines();\r\n        }\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    var textures = [this.diffuseTextureX, this.diffuseTextureY, this.diffuseTextureZ];\r\n                    var textureDefines = [\"DIFFUSEX\", \"DIFFUSEY\", \"DIFFUSEZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (StandardMaterial.BumpTextureEnabled) {\r\n                    var textures = [this.normalTextureX, this.normalTextureY, this.normalTextureZ];\r\n                    var textureDefines = [\"BUMPX\", \"BUMPY\", \"BUMPZ\"];\r\n\r\n                    for (var i = 0; i < textures.length; i++) {\r\n                        if (textures[i]) {\r\n                            if (!textures[i].isReady()) {\r\n                                return false;\r\n                            } else {\r\n                                (<any>defines)[textureDefines[i]] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"triplanar\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\",\r\n                \"tileSize\"\r\n            ];\r\n            var samplers = [\"diffuseSamplerX\", \"diffuseSamplerY\", \"diffuseSamplerZ\",\r\n                \"normalSamplerX\", \"normalSamplerY\", \"normalSamplerZ\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <TriPlanarMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        this._activeEffect.setFloat(\"tileSize\", this.tileSize);\r\n\r\n        if (scene.getCachedMaterial() !== this) {\r\n            // Textures\r\n            if (this.diffuseTextureX) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerX\", this.diffuseTextureX);\r\n            }\r\n            if (this.diffuseTextureY) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerY\", this.diffuseTextureY);\r\n            }\r\n            if (this.diffuseTextureZ) {\r\n                this._activeEffect.setTexture(\"diffuseSamplerZ\", this.diffuseTextureZ);\r\n            }\r\n            if (this.normalTextureX) {\r\n                this._activeEffect.setTexture(\"normalSamplerX\", this.normalTextureX);\r\n            }\r\n            if (this.normalTextureY) {\r\n                this._activeEffect.setTexture(\"normalSamplerY\", this.normalTextureY);\r\n            }\r\n            if (this.normalTextureZ) {\r\n                this._activeEffect.setTexture(\"normalSamplerZ\", this.normalTextureZ);\r\n            }\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this.mixTexture && this.mixTexture.animations && this.mixTexture.animations.length > 0) {\r\n            results.push(this.mixTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTextureX) {\r\n            activeTextures.push(this._diffuseTextureX);\r\n        }\r\n\r\n        if (this._diffuseTextureY) {\r\n            activeTextures.push(this._diffuseTextureY);\r\n        }\r\n\r\n        if (this._diffuseTextureZ) {\r\n            activeTextures.push(this._diffuseTextureZ);\r\n        }\r\n\r\n        if (this._normalTextureX) {\r\n            activeTextures.push(this._normalTextureX);\r\n        }\r\n\r\n        if (this._normalTextureY) {\r\n            activeTextures.push(this._normalTextureY);\r\n        }\r\n\r\n        if (this._normalTextureZ) {\r\n            activeTextures.push(this._normalTextureZ);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTextureZ === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureX === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureY === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._normalTextureZ === texture) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this.mixTexture) {\r\n            this.mixTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): TriPlanarMaterial {\r\n        return SerializationHelper.Clone(() => new TriPlanarMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.TriPlanarMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"TriPlanarMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): TriPlanarMaterial {\r\n        return SerializationHelper.Parse(() => new TriPlanarMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n#ifdef SPECULARTERM\\nuniform vec4 vSpecularColor;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#ifdef DIFFUSEX\\nvarying vec2 vTextureUVX;\\nuniform sampler2D diffuseSamplerX;\\n#ifdef BUMPX\\nuniform sampler2D normalSamplerX;\\n#endif\\n#endif\\n#ifdef DIFFUSEY\\nvarying vec2 vTextureUVY;\\nuniform sampler2D diffuseSamplerY;\\n#ifdef BUMPY\\nuniform sampler2D normalSamplerY;\\n#endif\\n#endif\\n#ifdef DIFFUSEZ\\nvarying vec2 vTextureUVZ;\\nuniform sampler2D diffuseSamplerZ;\\n#ifdef BUMPZ\\nuniform sampler2D normalSamplerZ;\\n#endif\\n#endif\\n#ifdef NORMAL\\nvarying mat3 tangentSpace;\\n#endif\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(0.,0.,0.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n\\n#ifdef NORMAL\\nvec3 normalW=tangentSpace[2];\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\nvec4 baseNormal=vec4(0.0,0.0,0.0,1.0);\\nnormalW*=normalW;\\n#ifdef DIFFUSEX\\nbaseColor+=texture2D(diffuseSamplerX,vTextureUVX)*normalW.x;\\n#ifdef BUMPX\\nbaseNormal+=texture2D(normalSamplerX,vTextureUVX)*normalW.x;\\n#endif\\n#endif\\n#ifdef DIFFUSEY\\nbaseColor+=texture2D(diffuseSamplerY,vTextureUVY)*normalW.y;\\n#ifdef BUMPY\\nbaseNormal+=texture2D(normalSamplerY,vTextureUVY)*normalW.y;\\n#endif\\n#endif\\n#ifdef DIFFUSEZ\\nbaseColor+=texture2D(diffuseSamplerZ,vTextureUVZ)*normalW.z;\\n#ifdef BUMPZ\\nbaseNormal+=texture2D(normalSamplerZ,vTextureUVZ)*normalW.z;\\n#endif\\n#endif\\n#ifdef NORMAL\\nnormalW=normalize((2.0*baseNormal.xyz-1.0)*tangentSpace);\\n#endif\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularBase=vec3(0.,0.,0.);\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSEX\\nvarying vec2 vTextureUVX;\\n#endif\\n#ifdef DIFFUSEY\\nvarying vec2 vTextureUVY;\\n#endif\\n#ifdef DIFFUSEZ\\nvarying vec2 vTextureUVZ;\\n#endif\\nuniform float tileSize;\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying mat3 tangentSpace;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void)\\n{\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef DIFFUSEX\\nvTextureUVX=worldPos.zy/tileSize;\\n#endif\\n#ifdef DIFFUSEY\\nvTextureUVY=worldPos.xz/tileSize;\\n#endif\\n#ifdef DIFFUSEZ\\nvTextureUVZ=worldPos.xy/tileSize;\\n#endif\\n#ifdef NORMAL\\n\\nvec3 xtan=vec3(0,0,1);\\nvec3 xbin=vec3(0,1,0);\\nvec3 ytan=vec3(1,0,0);\\nvec3 ybin=vec3(0,0,1);\\nvec3 ztan=vec3(1,0,0);\\nvec3 zbin=vec3(0,1,0);\\nvec3 normalizedNormal=normalize(normal);\\nnormalizedNormal*=normalizedNormal;\\nvec3 worldBinormal=normalize(xbin*normalizedNormal.x+ybin*normalizedNormal.y+zbin*normalizedNormal.z);\\nvec3 worldTangent=normalize(xtan*normalizedNormal.x+ytan*normalizedNormal.y+ztan*normalizedNormal.z);\\nworldTangent=(world*vec4(worldTangent,1.0)).xyz;\\nworldBinormal=(world*vec4(worldBinormal,1.0)).xyz;\\nvec3 worldNormal=normalize(cross(worldTangent,worldBinormal));\\ntangentSpace[0]=worldTangent;\\ntangentSpace[1]=worldBinormal;\\ntangentSpace[2]=worldNormal;\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\"","export * from \"./waterMaterial\";","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, serializeAsVector2, Vector2, SmartArray, RenderTargetTexture, Nullable, AbstractMesh, Matrix, Scene, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Mesh, Plane, Vector3, Camera, IAnimatable, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"waterPixelShader\"] = require(\"./water.fragment.fx\");\nEffect.ShadersStore[\"waterVertexShader\"] = require(\"./water.vertex.fx\");\n\nclass WaterMaterialDefines extends MaterialDefines {\n    public BUMP = false;\n    public REFLECTION = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public SPECULARTERM = false;\n    public LOGARITHMICDEPTH = false;\n    public FRESNELSEPARATE = false;\n    public BUMPSUPERIMPOSE = false;\n    public BUMPAFFECTSREFLECTION = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class WaterMaterial extends PushMaterial {\n    /*\n    * Public members\n    */\n    @serializeAsTexture(\"bumpTexture\")\n    private _bumpTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public bumpTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serializeAsColor3()\n    public specularColor = new Color3(0, 0, 0);\n\n    @serialize()\n    public specularPower = 64;\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    /**\n    * @param {number}: Represents the wind force\n    */\n    @serialize()\n    public windForce: number = 6;\n    /**\n    * @param {Vector2}: The direction of the wind in the plane (X, Z)\n    */\n    @serializeAsVector2()\n    public windDirection: Vector2 = new Vector2(0, 1);\n    /**\n    * @param {number}: Wave height, represents the height of the waves\n    */\n    @serialize()\n    public waveHeight: number = 0.4;\n    /**\n    * @param {number}: Bump height, represents the bump height related to the bump map\n    */\n    @serialize()\n    public bumpHeight: number = 0.4;\n    /**\n     * @param {boolean}: Add a smaller moving bump to less steady waves.\n     */\n    @serialize(\"bumpSuperimpose\")\n    private _bumpSuperimpose = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpSuperimpose: boolean;\n\n    /**\n     * @param {boolean}: Color refraction and reflection differently with .waterColor2 and .colorBlendFactor2. Non-linear (physically correct) fresnel.\n     */\n    @serialize(\"fresnelSeparate\")\n    private _fresnelSeparate = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public fresnelSeparate: boolean;\n\n    /**\n     * @param {boolean}: bump Waves modify the reflection.\n     */\n    @serialize(\"bumpAffectsReflection\")\n    private _bumpAffectsReflection = false;\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    public bumpAffectsReflection: boolean;\n\n    /**\n    * @param {number}: The water color blended with the refraction (near)\n    */\n    @serializeAsColor3()\n    public waterColor: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n    * @param {number}: The blend factor related to the water color\n    */\n    @serialize()\n    public colorBlendFactor: number = 0.2;\n    /**\n     * @param {number}: The water color blended with the reflection (far)\n     */\n    @serializeAsColor3()\n    public waterColor2: Color3 = new Color3(0.1, 0.1, 0.6);\n    /**\n     * @param {number}: The blend factor related to the water color (reflection, far)\n     */\n    @serialize()\n    public colorBlendFactor2: number = 0.2;\n    /**\n    * @param {number}: Represents the maximum length of a wave\n    */\n    @serialize()\n    public waveLength: number = 0.1;\n\n    /**\n    * @param {number}: Defines the waves speed\n    */\n    @serialize()\n    public waveSpeed: number = 1.0;\n\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\n\n    /*\n    * Private members\n    */\n    private _mesh: Nullable<AbstractMesh> = null;\n\n    private _refractionRTT: Nullable<RenderTargetTexture>;\n    private _reflectionRTT: Nullable<RenderTargetTexture>;\n\n    private _reflectionTransform: Matrix = Matrix.Zero();\n    private _lastTime: number = 0;\n    private _lastDeltaTime: number = 0;\n\n    private _renderId: number;\n\n    private _useLogarithmicDepth: boolean;\n\n    private _waitingRenderList: Nullable<string[]>;\n\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    public get hasRenderTargetTextures(): boolean {\n        return true;\n        }\n\n    /**\n    * Constructor\n    */\n    constructor(name: string, scene: Scene, public renderTargetSize: Vector2 = new Vector2(512, 512)) {\n        super(name, scene);\n\n        this._createRenderTargets(scene, renderTargetSize);\n\n        // Create render targets\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\n            this._renderTargets.reset();\n            this._renderTargets.push(<RenderTargetTexture>this._reflectionRTT);\n            this._renderTargets.push(<RenderTargetTexture>this._refractionRTT);\n\n            return this._renderTargets;\n        };\n    }\n\n    @serialize()\n    public get useLogarithmicDepth(): boolean {\n        return this._useLogarithmicDepth;\n    }\n\n    public set useLogarithmicDepth(value: boolean) {\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        this._markAllSubMeshesAsMiscDirty();\n    }\n\n    // Get / Set\n    public get refractionTexture(): Nullable<RenderTargetTexture> {\n        return this._refractionRTT;\n    }\n\n    public get reflectionTexture(): Nullable<RenderTargetTexture> {\n        return this._reflectionRTT;\n    }\n\n    // Methods\n    public addToRenderList(node: any): void {\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            this._refractionRTT.renderList.push(node);\n        }\n\n        if (this._reflectionRTT && this._reflectionRTT.renderList) {\n            this._reflectionRTT.renderList.push(node);\n        }\n    }\n\n    public enableRenderTargets(enable: boolean): void {\n        var refreshRate = enable ? 1 : 0;\n\n        if (this._refractionRTT) {\n            this._refractionRTT.refreshRate = refreshRate;\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.refreshRate = refreshRate;\n        }\n    }\n\n    public getRenderList(): Nullable<AbstractMesh[]> {\n        return this._refractionRTT ? this._refractionRTT.renderList : [];\n    }\n\n    public get renderTargetsEnabled(): boolean {\n        return !(this._refractionRTT && this._refractionRTT.refreshRate === 0);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (this._wasPreviouslyReady && subMesh.effect) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new WaterMaterialDefines();\n        }\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this.bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    if (!this.bumpTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.BUMP = true;\n                    }\n                }\n\n                if (StandardMaterial.ReflectionTextureEnabled) {\n                    defines.REFLECTION = true;\n                }\n            }\n        }\n\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        if (defines._areMiscDirty) {\n            if (this._fresnelSeparate) {\n                defines.FRESNELSEPARATE = true;\n            }\n\n            if (this._bumpSuperimpose) {\n                defines.BUMPSUPERIMPOSE = true;\n            }\n\n            if (this._bumpAffectsReflection) {\n                defines.BUMPAFFECTSREFLECTION = true;\n            }\n        }\n\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Configure this\n        this._mesh = mesh;\n\n        if (this._waitingRenderList) {\n            for (var i = 0; i < this._waitingRenderList.length; i++) {\n                this.addToRenderList(scene.getNodeByID(this._waitingRenderList[i]));\n            }\n\n            this._waitingRenderList = null;\n        }\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"water\";\n            var join = defines.toString();\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vNormalInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"normalMatrix\",\n                \"logarithmicDepthConstant\",\n\n                // Water\n                \"worldReflectionViewProjection\", \"windDirection\", \"waveLength\", \"time\", \"windForce\",\n                \"cameraPosition\", \"bumpHeight\", \"waveHeight\", \"waterColor\", \"waterColor2\", \"colorBlendFactor\", \"colorBlendFactor2\", \"waveSpeed\"\n            ];\n            var samplers = [\"normalSampler\",\n                // Water\n                \"refractionSampler\", \"reflectionSampler\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <EffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights }\n                }, engine), defines);\n\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        this._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <WaterMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n        if (!effect || !this._mesh) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                this._activeEffect.setTexture(\"normalSampler\", this.bumpTexture);\n\n                this._activeEffect.setFloat2(\"vNormalInfos\", this.bumpTexture.coordinatesIndex, this.bumpTexture.level);\n                this._activeEffect.setMatrix(\"normalMatrix\", this.bumpTexture.getTextureMatrix());\n            }\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\n\n        if (defines.SPECULARTERM) {\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n        }\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        // Log. depth\n        MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n\n        // Water\n        if (StandardMaterial.ReflectionTextureEnabled) {\n            this._activeEffect.setTexture(\"refractionSampler\", this._refractionRTT);\n            this._activeEffect.setTexture(\"reflectionSampler\", this._reflectionRTT);\n        }\n\n        var wrvp = this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(scene.getProjectionMatrix());\n\n        // Add delta time. Prevent adding delta time if it hasn't changed.\n        let deltaTime = scene.getEngine().getDeltaTime();\n        if (deltaTime !== this._lastDeltaTime) {\n            this._lastDeltaTime = deltaTime;\n            this._lastTime += this._lastDeltaTime;\n        }\n\n        this._activeEffect.setMatrix(\"worldReflectionViewProjection\", wrvp);\n        this._activeEffect.setVector2(\"windDirection\", this.windDirection);\n        this._activeEffect.setFloat(\"waveLength\", this.waveLength);\n        this._activeEffect.setFloat(\"time\", this._lastTime / 100000);\n        this._activeEffect.setFloat(\"windForce\", this.windForce);\n        this._activeEffect.setFloat(\"waveHeight\", this.waveHeight);\n        this._activeEffect.setFloat(\"bumpHeight\", this.bumpHeight);\n        this._activeEffect.setColor4(\"waterColor\", this.waterColor, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor\", this.colorBlendFactor);\n        this._activeEffect.setColor4(\"waterColor2\", this.waterColor2, 1.0);\n        this._activeEffect.setFloat(\"colorBlendFactor2\", this.colorBlendFactor2);\n        this._activeEffect.setFloat(\"waveSpeed\", this.waveSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    private _createRenderTargets(scene: Scene, renderTargetSize: Vector2): void {\n        // Render targets\n        this._refractionRTT = new RenderTargetTexture(name + \"_refraction\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._refractionRTT.wrapU = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._refractionRTT.wrapV = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._refractionRTT.ignoreCameraViewport = true;\n\n        this._reflectionRTT = new RenderTargetTexture(name + \"_reflection\", { width: renderTargetSize.x, height: renderTargetSize.y }, scene, false, true);\n        this._reflectionRTT.wrapU = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._reflectionRTT.wrapV = BABYLON.Texture.MIRROR_ADDRESSMODE;\n        this._reflectionRTT.ignoreCameraViewport = true;\n\n        var isVisible: boolean;\n        var clipPlane: Nullable<Plane> = null;\n        var savedViewMatrix: Matrix;\n        var mirrorMatrix = Matrix.Zero();\n\n        this._refractionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n            // Clip plane\n            clipPlane = scene.clipPlane;\n\n            var positiony = this._mesh ? this._mesh.position.y : 0.0;\n            scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony + 0.05, 0), new Vector3(0, 1, 0));\n        };\n\n        this._refractionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            scene.clipPlane = clipPlane;\n        };\n\n        this._reflectionRTT.onBeforeRender = () => {\n            if (this._mesh) {\n                isVisible = this._mesh.isVisible;\n                this._mesh.isVisible = false;\n            }\n\n            // Clip plane\n            clipPlane = scene.clipPlane;\n\n            var positiony = this._mesh ? this._mesh.position.y : 0.0;\n            scene.clipPlane = Plane.FromPositionAndNormal(new Vector3(0, positiony - 0.05, 0), new Vector3(0, -1, 0));\n\n            // Transform\n            Matrix.ReflectionToRef(scene.clipPlane, mirrorMatrix);\n            savedViewMatrix = scene.getViewMatrix();\n\n            mirrorMatrix.multiplyToRef(savedViewMatrix, this._reflectionTransform);\n            scene.setTransformMatrix(this._reflectionTransform, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = false;\n            scene._mirroredCameraPosition = Vector3.TransformCoordinates((<Camera>scene.activeCamera).position, mirrorMatrix);\n        };\n\n        this._reflectionRTT.onAfterRender = () => {\n            if (this._mesh) {\n                this._mesh.isVisible = isVisible;\n            }\n\n            // Clip plane\n            scene.clipPlane = clipPlane;\n\n            // Transform\n            scene.setTransformMatrix(savedViewMatrix, scene.getProjectionMatrix());\n            scene.getEngine().cullBackFaces = true;\n            scene._mirroredCameraPosition = null;\n        };\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.bumpTexture && this.bumpTexture.animations && this.bumpTexture.animations.length > 0) {\n            results.push(this.bumpTexture);\n        }\n        if (this._reflectionRTT && this._reflectionRTT.animations && this._reflectionRTT.animations.length > 0) {\n            results.push(this._reflectionRTT);\n        }\n        if (this._refractionRTT && this._refractionRTT.animations && this._refractionRTT.animations.length > 0) {\n            results.push(this._refractionRTT);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.bumpTexture) {\n            this.bumpTexture.dispose();\n        }\n\n        var index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._refractionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n        index = -1;\n        index = this.getScene().customRenderTargets.indexOf(<RenderTargetTexture>this._reflectionRTT);\n        if (index != -1) {\n            this.getScene().customRenderTargets.splice(index, 1);\n        }\n\n        if (this._reflectionRTT) {\n            this._reflectionRTT.dispose();\n        }\n        if (this._refractionRTT) {\n            this._refractionRTT.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): WaterMaterial {\n        return SerializationHelper.Clone(() => new WaterMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.WaterMaterial\";\n\n        serializationObject.renderList = [];\n        if (this._refractionRTT && this._refractionRTT.renderList) {\n            for (var i = 0; i < this._refractionRTT.renderList.length; i++) {\n                serializationObject.renderList.push(this._refractionRTT.renderList[i].id);\n            }\n        }\n\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"WaterMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): WaterMaterial {\n        var mat = SerializationHelper.Parse(() => new WaterMaterial(source.name, scene), source, scene, rootUrl);\n        mat._waitingRenderList = source.renderList;\n\n        return mat;\n    }\n\n    public static CreateDefaultMesh(name: string, scene: Scene): Mesh {\n        var mesh = Mesh.CreateGround(name, 512, 512, 32, scene, false);\n        return mesh;\n    }\n}","module.exports = \"#ifdef LOGARITHMICDEPTH\\n#extension GL_EXT_frag_depth : enable\\n#endif\\nprecision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n#ifdef SPECULARTERM\\nuniform vec4 vSpecularColor;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef BUMP\\nvarying vec2 vNormalUV;\\nvarying vec2 vNormalUV2;\\nuniform sampler2D normalSampler;\\nuniform vec2 vNormalInfos;\\n#endif\\nuniform sampler2D refractionSampler;\\nuniform sampler2D reflectionSampler;\\n\\nconst float LOG2=1.442695;\\nuniform vec3 cameraPosition;\\nuniform vec4 waterColor;\\nuniform float colorBlendFactor;\\nuniform vec4 waterColor2;\\nuniform float colorBlendFactor2;\\nuniform float bumpHeight;\\nuniform float time;\\n\\nvarying vec3 vRefractionMapTexCoord;\\nvarying vec3 vReflectionMapTexCoord;\\nvarying vec3 vPosition;\\n#include<clipPlaneFragmentDeclaration>\\n#include<logDepthDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef BUMP\\n#ifdef BUMPSUPERIMPOSE\\nbaseColor=0.6*texture2D(normalSampler,vNormalUV)+0.4*texture2D(normalSampler,vec2(vNormalUV2.x,vNormalUV2.y));\\n#else\\nbaseColor=texture2D(normalSampler,vNormalUV);\\n#endif\\nvec3 bumpColor=baseColor.rgb;\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\nbaseColor.rgb*=vNormalInfos.y;\\n#else\\nvec3 bumpColor=vec3(1.0);\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec2 perturbation=bumpHeight*(baseColor.rg-0.5);\\n#ifdef BUMPAFFECTSREFLECTION\\nvec3 normalW=normalize(vNormalW+vec3(perturbation.x*8.0,0.0,perturbation.y*8.0));\\nif (normalW.y<0.0) {\\nnormalW.y=-normalW.y;\\n}\\n#else\\nvec3 normalW=normalize(vNormalW);\\n#endif\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\nvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\\n#endif\\n#ifdef FRESNELSEPARATE\\n#ifdef REFLECTION\\n\\nvec3 eyeVector=normalize(vEyePosition-vPosition);\\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation*0.5,0.0,1.0);\\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\\nvec2 projectedReflectionTexCoords=clamp(vec2(\\nvReflectionMapTexCoord.x/vReflectionMapTexCoord.z+perturbation.x*0.3,\\nvReflectionMapTexCoord.y/vReflectionMapTexCoord.z+perturbation.y\\n),0.0,1.0);\\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\\nvec3 upVector=vec3(0.0,1.0,0.0);\\nfloat fresnelTerm=clamp(abs(pow(dot(eyeVector,upVector),3.0)),0.05,0.65);\\nfloat IfresnelTerm=1.0-fresnelTerm;\\nrefractiveColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*refractiveColor;\\nreflectiveColor=IfresnelTerm*colorBlendFactor2*waterColor+(1.0-colorBlendFactor2*IfresnelTerm)*reflectiveColor;\\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*IfresnelTerm;\\nbaseColor=combinedColor;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularBase=vec3(0.,0.,0.);\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\n#else \\n#ifdef REFLECTION\\n\\nvec3 eyeVector=normalize(vEyePosition-vPosition);\\nvec2 projectedRefractionTexCoords=clamp(vRefractionMapTexCoord.xy/vRefractionMapTexCoord.z+perturbation,0.0,1.0);\\nvec4 refractiveColor=texture2D(refractionSampler,projectedRefractionTexCoords);\\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\\nvec3 upVector=vec3(0.0,1.0,0.0);\\nfloat fresnelTerm=max(dot(eyeVector,upVector),0.0);\\nvec4 combinedColor=refractiveColor*fresnelTerm+reflectiveColor*(1.0-fresnelTerm);\\nbaseColor=colorBlendFactor*waterColor+(1.0-colorBlendFactor)*combinedColor;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularBase=vec3(0.,0.,0.);\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\nvec3 finalDiffuse=clamp(baseColor.rgb,0.0,1.0);\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\n#endif\\n\\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\\n#include<logDepthFragment>\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef BUMP\\nvarying vec2 vNormalUV;\\n#ifdef BUMPSUPERIMPOSE\\nvarying vec2 vNormalUV2;\\n#endif\\nuniform mat4 normalMatrix;\\nuniform vec2 vNormalInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<logDepthDeclaration>\\n\\nuniform mat4 worldReflectionViewProjection;\\nuniform vec2 windDirection;\\nuniform float waveLength;\\nuniform float time;\\nuniform float windForce;\\nuniform float waveHeight;\\nuniform float waveSpeed;\\n\\nvarying vec3 vPosition;\\nvarying vec3 vRefractionMapTexCoord;\\nvarying vec3 vReflectionMapTexCoord;\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef BUMP\\nif (vNormalInfos.x == 0.)\\n{\\nvNormalUV=vec2(normalMatrix*vec4((uv*1.0)/waveLength+time*windForce*windDirection,1.0,0.0));\\n#ifdef BUMPSUPERIMPOSE\\nvNormalUV2=vec2(normalMatrix*vec4((uv*0.721)/waveLength+time*1.2*windForce*windDirection,1.0,0.0));\\n#endif\\n}\\nelse\\n{\\nvNormalUV=vec2(normalMatrix*vec4((uv2*1.0)/waveLength+time*windForce*windDirection ,1.0,0.0));\\n#ifdef BUMPSUPERIMPOSE\\nvNormalUV2=vec2(normalMatrix*vec4((uv2*0.721)/waveLength+time*1.2*windForce*windDirection ,1.0,0.0));\\n#endif\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\nvec3 p=position;\\nfloat newY=(sin(((p.x/0.05)+time*waveSpeed))*waveHeight*windDirection.x*5.0)\\n+(cos(((p.z/0.05)+time*waveSpeed))*waveHeight*windDirection.y*5.0);\\np.y+=abs(newY);\\ngl_Position=viewProjection*finalWorld*vec4(p,1.0);\\n#ifdef REFLECTION\\nworldPos=viewProjection*finalWorld*vec4(p,1.0);\\n\\nvPosition=position;\\nvRefractionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\\nvRefractionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\\nvRefractionMapTexCoord.z=worldPos.w;\\nworldPos=worldReflectionViewProjection*vec4(position,1.0);\\nvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\\nvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\\nvReflectionMapTexCoord.z=worldPos.w;\\n#endif\\n#include<logDepthVertex>\\n}\\n\""],"sourceRoot":""}