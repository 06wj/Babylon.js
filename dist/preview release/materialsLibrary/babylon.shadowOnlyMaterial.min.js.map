{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/shadowOnly/index.ts","webpack://MATLIB/./legacy-shadowOnly.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/shadowOnly/shadowOnlyMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/shadowOnly/shadowOnly.fragment.fx","webpack://MATLIB/../src/shadowOnly/shadowOnly.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","ShadowOnlyMaterialDefines","_super","_this","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","POINTSIZE","FOG","NORMAL","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","rebuild","__extends","MaterialDefines","ShadowOnlyMaterial","scene","shadowColor","Color3","Black","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","_activeLight","light","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_i","_a","_lightSources","length","shadowEnabled","lightPosition","indexOf","splice","MaterialHelper","PrepareDefinesForFrameBoundValues","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","Array","uniformBuffers","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","isReady","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","BindClipPlane","setFloat","pointSize","alpha","setColor3","BindEyePosition","lightsEnabled","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","PushMaterial"],"mappings":"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","file":"babylon.shadowOnlyMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./shadowOnlyMaterial\";","import * as MatLib from \"../src/shadowOnly/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in MatLib) {\r\n        (<any>globalObject).BABYLON[key] = (<any>MatLib)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/shadowOnly/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, IShadowLight, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"shadowOnlyPixelShader\"] = require(\"./shadowOnly.fragment.fx\");\r\nEffect.ShadersStore[\"shadowOnlyVertexShader\"] = require(\"./shadowOnly.vertex.fx\");\r\n\r\nclass ShadowOnlyMaterialDefines extends MaterialDefines {\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class ShadowOnlyMaterial extends PushMaterial {\r\n    private _renderId: number;\r\n    private _activeLight: IShadowLight;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public shadowColor = BABYLON.Color3.Black();\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public get activeLight(): IShadowLight {\r\n        return this._activeLight;\r\n    }\r\n\r\n    public set activeLight(light: IShadowLight) {\r\n        this._activeLight = light;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new ShadowOnlyMaterialDefines();\r\n        }\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Ensure that active light is the first shadow light\r\n        if (this._activeLight) {\r\n            for (var light of mesh._lightSources) {\r\n                if (light.shadowEnabled) {\r\n                    if (this._activeLight === light) {\r\n                        break; // We are good\r\n                    }\r\n\r\n                    var lightPosition = mesh._lightSources.indexOf(this._activeLight);\r\n\r\n                    if (lightPosition !== -1) {\r\n                        mesh._lightSources.splice(lightPosition, 1);\r\n                        mesh._lightSources.splice(0, 0, this._activeLight);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, 1);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, 1);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"shadowOnly\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\", \"alpha\", \"shadowColor\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\"\r\n            ];\r\n            var samplers = new Array<string>();\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 1\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 1 }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <ShadowOnlyMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            this._activeEffect.setFloat(\"alpha\", this.alpha);\r\n            this._activeEffect.setColor3(\"shadowColor\", this.shadowColor);\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, 1);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public clone(name: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Clone<ShadowOnlyMaterial>(() => new ShadowOnlyMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShadowOnlyMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"ShadowOnlyMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShadowOnlyMaterial {\r\n        return SerializationHelper.Parse(() => new ShadowOnlyMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform float alpha;\\nuniform vec3 shadowColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0..1]\\n\\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\""],"sourceRoot":""}