{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/cell/index.ts","webpack://MATLIB/./legacy-cell.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/cell/cellMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/cell/cell.fragment.fx","webpack://MATLIB/../src/cell/cell.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","postProcessLibrary","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","CellMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","POINTSIZE","FOG","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","NDOTL","CUSTOMUSERLIGHTING","CELLBASIC","DEPTHPREPASS","rebuild","__extends","MaterialDefines","CellMaterial","scene","diffuseColor","Color3","_computeHighLevel","_disableLighting","_maxSimultaneousLights","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","StandardMaterial","DiffuseTextureEnabled","isReady","computeHighLevel","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","console","log","BindFogParameters","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","getClassName","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","source","rootUrl","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial"],"mappings":"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","file":"babylon.cellMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./cellMaterial\";","import * as postProcessLibrary from \"../src/cell/index\";\r\n\r\n/**\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in postProcessLibrary) {\r\n        (<any>globalObject).BABYLON[key] = (<any>postProcessLibrary)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/cell/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, expandToProperty, BaseTexture, serializeAsColor3, Scene, Color3, serialize, AbstractMesh, Nullable, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\"\r\n\r\nEffect.ShadersStore[\"cellPixelShader\"] = require(\"./cell.fragment.fx\");\r\nEffect.ShadersStore[\"cellVertexShader\"] = require(\"./cell.vertex.fx\");\r\n\r\nclass CellMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public NDOTL = true;\r\n    public CUSTOMUSERLIGHTING = true;\r\n    public CELLBASIC = true;\r\n    public DEPTHPREPASS = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class CellMaterial extends PushMaterial {\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serialize(\"computeHighLevel\")\r\n    public _computeHighLevel: boolean = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public computeHighLevel: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new CellMaterialDefines();\r\n        }\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // High level\r\n        defines.CELLBASIC = !this.computeHighLevel;\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            var shaderName = \"cell\";\r\n            var join = defines.toString();\r\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\"\r\n            ];\r\n            var samplers = [\"diffuseSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights - 1 }\r\n                }, engine), defines);\r\n\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <CellMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                this._activeEffect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n\r\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this._diffuseTexture.getTextureMatrix());\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        // Lights\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        console.log(\"TOTO\")\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return this._diffuseTexture === texture;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._diffuseTexture) {\r\n            this._diffuseTexture.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"CellMaterial\";\r\n    }\r\n\r\n    public clone(name: string): CellMaterial {\r\n        return SerializationHelper.Clone<CellMaterial>(() => new CellMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.CellMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): CellMaterial {\r\n        return SerializationHelper.Parse(() => new CellMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\n\\nvec3 computeCustomDiffuseLighting(lightingInfo info,vec3 diffuseBase,float shadow)\\n{\\ndiffuseBase=info.diffuse*shadow;\\n#ifdef CELLBASIC\\nfloat level=1.0;\\nif (info.ndl<0.5)\\nlevel=0.5;\\ndiffuseBase.rgb*vec3(level,level,level);\\n#else\\nfloat ToonThresholds[4];\\nToonThresholds[0]=0.95;\\nToonThresholds[1]=0.5;\\nToonThresholds[2]=0.2;\\nToonThresholds[3]=0.03;\\nfloat ToonBrightnessLevels[5];\\nToonBrightnessLevels[0]=1.0;\\nToonBrightnessLevels[1]=0.8;\\nToonBrightnessLevels[2]=0.6;\\nToonBrightnessLevels[3]=0.35;\\nToonBrightnessLevels[4]=0.2;\\nif (info.ndl>ToonThresholds[0])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[0];\\n}\\nelse if (info.ndl>ToonThresholds[1])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[1];\\n}\\nelse if (info.ndl>ToonThresholds[2])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[2];\\n}\\nelse if (info.ndl>ToonThresholds[3])\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[3];\\n}\\nelse\\n{\\ndiffuseBase.rgb*=ToonBrightnessLevels[4];\\n}\\n#endif\\nreturn max(diffuseBase,vec3(0.2));\\n}\\nvoid main(void)\\n{\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n\\nlightingInfo info;\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif \\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\""],"sourceRoot":""}