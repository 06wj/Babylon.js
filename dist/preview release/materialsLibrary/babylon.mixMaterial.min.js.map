{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/mix/index.ts","webpack://MATLIB/./legacy-mix.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/mix/mixMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/mix/mix.fragment.fx","webpack://MATLIB/../src/mix/mix.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","MixMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","DEPTHPREPASS","POINTSIZE","FOG","SPECULARTERM","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","MIXMAP2","rebuild","__extends","MaterialDefines","MixMaterial","scene","diffuseColor","Color3","specularColor","specularPower","_disableLighting","_maxSimultaneousLights","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","texturesEnabled","StandardMaterial","DiffuseTextureEnabled","_mixTexture1","isReady","_needUVs","_mixTexture2","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","maxSimultaneousLights","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","_diffuseTexture1","uScale","vScale","_diffuseTexture2","_diffuseTexture3","_diffuseTexture4","_diffuseTexture5","_diffuseTexture6","_diffuseTexture7","_diffuseTexture8","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial"],"mappings":"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","file":"babylon.mixMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./mixMaterial\";","import * as MatLib from \"../src/mix/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in MatLib) {\r\n        (<any>globalObject).BABYLON[key] = (<any>MatLib)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/mix/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, Texture, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\r\n\r\nEffect.ShadersStore[\"mixPixelShader\"] = require(\"./mix.fragment.fx\");\r\nEffect.ShadersStore[\"mixVertexShader\"] = require(\"./mix.vertex.fx\");\r\n\r\nclass MixMaterialDefines extends MaterialDefines {\r\n    public DIFFUSE = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public NORMAL = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public INSTANCES = false;\r\n    public MIXMAP2 = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nexport class MixMaterial extends PushMaterial {\r\n    /**\r\n     * Mix textures\r\n     */\r\n\r\n    @serializeAsTexture(\"mixTexture1\")\r\n    private _mixTexture1: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture1: BaseTexture;\r\n\r\n    @serializeAsTexture(\"mixTexture2\")\r\n    private _mixTexture2: BaseTexture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public mixTexture2: BaseTexture;\r\n\r\n    /**\r\n     * Diffuse textures\r\n     */\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture1: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture1: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture2: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture2: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture3: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture3: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture4: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture4: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture1\")\r\n    private _diffuseTexture5: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture5: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture2\")\r\n    private _diffuseTexture6: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture6: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture3\")\r\n    private _diffuseTexture7: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture7: Texture;\r\n\r\n    @serializeAsTexture(\"diffuseTexture4\")\r\n    private _diffuseTexture8: Texture;\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public diffuseTexture8: Texture;\r\n\r\n    /**\r\n     * Uniforms\r\n     */\r\n\r\n    @serializeAsColor3()\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    @serializeAsColor3()\r\n    public specularColor = new Color3(0, 0, 0);\r\n\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    private _renderId: number;\r\n\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return (this.alpha < 1.0);\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    // Methods\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new MixMaterialDefines();\r\n        }\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        var scene = this.getScene();\r\n\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (this._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (StandardMaterial.DiffuseTextureEnabled) {\r\n                if (this._mixTexture1) {\r\n                    if (!this._mixTexture1.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.DIFFUSE = true;\r\n                    }\r\n                }\r\n                if (this._mixTexture2) {\r\n                    if (!this._mixTexture2.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        defines.MIXMAP2 = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            // Fallbacks\r\n            var fallbacks = new EffectFallbacks();\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this.maxSimultaneousLights);\r\n\r\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.UV1) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (defines.UV2) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n\r\n            // Legacy browser patch\r\n            var shaderName = \"mix\";\r\n            var join = defines.toString();\r\n            var uniforms = [\r\n                \"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\", \"vSpecularColor\",\r\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n                \"vTextureInfos\",\r\n                \"mBones\",\r\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"textureMatrix\",\r\n                \"diffuse1Infos\", \"diffuse2Infos\", \"diffuse3Infos\", \"diffuse4Infos\",\r\n                \"diffuse5Infos\", \"diffuse6Infos\", \"diffuse7Infos\", \"diffuse8Infos\"\r\n            ];\r\n            var samplers = [\r\n                \"mixMap1Sampler\", \"mixMap2Sampler\",\r\n                \"diffuse1Sampler\", \"diffuse2Sampler\", \"diffuse3Sampler\", \"diffuse4Sampler\",\r\n                \"diffuse5Sampler\", \"diffuse6Sampler\", \"diffuse7Sampler\", \"diffuse8Sampler\"\r\n            ];\r\n\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this.maxSimultaneousLights\r\n            });\r\n\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\r\n                }, engine), defines);\r\n        }\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <MixMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            // Textures\r\n            if (this._mixTexture1) {\r\n                this._activeEffect.setTexture(\"mixMap1Sampler\", this._mixTexture1);\r\n                this._activeEffect.setFloat2(\"vTextureInfos\", this._mixTexture1.coordinatesIndex, this._mixTexture1.level);\r\n                this._activeEffect.setMatrix(\"textureMatrix\", this._mixTexture1.getTextureMatrix());\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture1) {\r\n                        this._activeEffect.setTexture(\"diffuse1Sampler\", this._diffuseTexture1);\r\n                        this._activeEffect.setFloat2(\"diffuse1Infos\", this._diffuseTexture1.uScale, this._diffuseTexture1.vScale);\r\n                    }\r\n                    if (this._diffuseTexture2) {\r\n                        this._activeEffect.setTexture(\"diffuse2Sampler\", this._diffuseTexture2);\r\n                        this._activeEffect.setFloat2(\"diffuse2Infos\", this._diffuseTexture2.uScale, this._diffuseTexture2.vScale);\r\n                    }\r\n                    if (this._diffuseTexture3) {\r\n                        this._activeEffect.setTexture(\"diffuse3Sampler\", this._diffuseTexture3);\r\n                        this._activeEffect.setFloat2(\"diffuse3Infos\", this._diffuseTexture3.uScale, this._diffuseTexture3.vScale);\r\n                    }\r\n                    if (this._diffuseTexture4) {\r\n                        this._activeEffect.setTexture(\"diffuse4Sampler\", this._diffuseTexture4);\r\n                        this._activeEffect.setFloat2(\"diffuse4Infos\", this._diffuseTexture4.uScale, this._diffuseTexture4.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._mixTexture2) {\r\n                this._activeEffect.setTexture(\"mixMap2Sampler\", this._mixTexture2);\r\n\r\n                if (StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (this._diffuseTexture5) {\r\n                        this._activeEffect.setTexture(\"diffuse5Sampler\", this._diffuseTexture5);\r\n                        this._activeEffect.setFloat2(\"diffuse5Infos\", this._diffuseTexture5.uScale, this._diffuseTexture5.vScale);\r\n                    }\r\n                    if (this._diffuseTexture6) {\r\n                        this._activeEffect.setTexture(\"diffuse6Sampler\", this._diffuseTexture6);\r\n                        this._activeEffect.setFloat2(\"diffuse6Infos\", this._diffuseTexture6.uScale, this._diffuseTexture6.vScale);\r\n                    }\r\n                    if (this._diffuseTexture7) {\r\n                        this._activeEffect.setTexture(\"diffuse7Sampler\", this._diffuseTexture7);\r\n                        this._activeEffect.setFloat2(\"diffuse7Infos\", this._diffuseTexture7.uScale, this._diffuseTexture7.vScale);\r\n                    }\r\n                    if (this._diffuseTexture8) {\r\n                        this._activeEffect.setTexture(\"diffuse8Sampler\", this._diffuseTexture8);\r\n                        this._activeEffect.setFloat2(\"diffuse8Infos\", this._diffuseTexture8.uScale, this._diffuseTexture8.vScale);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Point size\r\n            if (this.pointsCloud) {\r\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\r\n            }\r\n\r\n            MaterialHelper.BindEyePosition(effect, scene);\r\n        }\r\n\r\n        this._activeEffect.setColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha * mesh.visibility);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            this._activeEffect.setColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n        }\r\n\r\n        if (scene.lightsEnabled && !this.disableLighting) {\r\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this.maxSimultaneousLights);\r\n        }\r\n\r\n        // View\r\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n\r\n        // Fog\r\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._mixTexture1 && this._mixTexture1.animations && this._mixTexture1.animations.length > 0) {\r\n            results.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._mixTexture2 && this._mixTexture2.animations && this._mixTexture2.animations.length > 0) {\r\n            results.push(this._mixTexture2);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1) {\r\n            activeTextures.push(this._mixTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture1) {\r\n            activeTextures.push(this._diffuseTexture1);\r\n        }\r\n\r\n        if (this._diffuseTexture2) {\r\n            activeTextures.push(this._diffuseTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture3) {\r\n            activeTextures.push(this._diffuseTexture3);\r\n        }\r\n\r\n        if (this._diffuseTexture4) {\r\n            activeTextures.push(this._diffuseTexture4);\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2) {\r\n            activeTextures.push(this._mixTexture2);\r\n        }\r\n\r\n        if (this._diffuseTexture5) {\r\n            activeTextures.push(this._diffuseTexture5);\r\n        }\r\n\r\n        if (this._diffuseTexture6) {\r\n            activeTextures.push(this._diffuseTexture6);\r\n        }\r\n\r\n        if (this._diffuseTexture7) {\r\n            activeTextures.push(this._diffuseTexture7);\r\n        }\r\n\r\n        if (this._diffuseTexture8) {\r\n            activeTextures.push(this._diffuseTexture8);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 1\r\n        if (this._mixTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture1 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture3 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture4 === texture) {\r\n            return true;\r\n        }\r\n\r\n        // Mix map 2\r\n        if (this._mixTexture2 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture5 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture6 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture7 === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture8 === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        if (this._mixTexture1) {\r\n            this._mixTexture1.dispose();\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): MixMaterial {\r\n        return SerializationHelper.Clone(() => new MixMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.MixMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"MixMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MixMaterial {\r\n        return SerializationHelper.Parse(() => new MixMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n#ifdef SPECULARTERM\\nuniform vec4 vSpecularColor;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform sampler2D mixMap1Sampler;\\nuniform vec2 vTextureInfos;\\n#ifdef MIXMAP2\\nuniform sampler2D mixMap2Sampler;\\n#endif\\nuniform sampler2D diffuse1Sampler;\\nuniform sampler2D diffuse2Sampler;\\nuniform sampler2D diffuse3Sampler;\\nuniform sampler2D diffuse4Sampler;\\nuniform vec2 diffuse1Infos;\\nuniform vec2 diffuse2Infos;\\nuniform vec2 diffuse3Infos;\\nuniform vec2 diffuse4Infos;\\n#ifdef MIXMAP2\\nuniform sampler2D diffuse5Sampler;\\nuniform sampler2D diffuse6Sampler;\\nuniform sampler2D diffuse7Sampler;\\nuniform sampler2D diffuse8Sampler;\\nuniform vec2 diffuse5Infos;\\nuniform vec2 diffuse6Infos;\\nuniform vec2 diffuse7Infos;\\nuniform vec2 diffuse8Infos;\\n#endif\\n#endif\\n\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nvoid main(void) {\\n\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 finalMixColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n#ifdef MIXMAP2\\nvec4 mixColor2=vec4(1.,1.,1.,1.);\\n#endif\\n#ifdef SPECULARTERM\\nfloat glossiness=vSpecularColor.a;\\nvec3 specularColor=vSpecularColor.rgb;\\n#else\\nfloat glossiness=0.;\\n#endif\\n\\nfloat alpha=vDiffuseColor.a;\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef DIFFUSE\\nvec4 mixColor=texture2D(mixMap1Sampler,vTextureUV);\\n#include<depthPrePass>\\nmixColor.rgb*=vTextureInfos.y;\\nvec4 diffuse1Color=texture2D(diffuse1Sampler,vTextureUV*diffuse1Infos);\\nvec4 diffuse2Color=texture2D(diffuse2Sampler,vTextureUV*diffuse2Infos);\\nvec4 diffuse3Color=texture2D(diffuse3Sampler,vTextureUV*diffuse3Infos);\\nvec4 diffuse4Color=texture2D(diffuse4Sampler,vTextureUV*diffuse4Infos);\\ndiffuse1Color.rgb*=mixColor.r;\\ndiffuse2Color.rgb=mix(diffuse1Color.rgb,diffuse2Color.rgb,mixColor.g);\\ndiffuse3Color.rgb=mix(diffuse2Color.rgb,diffuse3Color.rgb,mixColor.b);\\nfinalMixColor.rgb=mix(diffuse3Color.rgb,diffuse4Color.rgb,1.0-mixColor.a);\\n#ifdef MIXMAP2\\nmixColor=texture2D(mixMap2Sampler,vTextureUV);\\nmixColor.rgb*=vTextureInfos.y;\\nvec4 diffuse5Color=texture2D(diffuse5Sampler,vTextureUV*diffuse5Infos);\\nvec4 diffuse6Color=texture2D(diffuse6Sampler,vTextureUV*diffuse6Infos);\\nvec4 diffuse7Color=texture2D(diffuse7Sampler,vTextureUV*diffuse7Infos);\\nvec4 diffuse8Color=texture2D(diffuse8Sampler,vTextureUV*diffuse8Infos);\\ndiffuse5Color.rgb=mix(finalMixColor.rgb,diffuse5Color.rgb,mixColor.r);\\ndiffuse6Color.rgb=mix(diffuse5Color.rgb,diffuse6Color.rgb,mixColor.g);\\ndiffuse7Color.rgb=mix(diffuse6Color.rgb,diffuse7Color.rgb,mixColor.b);\\nfinalMixColor.rgb=mix(diffuse7Color.rgb,diffuse8Color.rgb,1.0-mixColor.a);\\n#endif\\n#endif\\n#ifdef VERTEXCOLOR\\nfinalMixColor.rgb*=vColor.rgb;\\n#endif\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\n#ifdef SPECULARTERM\\nvec3 specularBase=vec3(0.,0.,0.);\\n#endif\\n#include<lightFragment>[0..maxSimultaneousLights]\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\n#ifdef SPECULARTERM\\nvec3 finalSpecular=specularBase*specularColor;\\n#else\\nvec3 finalSpecular=vec3(0.0);\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor*finalMixColor.rgb,0.0,1.0);\\n\\nvec4 color=vec4(finalDiffuse+finalSpecular,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\\n\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vTextureUV;\\nuniform mat4 textureMatrix;\\nuniform vec2 vTextureInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\nvPositionW=vec3(worldPos);\\n#ifdef NORMAL\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vTextureInfos.x == 0.)\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvTextureUV=vec2(textureMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\\n\""],"sourceRoot":""}