{"version":3,"sources":["webpack://MATLIB/webpack/universalModuleDefinition","webpack://MATLIB/webpack/bootstrap","webpack://MATLIB/../src/lava/index.ts","webpack://MATLIB/./legacy-lava.ts","webpack://MATLIB/(webpack)/buildin/global.js","webpack://MATLIB/../src/lava/lavaMaterial.ts","webpack://MATLIB/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://MATLIB/../src/lava/lava.fragment.fx","webpack://MATLIB/../src/lava/lava.vertex.fx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","MatLib","globalObject","global","undefined","BABYLON","g","this","Function","eval","e","babylonjs_1","Effect","ShadersStore","LavaMaterialDefines","_super","_this","DIFFUSE","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","ALPHATEST","DEPTHPREPASS","POINTSIZE","FOG","LIGHT0","LIGHT1","LIGHT2","LIGHT3","SPOTLIGHT0","SPOTLIGHT1","SPOTLIGHT2","SPOTLIGHT3","HEMILIGHT0","HEMILIGHT1","HEMILIGHT2","HEMILIGHT3","DIRLIGHT0","DIRLIGHT1","DIRLIGHT2","DIRLIGHT3","POINTLIGHT0","POINTLIGHT1","POINTLIGHT2","POINTLIGHT3","SHADOW0","SHADOW1","SHADOW2","SHADOW3","SHADOWS","SHADOWESM0","SHADOWESM1","SHADOWESM2","SHADOWESM3","SHADOWPOISSON0","SHADOWPOISSON1","SHADOWPOISSON2","SHADOWPOISSON3","SHADOWPCF0","SHADOWPCF1","SHADOWPCF2","SHADOWPCF3","SHADOWPCSS0","SHADOWPCSS1","SHADOWPCSS2","SHADOWPCSS3","NORMAL","UV1","UV2","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","INSTANCES","UNLIT","rebuild","__extends","MaterialDefines","LavaMaterial","scene","speed","movingSpeed","lowFrequencySpeed","fogDensity","_lastTime","diffuseColor","Color3","_disableLighting","_unlit","_maxSimultaneousLights","_scaledDiffuse","needAlphaBlending","alpha","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","mesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","getScene","checkReadyOnEveryCall","_renderId","getRenderId","engine","getEngine","_areTexturesDirty","_needUVs","texturesEnabled","_diffuseTexture","StandardMaterial","DiffuseTextureEnabled","isReady","MaterialHelper","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","_needNormals","PrepareDefinesForLights","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","isDirty","markAsProcessed","resetCachedMaterial","fallbacks","EffectFallbacks","addFallback","HandleFallbacksForShadows","addCPUSkinningFallback","attribs","VertexBuffer","PositionKind","push","NormalKind","UVKind","UV2Kind","ColorKind","PrepareAttributesForBones","PrepareAttributesForInstances","join","toString","uniforms","samplers","uniformBuffers","Array","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","setEffect","createEffect","attributes","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","getTransformMatrix","BindBonesParameters","_mustRebind","diffuseTexture","setTexture","setFloat2","coordinatesIndex","level","getTextureMatrix","noiseTexture","BindClipPlane","setFloat","pointSize","BindEyePosition","setColor4","visibility","lightsEnabled","disableLighting","BindLights","applyFog","fogMode","Scene","FOGMODE_NONE","getViewMatrix","BindFogParameters","getDeltaTime","fogColor","Black","setColor3","_afterBind","getAnimatables","results","animations","length","getActiveTextures","activeTextures","hasTexture","texture","dispose","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","source","rootUrl","__decorate","serializeAsTexture","expandToProperty","serializeAsColor3","PushMaterial"],"mappings":"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","file":"babylon.lavaMaterial.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-materials\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-materials\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"MATLIB\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from \"./lavaMaterial\";","import * as MatLib from \"../src/lava/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (var key in MatLib) {\r\n        (<any>globalObject).BABYLON[key] = (<any>MatLib)[key];\r\n    }\r\n}\r\n\r\nexport * from \"../src/lava/index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Effect, MaterialDefines, PushMaterial, serializeAsTexture, BaseTexture, expandToProperty, serializeAsColor3, Color3, serialize, Scene, Nullable, AbstractMesh, SubMesh, StandardMaterial, MaterialHelper, EffectFallbacks, VertexBuffer, EffectCreationOptions, Matrix, Mesh, IAnimatable, SerializationHelper } from \"babylonjs\";\n\nEffect.ShadersStore[\"lavaPixelShader\"] = require(\"./lava.fragment.fx\");\nEffect.ShadersStore[\"lavaVertexShader\"] = require(\"./lava.vertex.fx\");\n\nclass LavaMaterialDefines extends MaterialDefines {\n    public DIFFUSE = false;\n    public CLIPPLANE = false;\n    public CLIPPLANE2 = false;\n    public CLIPPLANE3 = false;\n    public CLIPPLANE4 = false;\n    public ALPHATEST = false;\n    public DEPTHPREPASS = false;\n    public POINTSIZE = false;\n    public FOG = false;\n    public LIGHT0 = false;\n    public LIGHT1 = false;\n    public LIGHT2 = false;\n    public LIGHT3 = false;\n    public SPOTLIGHT0 = false;\n    public SPOTLIGHT1 = false;\n    public SPOTLIGHT2 = false;\n    public SPOTLIGHT3 = false;\n    public HEMILIGHT0 = false;\n    public HEMILIGHT1 = false;\n    public HEMILIGHT2 = false;\n    public HEMILIGHT3 = false;\n    public DIRLIGHT0 = false;\n    public DIRLIGHT1 = false;\n    public DIRLIGHT2 = false;\n    public DIRLIGHT3 = false;\n    public POINTLIGHT0 = false;\n    public POINTLIGHT1 = false;\n    public POINTLIGHT2 = false;\n    public POINTLIGHT3 = false;\n    public SHADOW0 = false;\n    public SHADOW1 = false;\n    public SHADOW2 = false;\n    public SHADOW3 = false;\n    public SHADOWS = false;\n    public SHADOWESM0 = false;\n    public SHADOWESM1 = false;\n    public SHADOWESM2 = false;\n    public SHADOWESM3 = false;\n    public SHADOWPOISSON0 = false;\n    public SHADOWPOISSON1 = false;\n    public SHADOWPOISSON2 = false;\n    public SHADOWPOISSON3 = false;\n    public SHADOWPCF0 = false;\n    public SHADOWPCF1 = false;\n    public SHADOWPCF2 = false;\n    public SHADOWPCF3 = false;\n    public SHADOWPCSS0 = false;\n    public SHADOWPCSS1 = false;\n    public SHADOWPCSS2 = false;\n    public SHADOWPCSS3 = false;\n    public NORMAL = false;\n    public UV1 = false;\n    public UV2 = false;\n    public VERTEXCOLOR = false;\n    public VERTEXALPHA = false;\n    public NUM_BONE_INFLUENCERS = 0;\n    public BonesPerMesh = 0;\n    public INSTANCES = false;\n    public UNLIT = false;\n\n    constructor() {\n        super();\n        this.rebuild();\n    }\n}\n\nexport class LavaMaterial extends PushMaterial {\n    @serializeAsTexture(\"diffuseTexture\")\n    private _diffuseTexture: BaseTexture;\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public diffuseTexture: BaseTexture;\n\n    @serializeAsTexture()\n    public noiseTexture: BaseTexture;\n\n    @serializeAsColor3()\n    public fogColor: Color3;\n\n    @serialize()\n    public speed: number = 1;\n\n    @serialize()\n    public movingSpeed: number = 1;\n\n    @serialize()\n    public lowFrequencySpeed: number = 1;\n\n    @serialize()\n    public fogDensity: number = 0.15;\n\n    private _lastTime: number = 0;\n\n    @serializeAsColor3()\n    public diffuseColor = new Color3(1, 1, 1);\n\n    @serialize(\"disableLighting\")\n    private _disableLighting = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public disableLighting: boolean;\n\n    @serialize(\"unlit\")\n    private _unlit = false;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public unlit: boolean;\n\n    @serialize(\"maxSimultaneousLights\")\n    private _maxSimultaneousLights = 4;\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    public maxSimultaneousLights: number;\n\n    private _scaledDiffuse = new Color3();\n    private _renderId: number;\n\n    constructor(name: string, scene: Scene) {\n        super(name, scene);\n    }\n\n    public needAlphaBlending(): boolean {\n        return (this.alpha < 1.0);\n    }\n\n    public needAlphaTesting(): boolean {\n        return false;\n    }\n\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\n        return null;\n    }\n\n    // Methods\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\n        if (this.isFrozen) {\n            if (this._wasPreviouslyReady && subMesh.effect) {\n                return true;\n            }\n        }\n\n        if (!subMesh._materialDefines) {\n            subMesh._materialDefines = new LavaMaterialDefines();\n        }\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        var scene = this.getScene();\n\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\n            if (this._renderId === scene.getRenderId()) {\n                return true;\n            }\n        }\n\n        var engine = scene.getEngine();\n\n        // Textures\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReady()) {\n                        return false;\n                    } else {\n                        defines._needUVs = true;\n                        defines.DIFFUSE = true;\n                    }\n                }\n            }\n        }\n\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines);\n\n        // Lights\n        defines._needNormals = true;\n\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights, this._disableLighting);\n\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false);\n\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true);\n\n        // Get correct effect\n        if (defines.isDirty) {\n            defines.markAsProcessed();\n            scene.resetCachedMaterial();\n\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks);\n\n            if (defines.NUM_BONE_INFLUENCERS > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n\n            if (defines.UV1) {\n                attribs.push(VertexBuffer.UVKind);\n            }\n\n            if (defines.UV2) {\n                attribs.push(VertexBuffer.UV2Kind);\n            }\n\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n\n            // Legacy browser patch\n            var shaderName = \"lava\";\n            var join = defines.toString();\n\n            var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vDiffuseColor\",\n                \"vFogInfos\", \"vFogColor\", \"pointSize\",\n                \"vDiffuseInfos\",\n                \"mBones\",\n                \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"diffuseMatrix\",\n                \"time\", \"speed\", \"movingSpeed\",\n                \"fogColor\", \"fogDensity\", \"lowFrequencySpeed\"\n            ];\n\n            var samplers = [\"diffuseSampler\",\n                \"noiseTexture\"\n            ];\n            var uniformBuffers = new Array<string>();\n\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this.maxSimultaneousLights\n            });\n\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\n                <EffectCreationOptions>{\n                    attributes: attribs,\n                    uniformsNames: uniforms,\n                    uniformBuffersNames: uniformBuffers,\n                    samplers: samplers,\n                    defines: join,\n                    fallbacks: fallbacks,\n                    onCompiled: this.onCompiled,\n                    onError: this.onError,\n                    indexParameters: { maxSimultaneousLights: this.maxSimultaneousLights }\n                }, engine), defines);\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n\n        this._renderId = scene.getRenderId();\n        this._wasPreviouslyReady = true;\n\n        return true;\n    }\n\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\n        var scene = this.getScene();\n\n        var defines = <LavaMaterialDefines>subMesh._materialDefines;\n        if (!defines) {\n            return;\n        }\n\n        var effect = subMesh.effect;\n\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n\n        defines.UNLIT = this._unlit;\n\n        // Matrices\n        this.bindOnlyWorldMatrix(world);\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n        if (this._mustRebind(scene, effect)) {\n            // Textures\n            if (this.diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                this._activeEffect.setTexture(\"diffuseSampler\", this.diffuseTexture);\n\n                this._activeEffect.setFloat2(\"vDiffuseInfos\", this.diffuseTexture.coordinatesIndex, this.diffuseTexture.level);\n                this._activeEffect.setMatrix(\"diffuseMatrix\", this.diffuseTexture.getTextureMatrix());\n            }\n\n            if (this.noiseTexture) {\n                this._activeEffect.setTexture(\"noiseTexture\", this.noiseTexture);\n            }\n\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n\n            // Point size\n            if (this.pointsCloud) {\n                this._activeEffect.setFloat(\"pointSize\", this.pointSize);\n            }\n\n            MaterialHelper.BindEyePosition(effect, scene);\n        }\n\n        this._activeEffect.setColor4(\"vDiffuseColor\", this._scaledDiffuse, this.alpha * mesh.visibility);\n\n        if (scene.lightsEnabled && !this.disableLighting) {\n            MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines);\n        }\n\n        // View\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            this._activeEffect.setMatrix(\"view\", scene.getViewMatrix());\n        }\n\n        // Fog\n        MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect);\n\n        this._lastTime += scene.getEngine().getDeltaTime();\n        this._activeEffect.setFloat(\"time\", this._lastTime * this.speed / 1000);\n\n        if (!this.fogColor) {\n            this.fogColor = Color3.Black();\n        }\n        this._activeEffect.setColor3(\"fogColor\", this.fogColor);\n        this._activeEffect.setFloat(\"fogDensity\", this.fogDensity);\n\n        this._activeEffect.setFloat(\"lowFrequencySpeed\", this.lowFrequencySpeed);\n        this._activeEffect.setFloat(\"movingSpeed\", this.movingSpeed);\n\n        this._afterBind(mesh, this._activeEffect);\n    }\n\n    public getAnimatables(): IAnimatable[] {\n        var results = [];\n\n        if (this.diffuseTexture && this.diffuseTexture.animations && this.diffuseTexture.animations.length > 0) {\n            results.push(this.diffuseTexture);\n        }\n\n        if (this.noiseTexture && this.noiseTexture.animations && this.noiseTexture.animations.length > 0) {\n            results.push(this.noiseTexture);\n        }\n\n        return results;\n    }\n\n    public getActiveTextures(): BaseTexture[] {\n        var activeTextures = super.getActiveTextures();\n\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n\n        return activeTextures;\n    }\n\n    public hasTexture(texture: BaseTexture): boolean {\n        if (super.hasTexture(texture)) {\n            return true;\n        }\n\n        if (this.diffuseTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public dispose(forceDisposeEffect?: boolean): void {\n        if (this.diffuseTexture) {\n            this.diffuseTexture.dispose();\n        }\n        if (this.noiseTexture) {\n            this.noiseTexture.dispose();\n        }\n\n        super.dispose(forceDisposeEffect);\n    }\n\n    public clone(name: string): LavaMaterial {\n        return SerializationHelper.Clone(() => new LavaMaterial(name, this.getScene()), this);\n    }\n\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.LavaMaterial\";\n        return serializationObject;\n    }\n\n    public getClassName(): string {\n        return \"LavaMaterial\";\n    }\n\n    // Statics\n    public static Parse(source: any, scene: Scene, rootUrl: string): LavaMaterial {\n        return SerializationHelper.Parse(() => new LavaMaterial(source.name, scene), source, scene, rootUrl);\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = \"precision highp float;\\n\\nuniform vec3 vEyePosition;\\nuniform vec4 vDiffuseColor;\\n\\nvarying vec3 vPositionW;\\n\\nuniform float time;\\nuniform float speed;\\nuniform float movingSpeed;\\nuniform vec3 fogColor;\\nuniform sampler2D noiseTexture;\\nuniform float fogDensity;\\n\\nvarying float noise;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<__decl__lightFragment>[0]\\n#include<__decl__lightFragment>[1]\\n#include<__decl__lightFragment>[2]\\n#include<__decl__lightFragment>[3]\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform sampler2D diffuseSampler;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#include<clipPlaneFragmentDeclaration>\\n\\n#include<fogFragmentDeclaration>\\nfloat random( vec3 scale,float seed ){\\nreturn fract( sin( dot( gl_FragCoord.xyz+seed,scale ) )*43758.5453+seed ) ;\\n}\\nvoid main(void) {\\n#include<clipPlaneFragment>\\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\\n\\nvec4 baseColor=vec4(1.,1.,1.,1.);\\nvec3 diffuseColor=vDiffuseColor.rgb;\\n\\nfloat alpha=vDiffuseColor.a;\\n#ifdef DIFFUSE\\n\\nvec4 noiseTex=texture2D( noiseTexture,vDiffuseUV );\\nvec2 T1=vDiffuseUV+vec2( 1.5,-1.5 )*time*0.02;\\nvec2 T2=vDiffuseUV+vec2( -0.5,2.0 )*time*0.01*speed;\\nT1.x+=noiseTex.x*2.0;\\nT1.y+=noiseTex.y*2.0;\\nT2.x-=noiseTex.y*0.2+time*0.001*movingSpeed;\\nT2.y+=noiseTex.z*0.2+time*0.002*movingSpeed;\\nfloat p=texture2D( noiseTexture,T1*3.0 ).a;\\nvec4 lavaColor=texture2D( diffuseSampler,T2*4.0);\\nvec4 temp=lavaColor*( vec4( p,p,p,p )*2. )+( lavaColor*lavaColor-0.1 );\\nbaseColor=temp;\\nfloat depth=gl_FragCoord.z*4.0;\\nconst float LOG2=1.442695;\\nfloat fogFactor=exp2(-fogDensity*fogDensity*depth*depth*LOG2 );\\nfogFactor=1.0-clamp( fogFactor,0.0,1.0 );\\nbaseColor=mix( baseColor,vec4( fogColor,baseColor.w ),fogFactor );\\ndiffuseColor=baseColor.rgb;\\n\\n\\n#ifdef ALPHATEST\\nif (baseColor.a<0.4)\\ndiscard;\\n#endif\\n#include<depthPrePass>\\nbaseColor.rgb*=vDiffuseInfos.y;\\n#endif\\n#ifdef VERTEXCOLOR\\nbaseColor.rgb*=vColor.rgb;\\n#endif\\n\\n#ifdef NORMAL\\nvec3 normalW=normalize(vNormalW);\\n#else\\nvec3 normalW=vec3(1.0,1.0,1.0);\\n#endif\\n#ifdef UNLIT\\nvec3 diffuseBase=vec3(1.,1.,1.);\\n#else\\n\\nvec3 diffuseBase=vec3(0.,0.,0.);\\nlightingInfo info;\\nfloat shadow=1.;\\nfloat glossiness=0.;\\n#include<lightFragment>[0]\\n#include<lightFragment>[1]\\n#include<lightFragment>[2]\\n#include<lightFragment>[3]\\n#endif\\n#ifdef VERTEXALPHA\\nalpha*=vColor.a;\\n#endif\\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\\n\\nvec4 color=vec4(finalDiffuse,alpha);\\n#include<fogFragment>\\ngl_FragColor=color;\\n}\"","module.exports = \"precision highp float;\\n\\nuniform float time;\\nuniform float lowFrequencySpeed;\\n\\nvarying float noise;\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n#include<bonesDeclaration>\\n\\n#include<instancesDeclaration>\\nuniform mat4 view;\\nuniform mat4 viewProjection;\\n#ifdef DIFFUSE\\nvarying vec2 vDiffuseUV;\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n#ifdef VERTEXCOLOR\\nvarying vec4 vColor;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#include<fogVertexDeclaration>\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n\\n\\nvec3 mod289(vec3 x)\\n{\\nreturn x-floor(x*(1.0/289.0))*289.0;\\n}\\nvec4 mod289(vec4 x)\\n{\\nreturn x-floor(x*(1.0/289.0))*289.0;\\n}\\nvec4 permute(vec4 x)\\n{\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\nreturn 1.79284291400159-0.85373472095314*r;\\n}\\nvec3 fade(vec3 t) {\\nreturn t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\n\\nfloat pnoise(vec3 P,vec3 rep)\\n{\\nvec3 Pi0=mod(floor(P),rep); \\nvec3 Pi1=mod(Pi0+vec3(1.0),rep); \\nPi0=mod289(Pi0);\\nPi1=mod289(Pi1);\\nvec3 Pf0=fract(P); \\nvec3 Pf1=Pf0-vec3(1.0); \\nvec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);\\nvec4 iy=vec4(Pi0.yy,Pi1.yy);\\nvec4 iz0=Pi0.zzzz;\\nvec4 iz1=Pi1.zzzz;\\nvec4 ixy=permute(permute(ix)+iy);\\nvec4 ixy0=permute(ixy+iz0);\\nvec4 ixy1=permute(ixy+iz1);\\nvec4 gx0=ixy0*(1.0/7.0);\\nvec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;\\ngx0=fract(gx0);\\nvec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);\\nvec4 sz0=step(gz0,vec4(0.0));\\ngx0-=sz0*(step(0.0,gx0)-0.5);\\ngy0-=sz0*(step(0.0,gy0)-0.5);\\nvec4 gx1=ixy1*(1.0/7.0);\\nvec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;\\ngx1=fract(gx1);\\nvec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);\\nvec4 sz1=step(gz1,vec4(0.0));\\ngx1-=sz1*(step(0.0,gx1)-0.5);\\ngy1-=sz1*(step(0.0,gy1)-0.5);\\nvec3 g000=vec3(gx0.x,gy0.x,gz0.x);\\nvec3 g100=vec3(gx0.y,gy0.y,gz0.y);\\nvec3 g010=vec3(gx0.z,gy0.z,gz0.z);\\nvec3 g110=vec3(gx0.w,gy0.w,gz0.w);\\nvec3 g001=vec3(gx1.x,gy1.x,gz1.x);\\nvec3 g101=vec3(gx1.y,gy1.y,gz1.y);\\nvec3 g011=vec3(gx1.z,gy1.z,gz1.z);\\nvec3 g111=vec3(gx1.w,gy1.w,gz1.w);\\nvec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));\\ng000*=norm0.x;\\ng010*=norm0.y;\\ng100*=norm0.z;\\ng110*=norm0.w;\\nvec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));\\ng001*=norm1.x;\\ng011*=norm1.y;\\ng101*=norm1.z;\\ng111*=norm1.w;\\nfloat n000=dot(g000,Pf0);\\nfloat n100=dot(g100,vec3(Pf1.x,Pf0.yz));\\nfloat n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));\\nfloat n110=dot(g110,vec3(Pf1.xy,Pf0.z));\\nfloat n001=dot(g001,vec3(Pf0.xy,Pf1.z));\\nfloat n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));\\nfloat n011=dot(g011,vec3(Pf0.x,Pf1.yz));\\nfloat n111=dot(g111,Pf1);\\nvec3 fade_xyz=fade(Pf0);\\nvec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);\\nvec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);\\nfloat n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);\\nreturn 2.2*n_xyz;\\n}\\n\\nfloat turbulence( vec3 p ) {\\nfloat w=100.0;\\nfloat t=-.5;\\nfor (float f=1.0 ; f<=10.0 ; f++ ){\\nfloat power=pow( 2.0,f );\\nt+=abs( pnoise( vec3( power*p ),vec3( 10.0,10.0,10.0 ) )/power );\\n}\\nreturn t;\\n}\\nvoid main(void) {\\n#include<instancesVertex>\\n#include<bonesVertex>\\n#ifdef NORMAL\\n\\nnoise=10.0*-.10*turbulence( .5*normal+time*1.15 );\\n\\nfloat b=lowFrequencySpeed*5.0*pnoise( 0.05*position +vec3(time*1.025),vec3( 100.0 ) );\\n\\nfloat displacement =-1.5*noise+b;\\n\\nvec3 newPosition=position+normal*displacement;\\ngl_Position=viewProjection*finalWorld*vec4( newPosition,1.0 );\\nvec4 worldPos=finalWorld*vec4(newPosition,1.0);\\nvPositionW=vec3(worldPos);\\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\\n#endif\\n\\n#ifndef UV1\\nvec2 uv=vec2(0.,0.);\\n#endif\\n#ifndef UV2\\nvec2 uv2=vec2(0.,0.);\\n#endif\\n#ifdef DIFFUSE\\nif (vDiffuseInfos.x == 0.)\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\\n}\\nelse\\n{\\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n}\\n#endif\\n\\n#include<clipPlaneVertex>\\n\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\nvColor=color;\\n#endif\\n\\n#ifdef POINTSIZE\\ngl_PointSize=pointSize;\\n#endif\\n}\""],"sourceRoot":""}