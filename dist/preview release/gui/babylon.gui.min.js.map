{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/2D/adtInstrumentation.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_transform","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","invalidateRect","host","rectanglePoints","BABYLON","Polygon","Rectangle","min","Number","MAX_VALUE","max","invertToRef","transformCoordinates","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","invalidatedRectangle","isVisible","rebuildCount","_processMeasures","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","beginPath","_ClipMeasure","right","bottom","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","clip","_render","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","_populateNinePatchSlicesFromImage","onImageLoadedObservable","_extractNinePatchSliceDataFromImage","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_WorkingCanvas","canvas","drawImage","imageData","data","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","STRETCH_NINE_PATCH","_renderNinePatch","_renderCornerPatch","targetX","targetY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","targetCenterWidth","sliceLeft","targetTopHeight","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","_disableInvalidateRect","_invalidatedRectangle","_clearMeasure","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","minX","minY","maxX","maxY","maxLeft","maxTop","floor","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","availableWidth","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputText","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","focusedColor","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","grid_1","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","AdvancedDynamicTextureInstrumentation","_captureRenderTime","_renderTime","PerfCounter","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    protected _wasDirty = false;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _intersectsRect(rect: Measure) {\r\n        var hit = !(this._currentMeasure.left > rect.left + rect.width ||\r\n            this._currentMeasure.left + this._currentMeasure.width < rect.left ||\r\n            this._currentMeasure.top > rect.top + rect.height ||\r\n            this._currentMeasure.top + this._currentMeasure.height < rect.top\r\n        );\r\n        return hit;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected invalidateRect() {\r\n        if (this.host) {\r\n            // Compute aabb of rotated container box (eg. to handle rotation)\r\n            var rectanglePoints = BABYLON.Polygon.Rectangle(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.left + this._currentMeasure.width, this._currentMeasure.top + this._currentMeasure.height);\r\n            var min = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n            var max = new Vector2(0, 0);\r\n            this._invertTransformMatrix.invertToRef(this._invertTransformMatrix);\r\n            for (var i = 0; i < 4; i++) {\r\n                this._invertTransformMatrix.transformCoordinates(rectanglePoints[i].x, rectanglePoints[i].y, rectanglePoints[i]);\r\n                min.x = Math.min(min.x, rectanglePoints[i].x);\r\n                min.y = Math.min(min.y, rectanglePoints[i].y);\r\n                max.x = Math.max(max.x, rectanglePoints[i].x);\r\n                max.y = Math.max(max.y, rectanglePoints[i].y);\r\n            }\r\n            this._invertTransformMatrix.invertToRef(this._invertTransformMatrix);\r\n\r\n            this.host.invalidateRect(\r\n                min.x,\r\n                min.y,\r\n                max.x,\r\n                max.y\r\n            );\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n            this.invalidateRect();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context?: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        let rebuildCount = 0;\r\n        do {\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Control uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _clip(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            var right = Math.min(invalidatedRectangle.left + invalidatedRectangle.width, this._currentMeasure.left + this._currentMeasure.width);\r\n            var bottom = Math.min(invalidatedRectangle.top + invalidatedRectangle.height, this._currentMeasure.top + this._currentMeasure.height);\r\n            Control._ClipMeasure.left = Math.max(invalidatedRectangle.left, this._currentMeasure.left);\r\n            Control._ClipMeasure.top = Math.max(invalidatedRectangle.top, this._currentMeasure.top);\r\n            Control._ClipMeasure.width = right - Control._ClipMeasure.left;\r\n            Control._ClipMeasure.height = bottom - Control._ClipMeasure.top;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    // Only redraw parts of the screen that are invalidated\r\n                    if (invalidatedRectangle) {\r\n                        if (!child._intersectsRect(invalidatedRectangle)) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context, invalidatedRectangle)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n\r\n        this._localDraw(context, invalidatedRectangle);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    continue;\r\n                }\r\n            }\r\n            child._render(context, invalidatedRectangle);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private static _WorkingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!Image._WorkingCanvas) {\r\n            Image._WorkingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = Image._WorkingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        context.drawImage(this._domImage, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft + 1;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft + 1;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop + 1,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight + 1);\r\n\r\n        // Borders\r\n        context.drawImage(this._domImage, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\nimport { Container } from \"./controls/container\";\nimport { Control } from \"./controls/control\";\nimport { Style } from \"./style\";\nimport { Measure } from \"./measure\";\n/**\n* Interface used to define a control that can receive focus\n*/\nexport interface IFocusableControl {\n    /**\n     * Function called when the control receives the focus\n     */\n    onFocus(): void;\n    /**\n     * Function called when the control loses the focus\n     */\n    onBlur(): void;\n    /**\n     * Function called to let the control handle keyboard events\n     * @param evt defines the current keyboard event\n     */\n    processKeyboard(evt: KeyboardEvent): void;\n    /**\n    * Function called to get the list of controls that should not steal the focus from this control\n    * @returns an array of controls\n    */\n    keepsFocusWith(): Nullable<Control[]>;\n}\n/**\n* Class used to create texture to support 2D GUI elements\n* @see http://doc.babylonjs.com/how_to/gui\n*/\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    private _isDirty = false;\n    private _renderObserver: Nullable<Observer<Camera>>;\n    private _resizeObserver: Nullable<Observer<Engine>>;\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\n    private _background: string;\n    /** @hidden */\n    public _rootContainer = new Container(\"root\");\n    /** @hidden */\n    public _lastPickedControl: Control;\n    /** @hidden */\n    public _lastControlOver: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _lastControlDown: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _capturingControl: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _shouldBlockPointer: boolean;\n    /** @hidden */\n    public _layerToDispose: Nullable<Layer>;\n    /** @hidden */\n    public _linkedControls = new Array<Control>();\n    private _isFullscreen = false;\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\n    private _idealWidth = 0;\n    private _idealHeight = 0;\n    private _useSmallestIdeal: boolean = false;\n    private _renderAtIdealSize = false;\n    private _focusedControl: Nullable<IFocusableControl>;\n    private _blockNextFocusCheck = false;\n    private _renderScale = 1;\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\n    /**\n    * Define type to string to ensure compatibility across browsers\n    * Safari doesn't support DataTransfer constructor\n    */\n    private _clipboardData: string = \"\";\n    /**\n    * Observable event triggered each time an clipboard event is received from the rendering canvas\n    */\n    public onClipboardObservable = new Observable<ClipboardInfo>();\n    /**\n    * Observable event triggered each time a pointer down is intercepted by a control\n    */\n    public onControlPickedObservable = new Observable<Control>();\n    /**\n    * Observable event triggered before layout is evaluated\n    */\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the layout was evaluated\n    */\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered before the texture is rendered\n    */\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the texture was rendered\n    */\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Gets or sets a boolean defining if alpha is stored as premultiplied\n    */\n    public premulAlpha = false;\n    /**\n    * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n    * Useful when you want more antialiasing\n    */\n    public get renderScale(): number {\n        return this._renderScale;\n    }\n    public set renderScale(value: number) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n    * Gets or sets the ideal width used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealWidth(): number {\n        return this._idealWidth;\n    }\n    public set idealWidth(value: number) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets the ideal height used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealHeight(): number {\n        return this._idealHeight;\n    }\n    public set idealHeight(value: number) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get useSmallestIdeal(): boolean {\n        return this._useSmallestIdeal;\n    }\n    public set useSmallestIdeal(value: boolean) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if adaptive scaling must be used\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get renderAtIdealSize(): boolean {\n        return this._renderAtIdealSize;\n    }\n    public set renderAtIdealSize(value: boolean) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n    /**\n    * Gets the underlying layer used to render the texture when in fullscreen mode\n    */\n    public get layer(): Nullable<Layer> {\n        return this._layerToDispose;\n    }\n    /**\n    * Gets the root container control\n    */\n    public get rootContainer(): Container {\n        return this._rootContainer;\n    }\n    /**\n    * Returns an array containing the root container.\n    * This is mostly used to let the Inspector introspects the ADT\n    * @returns an array containing the rootContainer\n    */\n    public getChildren(): Array<Container> {\n        return [this._rootContainer];\n    }\n    /**\n    * Will return all controls that are inside this texture\n    * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n    * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n    * @return all child controls\n    */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n    * Gets or sets the current focused control\n    */\n    public get focusedControl(): Nullable<IFocusableControl> {\n        return this._focusedControl;\n    }\n    public set focusedControl(control: Nullable<IFocusableControl>) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n    * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n    */\n    public get isForeground(): boolean {\n        if (!this.layer) {\n            return true;\n        }\n        return (!this.layer.isBackground);\n    }\n    public set isForeground(value: boolean) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n    * Gets or set information about clipboardData\n    */\n    public get clipboardData(): string {\n        return this._clipboardData;\n    }\n    public set clipboardData(value: string) {\n        this._clipboardData = value;\n    }\n    /**\n   * Creates a new AdvancedDynamicTexture\n   * @param name defines the name of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n   * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n   */\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"AdvancedDynamicTexture\"\n    */\n    public getClassName(): string {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n    * Function used to execute a function on all controls\n    * @param func defines the function to execute\n    * @param container defines the container where controls belong. If null the root container will be used\n    */\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (var child of container.children) {\n            if ((<any>child).children) {\n                this.executeOnAllControls(func, (<Container>child));\n                continue;\n            }\n            func(child);\n        }\n    }\n    private _disableInvalidateRect = false;\n    private _invalidatedRectangle: Nullable<Measure> = null;\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param minX left most position of the rectangle to invalidate in pixels\n     * @param minY top most position of the rectangle to invalidate in pixels\n     * @param maxX right most position of the rectangle to invalidate in pixels\n     * @param maxY bottom most position of the rectangle to invalidate in pixels\n     */\n    public invalidateRect(minX: number, minY: number, maxX: number, maxY: number) {\n        if (this._disableInvalidateRect) {\n            return;\n        }\n        if (!this._invalidatedRectangle) {\n            this._invalidatedRectangle = new Measure(minX, minY, maxX - minX, maxY - minY);\n        } else {\n            // Compute intersection\n            var maxLeft = Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width, maxX);\n            var maxTop = Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height, maxY);\n            this._invalidatedRectangle.left = Math.min(this._invalidatedRectangle.left, minX);\n            this._invalidatedRectangle.top = Math.min(this._invalidatedRectangle.top, minY);\n            this._invalidatedRectangle.width = maxLeft - this._invalidatedRectangle.left;\n            this._invalidatedRectangle.height = maxTop - this._invalidatedRectangle.top;\n        }\n        // Ensure there are no pixel fractions\n        this._invalidatedRectangle.left = Math.floor(this._invalidatedRectangle.left);\n        this._invalidatedRectangle.top = Math.floor(this._invalidatedRectangle.top);\n        this._invalidatedRectangle.width = Math.ceil(this._invalidatedRectangle.width);\n        this._invalidatedRectangle.height = Math.ceil(this._invalidatedRectangle.height);\n    }\n    /**\n    * Marks the texture as dirty forcing a complete update\n    */\n    public markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n    * Helper function used to create a new style\n    * @returns a new style\n    * @see http://doc.babylonjs.com/how_to/gui#styles\n    */\n    public createStyle(): Style {\n        return new Style(this);\n    }\n    /**\n    * Adds a new control to the root container\n    * @param control defines the control to add\n    * @returns the current texture\n    */\n    public addControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n    * Removes a control from the root container\n    * @param control defines the control to remove\n    * @returns the current texture\n    */\n    public removeControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n    * Release all resources\n    */\n    public dispose(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootCanvas = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._pointerMoveObserver) {\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        super.dispose();\n    }\n    private _onResize(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            } else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width, textureSize.height);\n    }\n    /** @hidden */\n    public _getGlobalViewport(scene: Scene): Viewport {\n        var engine = scene.getEngine();\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position\n    */\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector2.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector2(projectedPosition.x, projectedPosition.y);\n    }\n    private _checkUpdate(camera: Camera): void {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            var globalViewport = this._getGlobalViewport(scene);\n            for (var control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                var mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                var position = mesh.getBoundingInfo().boundingSphere.center;\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                // Account for RenderScale.\n                projectedPosition.scaleInPlace(this.renderScale);\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render();\n        this.update(true, this.premulAlpha);\n    }\n    private _clearMeasure = new Measure(0, 0, 0, 0);\n    private _render(): void {\n        var textureSize = this.getSize();\n        var renderWidth = textureSize.width;\n        var renderHeight = textureSize.height;\n        if (this._invalidatedRectangle) {\n            this._clearMeasure.copyFrom(this._invalidatedRectangle);\n        } else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        // Clear\n        var context = this.getContext();\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n        // Render\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n        this.onBeginLayoutObservable.notifyObservers(this);\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._rootContainer._layout(measure, context, this._invalidatedRectangle);\n        this.onEndLayoutObservable.notifyObservers(this);\n\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._invalidatedRectangle = null;\n    }\n    /** @hidden */\n    public _changeCursor(cursor: string) {\n        if (this._rootCanvas) {\n            this._rootCanvas.style.cursor = cursor;\n        }\n    }\n    /** @hidden */\n    public _registerLastControlDown(control: Control, pointerId: number) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        if (this._isFullscreen) {\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let viewport = camera!.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\n            return;\n        }\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\n            this._changeCursor(\"\");\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n        this._manageFocus();\n    }\n    /** @hidden */\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\n        for (var pointerId in list) {\n            if (!list.hasOwnProperty(pointerId)) {\n                continue;\n            }\n            var lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /** @hidden */\n    public _cleanControlAfterRemoval(control: Control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /** Attach to all scene events required to support pointer events */\n    public attach(): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            if (!scene) {\n                return;\n            }\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            let engine = scene.getEngine();\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\n            this._shouldBlockPointer = false;\n            // Do picking modifies _shouldBlockPointer\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer) {\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\n            }\n        });\n        this._attachToOnPointerOut(scene);\n    }\n    /** @hidden */\n    private onClipboardCopy = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardCut = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardPaste = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /**\n    * Register the clipboard Events onto the canvas\n    */\n    public registerClipboardEvents(): void {\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    public unRegisterClipboardEvents(): void {\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\n        self.removeEventListener(\"cut\", this.onClipboardCut);\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\n    }\n    /**\n    * Connect the texture to a hosting mesh to enable interactions\n    * @param mesh defines the mesh to attach to\n    * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n    */\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                var uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    let size = this.getSize();\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\n                }\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (var control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachToOnPointerOut(scene);\n    }\n    /**\n    * Move the focus to a specific control\n    * @param control defines the control which will receive the focus\n    */\n    public moveFocusToControl(control: IFocusableControl): void {\n        this.focusedControl = control;\n        this._lastPickedControl = <any>control;\n        this._blockNextFocusCheck = true;\n    }\n    private _manageFocus(): void {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = <any>this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    private _attachToOnPointerOut(scene: Scene): void {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    // Statics\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = result;\n            material.emissiveTexture = result;\n            result.hasAlpha = true;\n        } else {\n            material.emissiveTexture = result;\n            material.opacityTexture = result;\n        }\n        mesh.material = material;\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n    * Creates a new AdvancedDynamicTexture in fullscreen mode.\n    * In this mode the texture will rely on a layer for its rendering.\n    * This allows it to be treated like any other layer.\n    * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n    * LayerMask is set through advancedTexture.layer.layerMask\n    * @param name defines name for the texture\n    * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n    * @param scene defines the hsoting scene\n    * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n    * @returns a new AdvancedDynamicTexture\n    */\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        // Attach\n        result.attach();\n        return result;\n    }\n}","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._childControls = [];\r\n    }\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./adtInstrumentation\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._RGBtoHSV(this._value, this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    private _RGBtoHSV(color: Color3, result: Color3) {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h = 0;\n        var s = 0;\n        var v = max;\n\n        var dm = max - min;\n\n        if (max !== 0) {\n            s = dm / max;\n        }\n\n        if (max != min) {\n            if (max == r) {\n                h = (g - b) / dm;\n                if (g < b) {\n                    h += 6;\n                }\n            } else if (max == g) {\n                h = (b - r) / dm + 2;\n            } else if (max == b) {\n                h = (r - g) / dm + 4;\n            }\n            h *= 60;\n        }\n\n        result.r = h;\n        result.g = s;\n        result.b = v;\n    }\n\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\n        var chroma = value * saturation;\n        var h = hue / 60;\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\n        var r = 0;\n        var g = 0;\n        var b = 0;\n\n        if (h >= 0 && h <= 1) {\n            r = chroma;\n            g = x;\n        } else if (h >= 1 && h <= 2) {\n            r = x;\n            g = chroma;\n        } else if (h >= 2 && h <= 3) {\n            g = chroma;\n            b = x;\n        } else if (h >= 3 && h <= 4) {\n            g = x;\n            b = chroma;\n        } else if (h >= 4 && h <= 5) {\n            r = x;\n            b = chroma;\n        } else if (h >= 5 && h <= 6) {\n            r = chroma;\n            b = x;\n        }\n\n        var m = value - chroma;\n        result.set((r + m), (g + m), (b + m));\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\nimport { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = this._horizontalBar.value * this._endLeft + \"px\";\r\n        const newTop = this._verticalBar.value * this._endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","import { IDisposable, PerfCounter, Nullable, Observer } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}