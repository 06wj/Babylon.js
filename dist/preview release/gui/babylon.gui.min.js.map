{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","evt","preventDefault","substr","deletePosition","deadKey","insertPosition","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._text && this._text.length > 0  && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    public processKeyboard(evt: KeyboardEvent): void {\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}