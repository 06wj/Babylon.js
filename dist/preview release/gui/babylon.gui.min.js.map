{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_needRedraw","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","BABYLON","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                if (this.width !== computedWidth + \"px\") {\r\n                    this.width = computedWidth + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                if (this.height !== computedHeight + \"px\") {\r\n                    this.height = computedHeight + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /** @hidden */\r\n    public _needRedraw = false;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n     /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n\r\n        if (this._needRedraw) { // We need to redraw as some elements dynamically adapt to their content\r\n            this._needRedraw = false;\r\n            this._render();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                    return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n     /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n   /**\r\n    * Register the clipboard Events onto the canvas\r\n    */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\",  this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n             switch (clipboardInfo.type){\n                 case ClipboardEventTypes.COPY:\n                         this._onCopyText(clipboardInfo.event);\n                         this.onTextCopyObservable.notifyObservers(this);\n                         break;\n                 case ClipboardEventTypes.CUT:\n                         this._onCutText(clipboardInfo.event);\n                         this.onTextCutObservable.notifyObservers(this);\n                         break;\n                 case ClipboardEventTypes.PASTE:\n                         this._onPasteText(clipboardInfo.event);\n                         this.onTextPasteObservable.notifyObservers(this);\n                         break;\n                 default: return;\n              }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset =  this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0  && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left =  (this._text[this._startHighlightIndex - 1 ].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch {} //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n\n                 //show the highlighted text\n                if (this._isTextHighlightOn) {\n                    clearTimeout(this._blinkTimeout);\n                    let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                    let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                    this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                    //for transparancy\n                    context.globalAlpha = this._highligherOpacity;\n                    context.fillStyle = this._textHighlightColor;\n                    context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                    context.globalAlpha = 1.0;\n                }\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}