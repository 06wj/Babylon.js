{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","parent","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_b","_c","_mapGridNode","_finalProcessing","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","slice","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","GUIImage","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","Image","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","_STRETCH_NONE","_STRETCH_FILL","_STRETCH_UNIFORM","_STRETCH_EXTEND","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","attach","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","material","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Color3","Red","Black","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","AdvancedDynamicTexture","Texture","TRILINEAR_SAMPLINGMODE","rootContainer","scaleX","scaleY","premulAlpha","_applyFacade","facadeTexture","emissiveTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","StandardMaterial","getScene","specularColor","AbstractButton3D","__export","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","onFocus","navigator","userAgent","prompt","focusedControl","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","processKeyboard","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","getProjectedPosition","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","Number","_canvas","yValue","style_1","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_texture","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","event","skipOnPointerObservable","hasAlpha","_resizeObserver","getEngine","onResizeObservable","_onResize","isReady","_layerToDispose","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","worldMatrix","renderScale","layerMask","isDisposed","isDirty","_render","update","clearRect","measure","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","backFaceCulling","diffuseColor","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","PushMaterial","GUI","globalObject","global","undefined","BABYLON","g","Function","eval","e","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","onValueChangedObservable","_pointerIsDown","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","RadioButton","group","childRadio","stackPanel_1","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_createKey","propertySet","background","paddingRight","paddingTop","paddingBottom","addKeysRow","keys","propertySets","panel","isVertical","properties","applyShiftState","rowContainer","j","button_tblock","toUpperCase","toLowerCase","_connectedInputText","connect","input","_onFocusObserver","_onBlurObserver","_onKeyPressObserver","disconnect","CreateDefaultLayout","returnValue","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","rotation","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","cellCountX","cellCountY","cellX","top_1","cellY","options","isHorizontal","controlFirst","header","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","fontSize","_backPlate","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","a","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","_scene","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,cACA,mBAAAC,eAAAC,IACAD,OAAA,8BAAAJ,GACA,iBAAAC,QACAA,QAAA,iBAAAD,EAAAG,QAAA,eAEAJ,EAAA,QAAAA,EAAA,YAAyCA,EAAA,YAAAC,EAAAD,EAAA,UARzC,CASCO,OAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAX,YAUA,OANAY,EAAAH,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAU,GAAA,EAGAV,EAAAD,QA0DA,OArDAQ,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAhB,EAAAiB,EAAAC,GACAV,EAAAW,EAAAnB,EAAAiB,IACAG,OAAAC,eAAArB,EAAAiB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAxB,GACA,oBAAAyB,eAAAC,aACAN,OAAAC,eAAArB,EAAAyB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAArB,EAAA,cAAiD2B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAiB,EAAAjB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oBClFAxC,EAAAD,QAAAM,iFCEA,IAAAoC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GACAoC,EAAApC,EAAA,GAEAqC,EAAArC,EAAA,IAMAsC,EAAA,WAirBI,SAAAA,EAEW7B,GAAA8B,KAAA9B,OAlrBH8B,KAAAC,OAAS,EACTD,KAAAE,WAAY,EACZF,KAAAG,QAAU,EAQXH,KAAAI,gBAAkBP,EAAAQ,QAAQC,QACzBN,KAAAO,YAAc,QACdP,KAAAQ,WAAa,GACbR,KAAAS,YAAc,GACdT,KAAAU,UAAY,IAAIf,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAG/DZ,KAAAa,OAAS,IAAIlB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAE/Dd,KAAAe,QAAU,IAAIpB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAG/Dd,KAAAgB,OAAS,GACThB,KAAAiB,OAA0B,KAGxBjB,KAAAkB,qBAAuBnB,EAAQoB,4BAE/BnB,KAAAoB,mBAAqBrB,EAAQsB,0BAC/BrB,KAAAsB,UAAW,EAEZtB,KAAAuB,mBAAqB1B,EAAAQ,QAAQC,QAE1BN,KAAAwB,qBAAuB3B,EAAAQ,QAAQC,QACjCN,KAAAyB,aAAe,IAAI9B,EAAAgB,aAAa,GAChCX,KAAA0B,cAAgB,IAAI/B,EAAAgB,aAAa,GACjCX,KAAA2B,YAAc,IAAIhC,EAAAgB,aAAa,GAC/BX,KAAA4B,eAAiB,IAAIjC,EAAAgB,aAAa,GAEnCX,KAAA6B,MAAQ,IAAIlC,EAAAgB,aAAa,GAEzBX,KAAA8B,KAAO,IAAInC,EAAAgB,aAAa,GACvBX,KAAA+B,QAAU,EACV/B,KAAAgC,QAAU,EACVhC,KAAAiC,UAAY,EACZjC,KAAAkC,kBAAoB,GACpBlC,KAAAmC,kBAAoB,GACpBnC,KAAAoC,iBAAmBtC,EAAAuC,SAASC,WAE1BtC,KAAAuC,uBAAyBzC,EAAAuC,SAASC,WAElCtC,KAAAwC,qBAAuB5C,EAAA6C,QAAQC,OACjC1C,KAAA2C,kBAAmB,EACnB3C,KAAA4C,gBAAiB,EAGjB5C,KAAA6C,YAAa,EAGb7C,KAAA8C,UAAW,EACX9C,KAAA+C,cAAgBnD,EAAA6C,QAAQC,OACxB1C,KAAAgD,WAAa,EACbhD,KAAAiD,aAAe,EACfjD,KAAAkD,cAAe,EACflD,KAAAmD,mBAMDnD,KAAAoD,kBAAmB,EAEnBpD,KAAAqD,kBAAmB,EAEnBrD,KAAAsD,kBAAmB,EAGnBtD,KAAAuD,cAAgB,EAEhBvD,KAAAwD,cAAgB,EAEhBxD,KAAAyD,WAAa,EAEbzD,KAAA0D,YAAc,OAGX1D,KAAA2D,aAAe,IAAIhE,EAAAgB,aAAa,GAEhCX,KAAA4D,aAAe,IAAIjE,EAAAgB,aAAa,GAYnCX,KAAA6D,wBAA0B,IAAIjE,EAAAkE,WAK9B9D,KAAA+D,uBAAyB,IAAInE,EAAAkE,WAK7B9D,KAAAgE,wBAA0B,IAAIpE,EAAAkE,WAK9B9D,KAAAiE,sBAAwB,IAAIrE,EAAAkE,WAK5B9D,KAAAkE,yBAA2B,IAAItE,EAAAkE,WAK/B9D,KAAAmE,yBAA2B,IAAIvE,EAAAkE,WAK/B9D,KAAAoE,kBAAoB,IAAIxE,EAAAkE,WAKxB9D,KAAAqE,sBAAwB,IAAIzE,EAAAkE,WA6vCvC,OAvyCIzF,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKsE,gDA4ChBjG,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAKuE,iBAGhB,SAAsBC,GAClBxE,KAAKuE,YAAcC,mCAIvBnG,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKC,YAGhB,SAAiBrB,GACToB,KAAKC,SAAWrB,IAGpBoB,KAAKE,WAAY,EACjBF,KAAKC,OAASrB,EACdoB,KAAKyE,iDAMTpG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAK+B,aAGhB,SAAkBnD,GACVoB,KAAK+B,UAAYnD,IAIrBoB,KAAK+B,QAAUnD,EACfoB,KAAKyE,eACLzE,KAAK0E,uDAMTrG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKgC,aAGhB,SAAkBpD,GACVoB,KAAKgC,UAAYpD,IAIrBoB,KAAKgC,QAAUpD,EACfoB,KAAKyE,eACLzE,KAAK0E,uDAMTrG,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKiC,eAGhB,SAAoBrD,GACZoB,KAAKiC,YAAcrD,IAIvBoB,KAAKiC,UAAYrD,EACjBoB,KAAKyE,eACLzE,KAAK0E,uDAMTrG,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,OAAOS,KAAKmC,uBAGhB,SAA4BvD,GACpBoB,KAAKmC,oBAAsBvD,IAI/BoB,KAAKmC,kBAAoBvD,EACzBoB,KAAKyE,eACLzE,KAAK0E,uDAMTrG,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,OAAOS,KAAKkC,uBAGhB,SAA4BtD,GACpBoB,KAAKkC,oBAAsBtD,IAI/BoB,KAAKkC,kBAAoBtD,EACzBoB,KAAKyE,eACLzE,KAAK0E,uDAOTrG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAKkB,0BAGhB,SAA+BtC,GACvBoB,KAAKkB,uBAAyBtC,IAIlCoB,KAAKkB,qBAAuBtC,EAC5BoB,KAAKyE,iDAOTpG,OAAAC,eAAWyB,EAAAR,UAAA,yBAAX,WACI,OAAOS,KAAKoB,wBAGhB,SAA6BxC,GACrBoB,KAAKoB,qBAAuBxC,IAIhCoB,KAAKoB,mBAAqBxC,EAC1BoB,KAAKyE,iDAOTpG,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKa,OAAO8D,SAAS3E,KAAK4E,YAWrC,SAAiBhG,GACToB,KAAKa,OAAO8D,SAAS3E,KAAK4E,SAAWhG,GAIrCoB,KAAKa,OAAOgE,WAAWjG,IACvBoB,KAAKyE,gDAVbpG,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAKa,OAAOiE,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAiB7E1G,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKe,QAAQ4D,SAAS3E,KAAK4E,YAWtC,SAAkBhG,GACVoB,KAAKe,QAAQ4D,SAAS3E,KAAK4E,SAAWhG,GAItCoB,KAAKe,QAAQ8D,WAAWjG,IACxBoB,KAAKyE,gDAVbpG,OAAAC,eAAWyB,EAAAR,UAAA,sBAAX,WACI,OAAOS,KAAKe,QAAQ+D,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,yCAc9E3G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAKO,iBAGhB,SAAsB3B,GACdoB,KAAKO,cAAgB3B,IAIzBoB,KAAKO,YAAc3B,EACnBoB,KAAKiF,oDAIT5G,OAAAC,eAAWyB,EAAAR,UAAA,iBAAX,WACI,OAAOS,KAAKQ,gBAGhB,SAAqB5B,GACboB,KAAKQ,aAAe5B,IAIxBoB,KAAKQ,WAAa5B,EAClBoB,KAAKiF,oDAIT5G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAKS,iBAGhB,SAAsB7B,GACdoB,KAAKS,cAAgB7B,IAIzBoB,KAAKS,YAAc7B,EACnBoB,KAAKiF,oDAOT5G,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKiB,YAGhB,SAAiBrC,GAAjB,IAAAsG,EAAAlF,KACQA,KAAKiB,SACLjB,KAAKiB,OAAOkE,oBAAoBC,OAAOpF,KAAKqF,gBAC5CrF,KAAKqF,eAAiB,MAG1BrF,KAAKiB,OAASrC,EAEVoB,KAAKiB,SACLjB,KAAKqF,eAAiBrF,KAAKiB,OAAOkE,oBAAoBG,IAAI,WACtDJ,EAAKT,eACLS,EAAKD,qBAIbjF,KAAKyE,eACLzE,KAAKiF,mDAIT5G,OAAAC,eAAWyB,EAAAR,UAAA,+BAAX,WACI,OAAOS,KAAKU,UAAU6E,8CAI1BlH,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,IAAIiG,EAAgBxF,KAAKiB,OAASjB,KAAKiB,OAAOP,UAAYV,KAAKU,UAE/D,OAAI8E,EAAcC,QACPD,EAAcE,SAAS1F,KAAK4E,OAGhCY,EAAcV,gBAAgB9E,KAAK4E,MAAO5E,KAAKuB,mBAAmByD,QAAUhF,KAAKwB,qBAAqBwD,yCAIjH3G,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKU,UAAUiE,SAAS3E,KAAK4E,YAGxC,SAAoBhG,GACZoB,KAAKU,UAAUiE,SAAS3E,KAAK4E,SAAWhG,GAIxCoB,KAAKU,UAAUmE,WAAWjG,KAC1BoB,KAAKyE,eACLzE,KAAKiF,oDAKb5G,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKgB,YAGhB,SAAiBpC,GACToB,KAAKgB,SAAWpC,IAIpBoB,KAAKgB,OAASpC,EACdoB,KAAKyE,iDAITpG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKG,aAGhB,SAAkBvB,GACVoB,KAAK2F,SAAW/G,IAIpBoB,KAAKG,QAAUvB,EAEXoB,KAAK4F,OACL5F,KAAK4F,MAAMC,gBAAgB7F,wCAKnC3B,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAKkD,kBAGhB,SAAyBtE,GACjBoB,KAAKkD,eAAiBtE,IAI1BoB,KAAKkD,aAAetE,EACpBoB,KAAKyE,iDAITpG,OAAAC,eAAWyB,EAAAR,UAAA,iBAAX,WACI,OAAOS,KAAK6C,gBAGhB,SAAqBjE,GACboB,KAAK6C,aAAejE,IAIxBoB,KAAK6C,WAAajE,EAClBoB,KAAKyE,iDAITpG,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKsB,0CAOhBjD,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAKyB,aAAakD,SAAS3E,KAAK4E,YAW3C,SAAuBhG,GACfoB,KAAKyB,aAAaoD,WAAWjG,IAC7BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAKyB,aAAaqD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAanF1G,OAAAC,eAAWyB,EAAAR,UAAA,oBAAX,WACI,OAAOS,KAAK0B,cAAciD,SAAS3E,KAAK4E,YAW5C,SAAwBhG,GAChBoB,KAAK0B,cAAcmD,WAAWjG,IAC9BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,4BAAX,WACI,OAAOS,KAAK0B,cAAcoD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAapF1G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAK2B,YAAYgD,SAAS3E,KAAK4E,YAW1C,SAAsBhG,GACdoB,KAAK2B,YAAYkD,WAAWjG,IAC5BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,0BAAX,WACI,OAAOS,KAAK2B,YAAYmD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,yCAalF3G,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAK4B,eAAe+C,SAAS3E,KAAK4E,YAW7C,SAAyBhG,GACjBoB,KAAK4B,eAAeiD,WAAWjG,IAC/BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,6BAAX,WACI,OAAOS,KAAK4B,eAAekD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,yCAarF3G,OAAAC,eAAWyB,EAAAR,UAAA,YAAX,WACI,OAAOS,KAAK6B,MAAM8C,SAAS3E,KAAK4E,YAWpC,SAAgBhG,GACRoB,KAAK6B,MAAMgD,WAAWjG,IACtBoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,oBAAX,WACI,OAAOS,KAAK6B,MAAMiD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAa5E1G,OAAAC,eAAWyB,EAAAR,UAAA,WAAX,WACI,OAAOS,KAAK8B,KAAK6C,SAAS3E,KAAK4E,YAWnC,SAAehG,GACPoB,KAAK8B,KAAK+C,WAAWjG,IACrBoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK8B,KAAKgD,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,yCAa3E3G,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK2D,aAAagB,SAAS3E,KAAK4E,YAW3C,SAAuBhG,GACfoB,KAAK2D,aAAakB,WAAWjG,IAC7BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAK2D,aAAamB,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAanF1G,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK4D,aAAae,SAAS3E,KAAK4E,YAW3C,SAAuBhG,GACfoB,KAAK4D,aAAaiB,WAAWjG,IAC7BoB,KAAKyE,gDANbpG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAK4D,aAAakB,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,yCAUnF3G,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,mCAIpE1G,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,mCAe1DjF,EAAAR,UAAA+E,aAAV,WACI,MAAO,WAIJvE,EAAAR,UAAA0F,gBAAP,WACIjF,KAAK8C,UAAW,EAChB9C,KAAKyE,gBAQF1E,EAAAR,UAAAyG,oBAAP,SAA2BC,GACvB,IAAIC,EAAStG,EAAA6C,QAAQC,OAIrB,OAFA1C,KAAKmG,yBAAyBF,EAAmBC,GAE1CA,GASJnG,EAAAR,UAAA4G,yBAAP,SAAgCF,EAA4BC,GAGxD,OAFAA,EAAOE,EAAIH,EAAkBG,EAAIpG,KAAKI,gBAAgB0F,KACtDI,EAAOG,EAAIJ,EAAkBI,EAAIrG,KAAKI,gBAAgB2F,IAC/C/F,MAQJD,EAAAR,UAAA+G,0BAAP,SAAiCL,GAC7B,IAAIC,EAAStG,EAAA6C,QAAQC,OAKrB,OAHAwD,EAAOE,EAAIH,EAAkBG,EAAIpG,KAAKwB,qBAAqBsE,KAC3DI,EAAOG,EAAIJ,EAAkBI,EAAIrG,KAAKwB,qBAAqBuE,IAEpDG,GAQJnG,EAAAR,UAAAgH,cAAP,SAAqBC,EAAmBC,GACpC,GAAKzG,KAAK4E,OAAS5E,KAAK4F,QAAU5F,KAAK4E,MAAM8B,eAA7C,CAKA1G,KAAK2G,oBAAsB5G,EAAQ6G,0BACnC5G,KAAK6G,kBAAoB9G,EAAQ+G,uBAEjC,IAAIC,EAAiB/G,KAAK4E,MAAMoC,mBAAmBP,GAC/CQ,EAAoBrH,EAAAsH,QAAQC,QAAQX,EAAU5G,EAAAwH,OAAO9E,WAAYmE,EAAMY,qBAAsBN,GAEjG/G,KAAKsH,yBAAyBL,GAE1BA,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjDvH,KAAKwH,eAAgB,EAGzBxH,KAAKwH,eAAgB,OAhBjB5H,EAAA6H,MAAMC,MAAM,2EAwBb3H,EAAAR,UAAAoI,aAAP,SAAoBC,GAChB,IAAK5H,KAAK4E,OAAS5E,KAAK4F,OAAS5F,KAAK4F,QAAU5F,KAAK4E,MAAM8B,eACnDkB,GACAhI,EAAA6H,MAAMC,MAAM,2EAFpB,CAOA,IAAIG,EAAQ7H,KAAK4E,MAAMkD,gBAAgBC,QAAQ/H,MAC/C,IAAe,IAAX6H,EAKA,OAJA7H,KAAKgI,YAAcJ,OACdA,GACD5H,KAAK4E,MAAMkD,gBAAgBG,OAAOJ,EAAO,IAGrCD,IAIZ5H,KAAK2G,oBAAsB5G,EAAQ6G,0BACnC5G,KAAK6G,kBAAoB9G,EAAQ+G,uBACjC9G,KAAKgI,YAAcJ,EACnB5H,KAAK2C,iBAAkD,IAA/B3C,KAAKI,gBAAgB2E,OAA+C,IAAhC/E,KAAKI,gBAAgB4E,OACjFhF,KAAK4E,MAAMkD,gBAAgBI,KAAKlI,SAI7BD,EAAAR,UAAA+H,yBAAP,SAAgCL,GAC5B,IAAIkB,EAAUnI,KAAK6B,MAAM6D,SAAS1F,KAAK4E,OACnCwD,EAASpI,KAAK8B,KAAK4D,SAAS1F,KAAK4E,OAEjCyD,EAAYpB,EAAkBb,EAAIpG,KAAK2D,aAAa+B,SAAS1F,KAAK4E,OAAU5E,KAAKI,gBAAgB2E,MAAQ,EACzGuD,EAAWrB,EAAkBZ,EAAIrG,KAAK4D,aAAa8B,SAAS1F,KAAK4E,OAAU5E,KAAKI,gBAAgB4E,OAAS,EAEzGhF,KAAK6B,MAAM0G,uBAAyBvI,KAAK8B,KAAKyG,wBAC1CC,KAAKC,IAAIJ,EAAUF,GAAW,KAC9BE,EAAUF,GAGVK,KAAKC,IAAIH,EAASF,GAAU,KAC5BE,EAASF,IAIjBpI,KAAK8F,KAAOuC,EAAU,KACtBrI,KAAK+F,IAAMuC,EAAS,KAEpBtI,KAAK6B,MAAM0G,uBAAwB,EACnCvI,KAAK8B,KAAKyG,uBAAwB,GAI/BxI,EAAAR,UAAAmF,mBAAP,WACI1E,KAAK4C,gBAAiB,EACtB5C,KAAKyE,gBAIF1E,EAAAR,UAAAkF,aAAP,WACIzE,KAAKsB,UAAW,EAEXtB,KAAK4E,OAGV5E,KAAK4E,MAAM8D,eAIR3I,EAAAR,UAAAoJ,gBAAP,WACI3I,KAAKyE,eAEDzE,KAAK4I,OACL5I,KAAK6I,gBAKN9I,EAAAR,UAAAuJ,MAAP,SAAa/L,EAA2BgM,GACpC/I,KAAK4F,MAAQ7I,EACbiD,KAAK4E,MAAQmE,GAIPhJ,EAAAR,UAAAyJ,WAAV,SAAqBC,GACjB,GAAKjJ,KAAK4C,gBAAmC,IAAjB5C,KAAK+B,SAAkC,IAAjB/B,KAAKgC,SAAoC,IAAnBhC,KAAKiC,UAA7E,CAKA,IAAIiH,EAAUlJ,KAAKI,gBAAgB2E,MAAQ/E,KAAKkC,kBAAoBlC,KAAKI,gBAAgB0F,KACrFqD,EAAUnJ,KAAKI,gBAAgB4E,OAAShF,KAAKmC,kBAAoBnC,KAAKI,gBAAgB2F,IAC1FkD,EAAQG,UAAUF,EAASC,GAG3BF,EAAQI,OAAOrJ,KAAKiC,WAGpBgH,EAAQK,MAAMtJ,KAAK+B,QAAS/B,KAAKgC,SAGjCiH,EAAQG,WAAWF,GAAUC,IAGzBnJ,KAAK4C,gBAAkB5C,KAAKuJ,iBAAmBL,GAAWlJ,KAAKwJ,iBAAmBL,KAClFnJ,KAAKuJ,eAAiBL,EACtBlJ,KAAKwJ,eAAiBL,EACtBnJ,KAAK4C,gBAAiB,EAEtB9C,EAAAuC,SAASoH,cAAcP,GAAUC,EAASnJ,KAAKiC,UAAWjC,KAAK+B,QAAS/B,KAAKgC,QAAShC,KAAK4F,MAAQ5F,KAAK4F,MAAMxD,iBAAmB,KAAMpC,KAAKoC,kBAE5IpC,KAAKoC,iBAAiBsH,YAAY1J,KAAKuC,2BAKrCxC,EAAAR,UAAAoK,aAAV,SAAuBV,GACfjJ,KAAK8C,WACL9C,KAAK6I,eACL7I,KAAK8C,UAAW,GAGhB9C,KAAK4I,QACLK,EAAQW,KAAO5J,KAAK4I,OAGpB5I,KAAKgB,SACLiI,EAAQY,UAAY7J,KAAKgB,QAGzBhB,KAAKE,YACL+I,EAAQa,YAAc9J,KAAK+J,OAAS/J,KAAK+J,OAAOC,MAAQhK,KAAKC,OAASD,KAAKC,SAKzEF,EAAAR,UAAA0K,iBAAV,SAA2BC,EAAwBjB,GA2B/C,OA1BIjJ,KAAKsB,UAAatB,KAAKwB,qBAAqB2I,WAAWD,KACvDlK,KAAKsB,UAAW,EAChBtB,KAAKI,gBAAgBgK,SAASF,GAG9BlK,KAAKqK,YAAYH,EAAejB,GAEhCjJ,KAAKsK,WACLtK,KAAKuK,kBAAkBL,EAAejB,GAGtCjJ,KAAKI,gBAAgB0F,KAAmC,EAA5B9F,KAAKI,gBAAgB0F,KACjD9F,KAAKI,gBAAgB2F,IAAiC,EAA3B/F,KAAKI,gBAAgB2F,IAChD/F,KAAKI,gBAAgB2E,MAAqC,EAA7B/E,KAAKI,gBAAgB2E,MAClD/E,KAAKI,gBAAgB4E,OAAuC,EAA9BhF,KAAKI,gBAAgB4E,OAGnDhF,KAAKwK,sBAAsBN,EAAejB,GAE1CjJ,KAAKwB,qBAAqB4I,SAASF,GAE/BlK,KAAKoE,kBAAkBqG,gBACvBzK,KAAKoE,kBAAkBsG,gBAAgB1K,SAI3CA,KAAKI,gBAAgB0F,KAAOoE,EAAcpE,KAAOoE,EAAcnF,WAI/D/E,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQmF,EAAcpE,UAIvE9F,KAAKI,gBAAgB2F,IAAMmE,EAAcnE,IAAMmE,EAAclF,YAI7DhF,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAASkF,EAAcnE,OAK3E/F,KAAKgJ,WAAWC,GAEZjJ,KAAK2C,kBACL3C,KAAK2C,kBAAmB,GACjB,IAIX3C,KAAK2K,MAAM1B,GACXA,EAAQ2B,QAED,QAID7K,EAAAR,UAAAoL,MAAV,SAAgB1B,GAGZ,GAFAA,EAAQ4B,YAEJ7K,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,cAAe,CAC7D,IAAID,EAAgBvD,KAAKuD,cACrBC,EAAgBxD,KAAKwD,cACrBC,EAAazD,KAAKyD,WAElBqH,EAAmBtC,KAAKuC,IAAIvC,KAAKuC,IAAIxH,EAAe,GAAkB,EAAbE,EAAgB,GACzEuH,EAAoBxC,KAAKyC,IAAIzC,KAAKyC,IAAI1H,EAAe,GAAkB,EAAbE,EAAgB,GAC1EyH,EAAkB1C,KAAKuC,IAAIvC,KAAKuC,IAAIvH,EAAe,GAAkB,EAAbC,EAAgB,GACxE0H,EAAqB3C,KAAKyC,IAAIzC,KAAKyC,IAAIzH,EAAe,GAAkB,EAAbC,EAAgB,GAE/EwF,EAAQmC,KAAKpL,KAAKI,gBAAgB0F,KAAOgF,EACrC9K,KAAKI,gBAAgB2F,IAAMmF,EAC3BlL,KAAKI,gBAAgB2E,MAAQiG,EAAoBF,EACjD9K,KAAKI,gBAAgB4E,OAASmG,EAAqBD,QAEvDjC,EAAQmC,KAAKpL,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,SAKpHjF,EAAAR,UAAA+K,SAAP,WAEQtK,KAAKa,OAAO4E,QACZzF,KAAKI,gBAAgB2E,MAAQ/E,KAAKa,OAAO6E,SAAS1F,KAAK4E,OAEvD5E,KAAKI,gBAAgB2E,OAAS/E,KAAKa,OAAO6E,SAAS1F,KAAK4E,OAGxD5E,KAAKe,QAAQ0E,QACbzF,KAAKI,gBAAgB4E,OAAShF,KAAKe,QAAQ2E,SAAS1F,KAAK4E,OAEzD5E,KAAKI,gBAAgB4E,QAAUhF,KAAKe,QAAQ2E,SAAS1F,KAAK4E,QAKxD7E,EAAAR,UAAAgL,kBAAV,SAA4BL,EAAwBjB,GAChD,IAAIlE,EAAQ/E,KAAKI,gBAAgB2E,MAC7BC,EAAShF,KAAKI,gBAAgB4E,OAE9BqG,EAAcnB,EAAcnF,MAC5BuG,EAAepB,EAAclF,OAG7BoB,EAAI,EACJC,EAAI,EAER,OAAQrG,KAAK2G,qBACT,KAAK5G,EAAQ6G,0BACTR,EAAI,EACJ,MACJ,KAAKrG,EAAQwL,2BACTnF,EAAIiF,EAActG,EAClB,MACJ,KAAKhF,EAAQoB,4BACTiF,GAAKiF,EAActG,GAAS,EAIpC,OAAQ/E,KAAK6G,mBACT,KAAK9G,EAAQ+G,uBACTT,EAAI,EACJ,MACJ,KAAKtG,EAAQyL,0BACTnF,EAAIiF,EAAetG,EACnB,MACJ,KAAKjF,EAAQsB,0BACTgF,GAAKiF,EAAetG,GAAU,EAIlChF,KAAKyB,aAAagE,SAClBzF,KAAKI,gBAAgB0F,MAAQ9F,KAAKyB,aAAaiE,SAAS1F,KAAK4E,OAC7D5E,KAAKI,gBAAgB2E,OAAS/E,KAAKyB,aAAaiE,SAAS1F,KAAK4E,SAE9D5E,KAAKI,gBAAgB0F,MAAQuF,EAAcrL,KAAKyB,aAAaiE,SAAS1F,KAAK4E,OAC3E5E,KAAKI,gBAAgB2E,OAASsG,EAAcrL,KAAKyB,aAAaiE,SAAS1F,KAAK4E,QAG5E5E,KAAK0B,cAAc+D,QACnBzF,KAAKI,gBAAgB2E,OAAS/E,KAAK0B,cAAcgE,SAAS1F,KAAK4E,OAE/D5E,KAAKI,gBAAgB2E,OAASsG,EAAcrL,KAAK0B,cAAcgE,SAAS1F,KAAK4E,OAG7E5E,KAAK2B,YAAY8D,SACjBzF,KAAKI,gBAAgB2F,KAAO/F,KAAK2B,YAAY+D,SAAS1F,KAAK4E,OAC3D5E,KAAKI,gBAAgB4E,QAAUhF,KAAK2B,YAAY+D,SAAS1F,KAAK4E,SAE9D5E,KAAKI,gBAAgB2F,KAAOuF,EAAetL,KAAK2B,YAAY+D,SAAS1F,KAAK4E,OAC1E5E,KAAKI,gBAAgB4E,QAAUsG,EAAetL,KAAK2B,YAAY+D,SAAS1F,KAAK4E,QAG7E5E,KAAK4B,eAAe6D,QACpBzF,KAAKI,gBAAgB4E,QAAUhF,KAAK4B,eAAe8D,SAAS1F,KAAK4E,OAEjE5E,KAAKI,gBAAgB4E,QAAUsG,EAAetL,KAAK4B,eAAe8D,SAAS1F,KAAK4E,OAGhF5E,KAAK6B,MAAM4D,QACXzF,KAAKI,gBAAgB0F,MAAQ9F,KAAK6B,MAAM6D,SAAS1F,KAAK4E,OAEtD5E,KAAKI,gBAAgB0F,MAAQuF,EAAcrL,KAAK6B,MAAM6D,SAAS1F,KAAK4E,OAGpE5E,KAAK8B,KAAK2D,QACVzF,KAAKI,gBAAgB2F,KAAO/F,KAAK8B,KAAK4D,SAAS1F,KAAK4E,OAEpD5E,KAAKI,gBAAgB2F,KAAOuF,EAAetL,KAAK8B,KAAK4D,SAAS1F,KAAK4E,OAGvE5E,KAAKI,gBAAgB0F,MAAQM,EAC7BpG,KAAKI,gBAAgB2F,KAAOM,GAItBtG,EAAAR,UAAA8K,YAAV,SAAsBH,EAAwBjB,KAKpClJ,EAAAR,UAAAiL,sBAAV,SAAgCN,EAAwBjB,KAKjDlJ,EAAAR,UAAAkM,MAAP,SAAavB,EAAwBjB,KAU9BlJ,EAAAR,UAAAmM,SAAP,SAAgBtF,EAAWC,GAQvB,OANArG,KAAKuC,uBAAuBoJ,qBAAqBvF,EAAGC,EAAGrG,KAAKwC,sBAE5D4D,EAAIpG,KAAKwC,qBAAqB4D,EAC9BC,EAAIrG,KAAKwC,qBAAqB6D,IAG1BD,EAAIpG,KAAKI,gBAAgB0F,UAIzBM,EAAIpG,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,WAIrDsB,EAAIrG,KAAKI,gBAAgB2F,SAIzBM,EAAIrG,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,UAIpDhF,KAAKqD,mBACLrD,KAAK4E,MAAMgH,qBAAsB,IAE9B,OAIJ7L,EAAAR,UAAAsM,gBAAP,SAAuBzF,EAAWC,EAAWyF,EAAcC,EAAmBC,GAC1E,SAAKhM,KAAKoD,mBAAqBpD,KAAKiM,WAAajM,KAAKkD,kBAIjDlD,KAAK0L,SAAStF,EAAGC,KAItBrG,KAAKkM,oBAAoBJ,EAAM1F,EAAGC,EAAG0F,EAAWC,IAEzC,KAIJjM,EAAAR,UAAA4M,eAAP,SAAsBC,EAAiBC,GACVrM,KAAK6D,wBAAwB6G,gBAAgB2B,GAAc,EAAGD,EAAQpM,OAE/D,MAAfA,KAAK+J,QAAgB/J,KAAK+J,OAAOoC,eAAeC,EAAQC,IAItEtM,EAAAR,UAAA+M,gBAAP,SAAuBF,GACnB,QAAIpM,KAAKiD,YAAc,MAIG,IAAtBjD,KAAKiD,cACLjD,KAAKiD,YAAc,GAEvBjD,KAAKiD,cAEoBjD,KAAKmE,yBAAyBuG,gBAAgB1K,MAAO,EAAGoM,EAAQpM,OAEzD,MAAfA,KAAK+J,QAAgB/J,KAAK+J,OAAOuC,gBAAgBF,IAE3D,IAIJrM,EAAAR,UAAAgN,cAAP,SAAqBH,GACjBpM,KAAKiD,YAAc,EAEMjD,KAAK+D,uBAAuB2G,gBAAgB1K,MAAO,EAAGoM,EAAQpM,OAEvD,MAAfA,KAAK+J,QAAgB/J,KAAK+J,OAAOwC,cAAcH,IAI7DrM,EAAAR,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,OAAwB,IAApBhM,KAAKgD,aAIThD,KAAKgD,aAELhD,KAAKmD,gBAAgB4I,IAAa,EAET/L,KAAKgE,wBAAwB0G,gBAAgB,IAAI5K,EAAA2M,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQpM,OAEjG,MAAfA,KAAK+J,QAAgB/J,KAAK+J,OAAOyC,eAAeJ,EAAQC,EAAaN,EAAWC,IAE1F,IAIJjM,EAAAR,UAAAmN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/F3M,KAAKgD,WAAa,SAEXhD,KAAKmD,gBAAgB4I,GAE5B,IAAIa,EAA0BD,EAC1BA,IAAgB3M,KAAKiD,YAAc,IAA2B,IAAtBjD,KAAKiD,eAC7C2J,EAAiB5M,KAAKkE,yBAAyBwG,gBAAgB,IAAI5K,EAAA2M,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQpM,OAErGA,KAAKiE,sBAAsByG,gBAAgB,IAAI5K,EAAA2M,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQpM,OAE/F,MAAfA,KAAK+J,QAAgB/J,KAAK+J,OAAO2C,aAAaN,EAAQC,EAAaN,EAAWC,EAAaY,IAIzG7M,EAAAR,UAAAsN,gBAAP,SAAuBd,GACnB,QADmB,IAAAA,MAAA,MACD,OAAdA,EACA/L,KAAK0M,aAAa1M,KAAMJ,EAAA6C,QAAQC,OAAQqJ,EAAW,GAAG,QAEtD,IAAK,IAAI7M,KAAOc,KAAKmD,gBACjBnD,KAAK0M,aAAa1M,KAAMJ,EAAA6C,QAAQC,QAASxD,EAAe,GAAG,IAMhEa,EAAAR,UAAA2M,oBAAP,SAA2BJ,EAAc1F,EAAWC,EAAW0F,EAAmBC,GAE9E,GADAhM,KAAK+C,cAAc+J,eAAe1G,EAAGC,GACjCyF,IAASlM,EAAAmN,kBAAkBC,YAAa,CACxChN,KAAKmM,eAAenM,KAAMA,KAAK+C,eAE/B,IAAIkK,EAAsBjN,KAAK4E,MAAMsI,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwBjN,MAC/CiN,EAAoBV,cAAcvM,MAGlCiN,IAAwBjN,MACxBA,KAAKsM,gBAAgBtM,MAGzBA,KAAK4E,MAAMsI,iBAAiBnB,GAAa/L,MAClC,EAGX,OAAI8L,IAASlM,EAAAmN,kBAAkBI,aAC3BnN,KAAKwM,eAAexM,KAAMA,KAAK+C,cAAegJ,EAAWC,GACzDhM,KAAK4E,MAAMwI,iBAAiBrB,GAAa/L,KACzCA,KAAK4E,MAAMyI,mBAAqBrN,MACzB,GAGP8L,IAASlM,EAAAmN,kBAAkBO,YACvBtN,KAAK4E,MAAMwI,iBAAiBrB,IAC5B/L,KAAK4E,MAAMwI,iBAAiBrB,GAAWW,aAAa1M,KAAMA,KAAK+C,cAAegJ,EAAWC,GAAa,UAEnGhM,KAAK4E,MAAMwI,iBAAiBrB,IAC5B,IAMPhM,EAAAR,UAAAsJ,aAAR,YACS7I,KAAK4I,OAAU5I,KAAK8C,YAIrB9C,KAAKiB,OACLjB,KAAK4I,MAAQ5I,KAAKiB,OAAOsM,UAAY,IAAMvN,KAAKiB,OAAOuM,WAAa,IAAMxN,KAAKyN,iBAAmB,MAAQzN,KAAKiB,OAAOyM,WAEtH1N,KAAK4I,MAAQ5I,KAAKQ,WAAa,IAAMR,KAAKS,YAAc,IAAMT,KAAKyN,iBAAmB,MAAQzN,KAAKO,YAGvGP,KAAKuE,YAAcxE,EAAQ4N,eAAe3N,KAAK4I,SAI5C7I,EAAAR,UAAAqO,QAAP,WACI5N,KAAKoE,kBAAkByJ,QACvB7N,KAAKqE,sBAAsBwJ,QAC3B7N,KAAKgE,wBAAwB6J,QAC7B7N,KAAKmE,yBAAyB0J,QAC9B7N,KAAK6D,wBAAwBgK,QAC7B7N,KAAK+D,uBAAuB8J,QAC5B7N,KAAKiE,sBAAsB4J,QAC3B7N,KAAKkE,yBAAyB2J,QAE1B7N,KAAKqF,gBAAkBrF,KAAKiB,SAC5BjB,KAAKiB,OAAOkE,oBAAoBC,OAAOpF,KAAKqF,gBAC5CrF,KAAKqF,eAAiB,MAGtBrF,KAAK4F,QACL5F,KAAK4F,MAAMkI,cAAc9N,MACzBA,KAAK4F,MAAQ,MAGL5F,KAAK4E,MAAMkD,gBAAgBC,QAAQ/H,OAClC,GACTA,KAAK2H,aAAa,OAc1BtJ,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQgO,4DAInB1P,OAAAC,eAAkByB,EAAA,kCAAlB,WACI,OAAOA,EAAQiO,6DAInB3P,OAAAC,eAAkByB,EAAA,mCAAlB,WACI,OAAOA,EAAQkO,8DAInB5P,OAAAC,eAAkByB,EAAA,8BAAlB,WACI,OAAOA,EAAQmO,yDAInB7P,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQoO,4DAInB9P,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQqO,4DAMLrO,EAAA4N,eAAd,SAA6B/D,GAEzB,GAAI7J,EAAQsO,iBAAiBzE,GACzB,OAAO7J,EAAQsO,iBAAiBzE,GAGpC,IAAI0E,EAAOC,SAASC,cAAc,QAClCF,EAAKG,UAAY,KACjBH,EAAKI,MAAM9E,KAAOA,EAElB,IAAI+E,EAAQJ,SAASC,cAAc,OACnCG,EAAMD,MAAME,QAAU,eACtBD,EAAMD,MAAM3J,MAAQ,MACpB4J,EAAMD,MAAM1J,OAAS,MACrB2J,EAAMD,MAAMG,cAAgB,SAE5B,IAAIC,EAAMP,SAASC,cAAc,OACjCM,EAAIC,YAAYT,GAChBQ,EAAIC,YAAYJ,GAEhBJ,SAASS,KAAKD,YAAYD,GAE1B,IAAIG,EAAa,EACbC,EAAa,EACjB,IACIA,EAAaP,EAAMQ,wBAAwBpJ,IAAMuI,EAAKa,wBAAwBpJ,IAC9E4I,EAAMD,MAAMG,cAAgB,WAC5BI,EAAaN,EAAMQ,wBAAwBpJ,IAAMuI,EAAKa,wBAAwBpJ,YAE9EwI,SAASS,KAAKI,YAAYN,GAE9B,IAAI5I,GAAWmJ,OAAQJ,EAAYjK,OAAQkK,EAAYI,QAASJ,EAAaD,GAG7E,OAFAlP,EAAQsO,iBAAiBzE,GAAQ1D,EAE1BA,GAkBMnG,EAAAwP,YAAjB,SAA6BnJ,EAAWC,EAAWtB,EAAeC,EAAgBiE,GAC9EA,EAAQG,UAAUhD,EAAGC,GACrB4C,EAAQK,MAAMvE,EAAOC,GAErBiE,EAAQ4B,YACR5B,EAAQuG,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIhH,KAAKiH,IACjCxG,EAAQyG,YAERzG,EAAQK,MAAM,EAAIvE,EAAO,EAAIC,GAC7BiE,EAAQG,WAAWhD,GAAIC,IAtGZtG,EAAAgO,2BAA6B,EAC7BhO,EAAAiO,4BAA8B,EAC9BjO,EAAAkO,6BAA+B,EAE/BlO,EAAAmO,wBAA0B,EAC1BnO,EAAAoO,2BAA6B,EAC7BpO,EAAAqO,2BAA6B,EAgC7BrO,EAAAsO,oBAoDDtO,EAAA4P,UAAuI,aAczJ5P,EAr4CA,GAAa9C,EAAA8C,yFCPb,IAAAY,EAAA,WAcI,SAAAA,EAAmB/B,EAERgR,EAEAC,QAFA,IAAAD,MAAOjP,EAAaC,qBAEpB,IAAAiP,OAAA,GAFA7P,KAAA4P,OAEA5P,KAAA6P,uBAjBH7P,KAAA8P,OAAS,EAKV9P,KAAAuI,uBAAwB,EAa3BvI,KAAK8P,OAASlR,EA0ItB,OAtIIP,OAAAC,eAAWqC,EAAApB,UAAA,oBAAX,WACI,OAAOS,KAAK4P,OAASjP,EAAaG,qDAItCzC,OAAAC,eAAWqC,EAAApB,UAAA,eAAX,WACI,OAAOS,KAAK4P,OAASjP,EAAaC,gDAItCvC,OAAAC,eAAWqC,EAAApB,UAAA,qBAAX,WACI,OAAOS,KAAK8P,wCASTnP,EAAApB,UAAAuF,gBAAP,SAAuBiE,EAA8BgH,GACjD,OAAI/P,KAAKyF,QACEzF,KAAK0F,SAASqD,GAGlB/I,KAAK0F,SAASqD,GAAQgH,GAQ1BpP,EAAApB,UAAAmG,SAAP,SAAgBqD,GACZ,GAAIA,IAAS/I,KAAKuI,uBAAyBvI,KAAK4P,OAASjP,EAAaG,oBAAqB,CACvF,IAAIiE,EAAgB,EAChBC,EAAiB,EAUrB,GARI+D,EAAKiH,aACLjL,EAAS/E,KAAK8P,OAAS/G,EAAKkH,UAAUlL,MAASgE,EAAKiH,YAGpDjH,EAAKmH,cACLlL,EAAUhF,KAAK8P,OAAS/G,EAAKkH,UAAUjL,OAAU+D,EAAKmH,aAGtDnH,EAAKoH,kBAAoBpH,EAAKiH,YAAcjH,EAAKmH,YACjD,OAAO5S,OAAO8S,WAAa9S,OAAO+S,YAActL,EAAQC,EAG5D,GAAI+D,EAAKiH,WACL,OAAOjL,EAGX,GAAIgE,EAAKmH,YACL,OAAOlL,EAGf,OAAOhF,KAAK8P,QAQTnP,EAAApB,UAAAoF,SAAP,SAAgBoE,GACZ,OAAQ/I,KAAK4P,MACT,KAAKjP,EAAaG,oBACd,OAA8B,IAAtBd,KAAK0F,SAASqD,GAAe,IACzC,KAAKpI,EAAaC,eACd,OAAOZ,KAAK0F,SAASqD,GAAQ,KAGrC,OAAO/I,KAAK4P,KAAKjL,YAQdhE,EAAApB,UAAAsF,WAAP,SAAkByL,GACd,IAAIC,EAAQ5P,EAAa6P,OAAOC,KAAKH,EAAO3L,YAE5C,IAAK4L,GAA0B,IAAjBA,EAAMG,OAChB,OAAO,EAGX,IAAIC,EAAcC,WAAWL,EAAM,IAC/BM,EAAa7Q,KAAK4P,KAQtB,GANK5P,KAAK6P,sBACFc,EAAc,IACdA,EAAc,GAID,IAAjBJ,EAAMG,OACN,OAAQH,EAAM,IACV,IAAK,KACDM,EAAalQ,EAAaC,eAC1B,MACJ,IAAK,IACDiQ,EAAalQ,EAAaG,oBAC1B6P,GAAe,IAK3B,OAAIA,IAAgB3Q,KAAK8P,QAAUe,IAAe7Q,KAAK4P,QAIvD5P,KAAK8P,OAASa,EACd3Q,KAAK4P,KAAOiB,GAEL,IASXxS,OAAAC,eAAkBqC,EAAA,2BAAlB,WACI,OAAOA,EAAamQ,sDAIxBzS,OAAAC,eAAkBqC,EAAA,sBAAlB,WACI,OAAOA,EAAaoQ,iDAXTpQ,EAAA6P,OAAS,0BACT7P,EAAAmQ,qBAAuB,EACvBnQ,EAAAoQ,gBAAkB,EAWrCpQ,EA7JA,GAAa1D,EAAA0D,qaCLb,IAAAqQ,EAAAvT,EAAA,IACAmC,EAAAnC,EAAA,GAKAwT,EAAA,SAAAC,GAuCI,SAAAD,EAAY/S,GAAZ,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YAvCPkF,EAAAiM,cAAe,EAKbjM,EAAAkM,UAAY,IAAIC,QAmJ9B,OAzJiCC,EAAAL,EAAAC,GAW7B7S,OAAAC,eAAW2S,EAAA1R,UAAA,gBAAX,WACI,OAAOS,KAAKoR,2CAOhB/S,OAAAC,eAAW2S,EAAA1R,UAAA,mBAAX,WACI,OAAOS,KAAKmR,kBAGhB,SAAuBvS,GACfoB,KAAKmR,eAAiBvS,IAI1BoB,KAAKmR,aAAevS,EAEfoB,KAAKmR,cACNnR,KAAKuR,qDAgBNN,EAAA1R,UAAAiS,aAAP,WAEI,OADAxR,KAAKuR,mBACEvR,MAQJiR,EAAA1R,UAAAkS,gBAAP,SAAuBC,GACnB,OAA4C,IAArC1R,KAAKoR,UAAUrJ,QAAQ2J,IAQ3BT,EAAA1R,UAAAoS,WAAP,SAAkBD,GAGd,OAAe,IAFH1R,KAAKoR,UAAUrJ,QAAQ2J,GAGxB1R,MAEX0R,EAAQ3H,OAAS/J,KACjB0R,EAAQ9M,MAAQ5E,KAAK4E,MAErB5E,KAAKoR,UAAUlJ,KAAKwJ,GAEhB1R,KAAK4E,MAAMgN,eACXF,EAAQG,aAAa7R,KAAK4E,MAAMgN,aAAaE,mBAEzCJ,EAAQK,OACRL,EAAQK,KAAKhI,OAAS/J,KAAK+R,MAG1B/R,KAAKgS,aACNhS,KAAKuR,oBAINvR,OAODiR,EAAA1R,UAAAgS,iBAAV,aAGUN,EAAA1R,UAAA0S,YAAV,SAAsBxL,GAClB,OAAO,IAAI7G,EAAAsS,cAAc,gBAAiBzL,IAQvCwK,EAAA1R,UAAAuO,cAAP,SAAqB4D,GACjB,IAAI7J,EAAQ7H,KAAKoR,UAAUrJ,QAAQ2J,GASnC,OAPe,IAAX7J,IACA7H,KAAKoR,UAAUnJ,OAAOJ,EAAO,GAE7B6J,EAAQ3H,OAAS,KACjB2H,EAAQS,gBAGLnS,MAGDiR,EAAA1R,UAAA+E,aAAV,WACI,MAAO,eAMJ2M,EAAA1R,UAAAqO,QAAP,WACI,IAAoB,IAAAwE,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJxE,UAGZ5N,KAAKoR,aAELF,EAAA3R,UAAMqO,QAAO9P,KAAAkC,OAIMiR,EAAAqB,kBAAoB,EAGpBrB,EAAAsB,uBAAyB,EAGzBtB,EAAAuB,+BAAiC,EAGjCvB,EAAAwB,wBAA0B,EAG1BxB,EAAAyB,gCAAkC,EAE7DzB,EAzJA,CAAiCD,EAAA2B,WAApB1V,EAAAgU,oaCNb,IAAA2B,EAAAnV,EAAA,GACAoC,EAAApC,EAAA,GAQAoV,EAAA,SAAA3B,GAyEI,SAAA2B,EAAmB3U,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAvETgH,EAAAkM,UAAY,IAAIC,MAEhBnM,EAAA4N,oBAAsBjT,EAAAQ,QAAQC,QAI9B4E,EAAA6N,uBAAwB,EAExB7N,EAAA8N,wBAAyB,IAgUvC,OA1U+B1B,EAAAuB,EAAA3B,GAa3B7S,OAAAC,eAAWuU,EAAAtT,UAAA,6BAAX,WACI,OAAOS,KAAKgT,4BAGhB,SAAiCpU,GACzBoB,KAAKgT,yBAA2BpU,IAIpCoB,KAAKgT,uBAAyBpU,EAE1BA,IACAoB,KAAKgF,OAAS,QAGlBhF,KAAKyE,iDAITpG,OAAAC,eAAWuU,EAAAtT,UAAA,4BAAX,WACI,OAAOS,KAAK+S,2BAGhB,SAAgCnU,GACxBoB,KAAK+S,wBAA0BnU,IAInCoB,KAAK+S,sBAAwBnU,EAEzBA,IACAoB,KAAK+E,MAAQ,QAGjB/E,KAAKyE,iDAITpG,OAAAC,eAAWuU,EAAAtT,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWuU,EAAAtT,UAAA,gBAAX,WACI,OAAOS,KAAKoR,2CAWNyB,EAAAtT,UAAA+E,aAAV,WACI,MAAO,aAQJuO,EAAAtT,UAAA2T,eAAP,SAAsBhV,GAClB,IAAkB,IAAAkU,EAAA,EAAAC,EAAArS,KAAKmT,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA5B,IAAIgB,EAAKf,EAAAD,GACV,GAAIgB,EAAMlV,OAASA,EACf,OAAOkV,EAIf,OAAO,MASJP,EAAAtT,UAAA8T,eAAP,SAAsBnV,EAAc4N,GAChC,IAAkB,IAAAsG,EAAA,EAAAC,EAAArS,KAAKmT,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA5B,IAAIgB,EAAKf,EAAAD,GACV,GAAIgB,EAAME,WAAaxH,EACnB,OAAOsH,EAIf,OAAO,MAQJP,EAAAtT,UAAAkS,gBAAP,SAAuBC,GACnB,OAA2C,IAApC1R,KAAKmT,SAASpL,QAAQ2J,IAQ1BmB,EAAAtT,UAAAoS,WAAP,SAAkBD,GACd,OAAKA,GAMU,IAFH1R,KAAKoR,UAAUrJ,QAAQ2J,GAGxB1R,MAEX0R,EAAQ5I,MAAM9I,KAAMA,KAAK4E,OAEzB8M,EAAQ/I,kBAER3I,KAAK6F,gBAAgB6L,GAErB1R,KAAKyE,eACEzE,MAfIA,MAuBR6S,EAAAtT,UAAAuO,cAAP,SAAqB4D,GACjB,IAAI7J,EAAQ7H,KAAKoR,UAAUrJ,QAAQ2J,GAenC,OAbe,IAAX7J,IACA7H,KAAKoR,UAAUnJ,OAAOJ,EAAO,GAE7B6J,EAAQ3H,OAAS,MAGrB2H,EAAQ/J,aAAa,MAEjB3H,KAAK4E,OACL5E,KAAK4E,MAAM2O,0BAA0B7B,GAGzC1R,KAAKyE,eACEzE,MAIJ6S,EAAAtT,UAAAsG,gBAAP,SAAuB6L,GACnB1R,KAAK8N,cAAc4D,GAEnB,IAAK,IAAI7J,EAAQ,EAAGA,EAAQ7H,KAAKoR,UAAUV,OAAQ7I,IAC/C,GAAI7H,KAAKoR,UAAUvJ,GAAOlC,OAAS+L,EAAQ/L,OAEvC,YADA3F,KAAKoR,UAAUnJ,OAAOJ,EAAO,EAAG6J,GAKxC1R,KAAKoR,UAAUlJ,KAAKwJ,GAEpBA,EAAQ3H,OAAS/J,KAEjBA,KAAKyE,gBAIFoO,EAAAtT,UAAAmF,mBAAP,WACIwM,EAAA3R,UAAMmF,mBAAkB5G,KAAAkC,MAExB,IAAK,IAAI6H,EAAQ,EAAGA,EAAQ7H,KAAKoR,UAAUV,OAAQ7I,IAC/C7H,KAAKoR,UAAUvJ,GAAOnD,sBAKvBmO,EAAAtT,UAAAoJ,gBAAP,WACIuI,EAAA3R,UAAMoJ,gBAAe7K,KAAAkC,MAErB,IAAK,IAAI6H,EAAQ,EAAGA,EAAQ7H,KAAKoR,UAAUV,OAAQ7I,IAC/C7H,KAAKoR,UAAUvJ,GAAOc,mBAKpBkK,EAAAtT,UAAAiU,WAAV,SAAqBvK,GACbjJ,KAAKiT,eACDjT,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjCyF,EAAQY,UAAY7J,KAAKiT,YACzBhK,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,SAEnHhF,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,KAM7BqP,EAAAtT,UAAAuJ,MAAP,SAAa/L,EAA2BgM,GACpCmI,EAAA3R,UAAMuJ,MAAKhL,KAAAkC,KAACjD,EAAMgM,GAElB,IAAkB,IAAAqJ,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJtJ,MAAM/L,EAAMgM,KAKnB8J,EAAAtT,UAAAkM,MAAP,SAAavB,EAAwBjB,GACjC,GAAKjJ,KAAKiM,YAAajM,KAAKwH,cAA5B,CAOA,GAJAyB,EAAQyK,OAER1T,KAAK2J,aAAaV,GAEdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAC/CjJ,KAAKwT,WAAWvK,GAEhBjJ,KAAK2T,iBAAiB1K,GAKtB,IAHA,IAAI2K,GAAiB,EACjBC,GAAkB,EAEJzB,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACNgB,EAAMnH,YAAcmH,EAAM5L,gBAC1B4L,EAAM7R,mBAAmB6I,SAASpK,KAAK8S,qBACvCM,EAAM3H,MAAMzL,KAAK8S,oBAAqB7J,GAElCmK,EAAM/O,sBAAsBoG,gBAC5B2I,EAAM/O,sBAAsBqG,gBAAgB0I,GAG5CpT,KAAK8T,sBAAwBV,EAAMvS,OAAO4E,UAC1CmO,EAAgBpL,KAAKyC,IAAI2I,EAAeR,EAAMhT,gBAAgB2E,QAE9D/E,KAAK+T,uBAAyBX,EAAMrS,QAAQ0E,UAC5CoO,EAAiBrL,KAAKyC,IAAI4I,EAAgBT,EAAMhT,gBAAgB4E,UAKxEhF,KAAK8T,sBAAwBF,GAAiB,IAC9C5T,KAAK+E,MAAQ6O,EAAgB,MAE7B5T,KAAK+T,uBAAyBF,GAAkB,IAChD7T,KAAKgF,OAAS6O,EAAiB,MAGvC5K,EAAQ+K,UAEJhU,KAAKqE,sBAAsBoG,gBAC3BzK,KAAKqE,sBAAsBqG,gBAAgB1K,QAK5C6S,EAAAtT,UAAAsM,gBAAP,SAAuBzF,EAAWC,EAAWyF,EAAcC,EAAmBC,GAC1E,IAAKhM,KAAKiM,WAAajM,KAAKwH,cACxB,OAAO,EAGX,IAAK0J,EAAA3R,UAAMmM,SAAQ5N,KAAAkC,KAACoG,EAAGC,GACnB,OAAO,EAIX,IAAK,IAAIwB,EAAQ7H,KAAKoR,UAAUV,OAAS,EAAG7I,GAAS,EAAGA,IAAS,CAE7D,GADY7H,KAAKoR,UAAUvJ,GACjBgE,gBAAgBzF,EAAGC,EAAGyF,EAAMC,EAAWC,GAC7C,OAAO,EAIf,QAAKhM,KAAKoD,kBAIHpD,KAAKkM,oBAAoBJ,EAAM1F,EAAGC,EAAG0F,EAAWC,IAIjD6G,EAAAtT,UAAAoU,iBAAV,SAA2B1K,KAKjB4J,EAAAtT,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GACpDiI,EAAA3R,UAAMiL,sBAAqB1M,KAAAkC,KAACkK,EAAejB,GAE3CjJ,KAAK8S,oBAAoB1I,SAASpK,KAAKI,kBAIpCyS,EAAAtT,UAAAqO,QAAP,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAEb,IAAoB,IAAAoS,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJxE,YAGpBiF,EA1UA,CAA+BD,EAAA7S,SAAlB9C,EAAA4V,2FCLb,IAAAxS,EAAA,WAQI,SAAAA,EAEWyF,EAEAC,EAEAhB,EAEAC,GANAhF,KAAA8F,OAEA9F,KAAA+F,MAEA/F,KAAA+E,QAEA/E,KAAAgF,SAgDf,OAxCW3E,EAAAd,UAAA6K,SAAP,SAAgB6J,GACZjU,KAAK8F,KAAOmO,EAAMnO,KAClB9F,KAAK+F,IAAMkO,EAAMlO,IACjB/F,KAAK+E,MAAQkP,EAAMlP,MACnB/E,KAAKgF,OAASiP,EAAMjP,QAQjB3E,EAAAd,UAAA4K,WAAP,SAAkB8J,GAEd,OAAIjU,KAAK8F,OAASmO,EAAMnO,OAIpB9F,KAAK+F,MAAQkO,EAAMlO,MAInB/F,KAAK+E,QAAUkP,EAAMlP,OAIrB/E,KAAKgF,SAAWiP,EAAMjP,UAWhB3E,EAAAC,MAAd,WACI,OAAO,IAAID,EAAQ,EAAG,EAAG,EAAG,IAEpCA,EAhEA,GAAapD,EAAAoD,gaCJb,IAAA6T,EAAAzW,EAAA,GACAmC,EAAAnC,EAAA,GAMA0W,EAAA,SAAAjD,GAsFI,SAAAiD,IAAA,IAAAjP,EACIgM,EAAApT,KAAAkC,OAAOA,YAtFHkF,EAAAkP,SAAW,GACXlP,EAAAmP,MAAQ,EACRnP,EAAAoP,eAAgB,EAEhBpP,EAAAqP,aAAeL,EAAAjD,YAAYsB,uBAQ5BrN,EAAAsP,OAAS,IA0KpB,OAvL+ClD,EAAA6C,EAAAjD,GAyB3C7S,OAAAC,eAAW6V,EAAA5U,UAAA,mBAAX,WACI,OAAOS,KAAKuU,kBAGhB,SAAuB3V,GAAvB,IAAAsG,EAAAlF,KACQA,KAAKuU,eAAiB3V,IAI1BoB,KAAKuU,aAAe3V,EAEpBgB,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAQblT,OAAAC,eAAW6V,EAAA5U,UAAA,eAAX,WACI,OAAOS,KAAKoU,cAGhB,SAAmBxV,GAAnB,IAAAsG,EAAAlF,KACQA,KAAKoU,WAAaxV,IAItBoB,KAAKoU,SAAWxV,EAChBoB,KAAKsU,eAAgB,EAErB1U,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAQblT,OAAAC,eAAW6V,EAAA5U,UAAA,YAAX,WACI,OAAOS,KAAKqU,WAGhB,SAAgBzV,GAAhB,IAAAsG,EAAAlF,KACQA,KAAKqU,QAAUzV,IAInBoB,KAAKqU,MAAQzV,EACboB,KAAKsU,eAAgB,EAErB1U,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAWH4C,EAAA5U,UAAAgS,iBAAV,WACIvR,KAAK0U,WAAa,EAClB1U,KAAK2U,YAAc,EAQnB,IAPA,IAAIC,EAAO,EACPC,EAAU,EACVC,EAAe,EAEfC,EAAsBnV,EAAAwH,OAAO4N,OAAOhV,KAAK+R,KAAMkD,oBAAmB,IAGpD7C,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAC9B,IADKgB,EAAKf,EAAAD,IACCxK,KAAX,CAIAkN,IACA1B,EAAMxL,KAAKqN,oBAAmB,GAG9B,IAAIC,EAAc9B,EAAMxL,KAAKuN,8BACzBC,EAAaxV,EAAAyV,IAAInO,QAAQ,GACzBoO,EAAO1V,EAAAyV,IAAInO,QAAQ,GAEvBgO,EAAYjK,IAAIsK,cAAcL,EAAYnK,IAAKuK,GAE/CA,EAAKE,aAAa,IAElB5V,EAAAsH,QAAQuO,qBAAqBH,EAAMP,EAAqBK,GAExDpV,KAAK0U,WAAalM,KAAKyC,IAAIjL,KAAK0U,WAA2B,EAAfU,EAAWhP,GACvDpG,KAAK2U,YAAcnM,KAAKyC,IAAIjL,KAAK2U,YAA4B,EAAfS,EAAW/O,IAG7DrG,KAAK0U,YAA4B,EAAd1U,KAAKwU,OACxBxU,KAAK2U,aAA6B,EAAd3U,KAAKwU,OAGrBxU,KAAKsU,eACLO,EAAU7U,KAAKoU,SACfQ,EAAOpM,KAAKkN,KAAKZ,EAAe9U,KAAKoU,YAErCQ,EAAO5U,KAAKqU,MACZQ,EAAUrM,KAAKkN,KAAKZ,EAAe9U,KAAKqU,QAG5C,IAAIsB,EAA0B,GAAVd,EAAiB7U,KAAK0U,WACtCkB,EAAuB,GAAPhB,EAAc5U,KAAK2U,YACnCkB,KACAC,EAAc,EAElB,GAAI9V,KAAKsU,cACL,IAAK,IAAI7V,EAAI,EAAGA,EAAImW,EAAMnW,IACtB,IAAK,IAAIT,EAAI,EAAGA,EAAI6W,IAChBgB,EAAS3N,KAAK,IAAItI,EAAAsH,QAASlJ,EAAIgC,KAAK0U,WAAciB,EAAe3V,KAAK0U,WAAa,EAAIjW,EAAIuB,KAAK2U,YAAeiB,EAAe5V,KAAK2U,YAAc,EAAG,QACpJmB,EACkBhB,IAHO9W,UASjC,IAASA,EAAI,EAAGA,EAAI6W,EAAS7W,IACzB,IAASS,EAAI,EAAGA,EAAImW,IAChBiB,EAAS3N,KAAK,IAAItI,EAAAsH,QAASlJ,EAAIgC,KAAK0U,WAAciB,EAAe3V,KAAK0U,WAAa,EAAIjW,EAAIuB,KAAK2U,YAAeiB,EAAe5V,KAAK2U,YAAc,EAAG,QACpJmB,EACkBhB,IAHIrW,KAUlCqX,EAAc,EACd,IAAkB,IAAAC,EAAA,EAAAC,EAAAhW,KAAKoR,UAAL2E,EAAAC,EAAAtF,OAAAqF,IAAgB,CAA7B,IAAI3C,KAAK4C,EAAAD,IACCnO,OAIX5H,KAAKiW,aAAa7C,EAAOyC,EAASC,IAElCA,KAGJ9V,KAAKkW,oBAOC/B,EAAA5U,UAAA2W,iBAAV,aAGJ/B,EAvLA,CAA+CD,EAAAjD,aAAzBhU,EAAAkX,yaCPtB,IAQYgC,EARZvW,EAAAnC,EAAA,GAEAkC,EAAAlC,EAAA,GACAmV,EAAAnV,EAAA,IAKA,SAAY0Y,GAIRA,IAAA,eAKAA,IAAA,uBAKAA,IAAA,uBAdJ,CAAYA,EAAAlZ,EAAAkZ,eAAAlZ,EAAAkZ,kBAoBZ,IAAAC,EAAA,SAAAlF,GAoLI,SAAAkF,EAIWlY,EACPoQ,QAAA,IAAAA,MAAA,IALJ,IAAApJ,EAMIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YAFJkF,EAAAhH,OAvLHgH,EAAAmR,MAAQ,GACRnR,EAAAoR,cAAgBH,EAAaI,KAC7BrR,EAAAsR,yBAA2B5D,EAAA7S,QAAQoB,4BACnC+D,EAAAuR,uBAAyB7D,EAAA7S,QAAQsB,0BAGjC6D,EAAAwR,cAAwB,EACxBxR,EAAAyR,aAA6B,IAAIhX,EAAAgB,aAAa,GAC9CuE,EAAA0R,cAAwB,EACxB1R,EAAA2R,cAAwB,QAIzB3R,EAAA4R,wBAA0B,IAAIlX,EAAAkE,WAK9BoB,EAAA6R,uBAAyB,IAAInX,EAAAkE,WAyKhCoB,EAAKoJ,KAAOA,IAsMpB,OAlY+BgD,EAAA8E,EAAAlF,GAwB3B7S,OAAAC,eAAW8X,EAAA7W,UAAA,aAAX,WACI,OAAOS,KAAKgX,wCAMhB3Y,OAAAC,eAAW8X,EAAA7W,UAAA,mBAAX,WACI,OAAOS,KAAK0W,kBAMhB,SAAuB9X,GACnBoB,KAAK0W,aAAe9X,EAEhBoB,KAAK0W,eACL1W,KAAKa,OAAO0H,uBAAwB,EACpCvI,KAAKe,QAAQwH,uBAAwB,oCAO7ClK,OAAAC,eAAW8X,EAAA7W,UAAA,oBAAX,WACI,OAAOS,KAAKsW,mBAMhB,SAAwB1X,GAChBoB,KAAKsW,gBAAkB1X,IAG3BoB,KAAKsW,eAAiB1X,EACtBoB,KAAKyE,iDAMTpG,OAAAC,eAAW8X,EAAA7W,UAAA,YAAX,WACI,OAAOS,KAAKqW,WAMhB,SAAgBzX,GACRoB,KAAKqW,QAAUzX,IAGnBoB,KAAKqW,MAAQzX,EACboB,KAAKyE,eAELzE,KAAK8W,wBAAwBpM,gBAAgB1K,wCAMjD3B,OAAAC,eAAW8X,EAAA7W,UAAA,+BAAX,WACI,OAAOS,KAAKwW,8BAMhB,SAAmC5X,GAC3BoB,KAAKwW,2BAA6B5X,IAItCoB,KAAKwW,yBAA2B5X,EAChCoB,KAAKyE,iDAMTpG,OAAAC,eAAW8X,EAAA7W,UAAA,6BAAX,WACI,OAAOS,KAAKyW,4BAMhB,SAAiC7X,GACzBoB,KAAKyW,yBAA2B7X,IAIpCoB,KAAKyW,uBAAyB7X,EAC9BoB,KAAKyE,iDAMTpG,OAAAC,eAAW8X,EAAA7W,UAAA,mBASX,WACI,OAAOS,KAAK2W,aAAahS,SAAS3E,KAAK4E,YAV3C,SAAuBhG,GACfoB,KAAK2W,aAAa9R,WAAWjG,IAC7BoB,KAAKyE,gDAcbpG,OAAAC,eAAW8X,EAAA7W,UAAA,oBAAX,WACI,OAAOS,KAAK4W,mBAMhB,SAAwBhY,GAChBoB,KAAK4W,gBAAkBhY,IAG3BoB,KAAK4W,cAAgBhY,EACrBoB,KAAKyE,iDAMTpG,OAAAC,eAAW8X,EAAA7W,UAAA,oBAAX,WACI,OAAOS,KAAK6W,mBAMhB,SAAwBjY,GAChBoB,KAAK6W,gBAAkBjY,IAG3BoB,KAAK6W,cAAgBjY,EACrBoB,KAAKyE,iDAmBC2R,EAAA7W,UAAA+E,aAAV,WACI,MAAO,aAGH8R,EAAA7W,UAAA0X,UAAR,SAAkB3I,EAAc4I,EAAmB7Q,EAAW4C,GAC1D,IAAIlE,EAAQ/E,KAAKI,gBAAgB2E,MAC7BqB,EAAI,EACR,OAAQpG,KAAKwW,0BACT,KAAK5D,EAAA7S,QAAQ6G,0BACTR,EAAI,EACJ,MACJ,KAAKwM,EAAA7S,QAAQwL,2BACTnF,EAAIrB,EAAQmS,EACZ,MACJ,KAAKtE,EAAA7S,QAAQoB,4BACTiF,GAAKrB,EAAQmS,GAAa,GAI9BlX,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAG7BxD,KAAKmX,cACLlO,EAAQmO,WAAW9I,EAAMtO,KAAKI,gBAAgB0F,KAAOM,EAAGC,GAE5D4C,EAAQoO,SAAS/I,EAAMtO,KAAKI,gBAAgB0F,KAAOM,EAAGC,IAInD+P,EAAA7W,UAAAkM,MAAP,SAAavB,EAAwBjB,GACjCA,EAAQyK,OAER1T,KAAK2J,aAAaV,GAEdjJ,KAAKiK,iBAAiBC,EAAejB,IAErCjJ,KAAKsX,aAAarO,GAEtBA,EAAQ+K,WAGFoC,EAAA7W,UAAAoK,aAAV,SAAuBV,GACnBiI,EAAA3R,UAAMoK,aAAY7L,KAAAkC,KAACiJ,GACfjJ,KAAKmX,eACLlO,EAAQsO,UAAYvX,KAAKmX,aACzBlO,EAAQuO,YAAcxX,KAAKyX,eAIzBrB,EAAA7W,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GACpDjJ,KAAKgX,OAAShX,KAAK0X,YAAY1X,KAAKI,gBAAgB2E,MAAOkE,GAC3DjJ,KAAK+W,uBAAuBrM,gBAAgB1K,OAGtCoW,EAAA7W,UAAAmY,YAAV,SAAsBC,EAAkB1O,GACpC,IAAI2O,KACAZ,EAAShX,KAAKsO,KAAKuJ,MAAM,MAE7B,GAAI7X,KAAKsW,gBAAkBH,EAAa2B,UAAa9X,KAAK0W,aAInD,GAAI1W,KAAKsW,gBAAkBH,EAAa4B,UAAa/X,KAAK0W,aAK7D,IAAkB,IAAAX,EAAA,EAAAiC,EAAAhB,EAAAjB,EAAAiC,EAAAtH,OAAAqF,IAAQ,CAAjBkC,EAAKD,EAAAjC,GACV6B,EAAM1P,KAAKlI,KAAKkY,WAAWD,EAAOhP,SALtC,IAAkB,IAAAoJ,EAAA,EAAA8F,EAAAnB,EAAA3E,EAAA8F,EAAAzH,OAAA2B,IAAQ,CAArB,IAAI4F,EAAKE,EAAA9F,GACVuF,EAAM1P,KAAIkQ,MAAVR,EAAc5X,KAAKqY,mBAAmBJ,EAAON,EAAU1O,SAL3D,IAAkB,IAAAmJ,EAAA,EAAAkG,EAAAtB,EAAA5E,EAAAkG,EAAA5H,OAAA0B,IAAQ,CAArB,IAAI6F,EAAKK,EAAAlG,GACVwF,EAAM1P,KAAKlI,KAAKuY,mBAAmBN,EAAON,EAAU1O,IAY5D,OAAO2O,GAGDxB,EAAA7W,UAAA2Y,WAAV,SAAqBM,EAAmBvP,GACpC,YADiB,IAAAuP,MAAA,KACRlK,KAAMkK,EAAMzT,MAAOkE,EAAQwP,YAAYD,GAAMzT,QAGhDqR,EAAA7W,UAAAgZ,mBAAV,SAA6BC,EAAmBzT,EAC5CkE,QADyB,IAAAuP,MAAA,IAEzB,IAAIjB,EAAYtO,EAAQwP,YAAYD,GAAMzT,MAK1C,IAHIwS,EAAYxS,IACZyT,GAAQ,KAELA,EAAK9H,OAAS,GAAK6G,EAAYxS,GAClCyT,EAAOA,EAAKE,MAAM,GAAI,GAAK,IAC3BnB,EAAYtO,EAAQwP,YAAYD,GAAMzT,MAG1C,OAASuJ,KAAMkK,EAAMzT,MAAOwS,IAGtBnB,EAAA7W,UAAA8Y,mBAAV,SAA6BG,EAAmBzT,EAC5CkE,QADyB,IAAAuP,MAAA,IAMzB,IAJA,IAAIZ,KACAe,EAAQH,EAAKX,MAAM,KACnBN,EAAY,EAEPnY,EAAI,EAAGA,EAAIuZ,EAAMjI,OAAQtR,IAAK,CACnC,IAAIwZ,EAAWxZ,EAAI,EAAIoZ,EAAO,IAAMG,EAAMvZ,GAAKuZ,EAAM,GAEjDE,EADU5P,EAAQwP,YAAYG,GACV7T,MACpB8T,EAAY9T,GAAS3F,EAAI,GACzBwY,EAAM1P,MAAOoG,KAAMkK,EAAMzT,MAAOwS,IAChCiB,EAAOG,EAAMvZ,GACbmY,EAAYtO,EAAQwP,YAAYD,GAAMzT,QAGtCwS,EAAYsB,EACZL,EAAOI,GAKf,OAFAhB,EAAM1P,MAAOoG,KAAMkK,EAAMzT,MAAOwS,IAEzBK,GAGDxB,EAAA7W,UAAA+X,aAAV,SAAuBrO,GACnB,IAAIjE,EAAShF,KAAKI,gBAAgB4E,OAE7BhF,KAAKuE,cACNvE,KAAKuE,YAAcqO,EAAA7S,QAAQ4N,eAAe1E,EAAQW,OAEtD,IAAIkP,EAAQ,EACZ,OAAQ9Y,KAAKyW,wBACT,KAAK7D,EAAA7S,QAAQ+G,uBACTgS,EAAQ9Y,KAAKuE,YAAY8K,OACzB,MACJ,KAAKuD,EAAA7S,QAAQyL,0BACTsN,EAAQ9T,EAAShF,KAAKuE,YAAYS,QAAUhF,KAAKgX,OAAOtG,OAAS,GAAK1Q,KAAKuE,YAAY+K,QACvF,MACJ,KAAKsD,EAAA7S,QAAQsB,0BACTyX,EAAQ9Y,KAAKuE,YAAY8K,QAAUrK,EAAShF,KAAKuE,YAAYS,OAAShF,KAAKgX,OAAOtG,QAAU,EAIpGoI,GAAS9Y,KAAKI,gBAAgB2F,IAI9B,IAFA,IAAIgT,EAAuB,EAElBpb,EAAI,EAAGA,EAAIqC,KAAKgX,OAAOtG,OAAQ/S,IAAK,CACzC,IAAM6a,EAAOxY,KAAKgX,OAAOrZ,GAEf,IAANA,GAA+C,IAApCqC,KAAK2W,aAAaqC,gBAEzBhZ,KAAK2W,aAAalR,QAClBqT,GAAS9Y,KAAK2W,aAAajR,SAAS1F,KAAK4E,OAEzCkU,GAAiB9Y,KAAK2W,aAAajR,SAAS1F,KAAK4E,OAAS5E,KAAKe,QAAQ+D,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBwD,SAIrIhF,KAAKiX,UAAUuB,EAAKlK,KAAMkK,EAAKzT,MAAO+T,EAAO7P,GAC7C6P,GAAS9Y,KAAKuE,YAAYS,OAEtBwT,EAAKzT,MAAQgU,IAAcA,EAAeP,EAAKzT,OAGnD/E,KAAK0W,eACL1W,KAAK+E,MAAQ/E,KAAKiZ,oBAAsBjZ,KAAKkZ,qBAAuBH,EAAe,KACnF/Y,KAAKgF,OAAShF,KAAKmZ,mBAAqBnZ,KAAKoZ,sBAAwBpZ,KAAKuE,YAAYS,OAAShF,KAAKgX,OAAOtG,OAAS,OAQrH0F,EAAA7W,UAAA8Z,sBAAP,WACI,GAAIrZ,KAAKsO,MAAQtO,KAAKsZ,cAAe,CACjC,IAAMrQ,EAAUsF,SAASC,cAAc,UAAU+K,WAAW,MAC5D,GAAItQ,EAAS,CACTjJ,KAAK2J,aAAaV,GACbjJ,KAAKuE,cACNvE,KAAKuE,YAAcqO,EAAA7S,QAAQ4N,eAAe1E,EAAQW,OAEtD,IAAMgO,EAAQ5X,KAAKgX,OAAShX,KAAKgX,OAAShX,KAAK0X,YAC3C1X,KAAKsZ,cAAgBtZ,KAAKiZ,oBAAsBjZ,KAAKkZ,qBAAsBjQ,GAC/E,OAAOjJ,KAAKmZ,mBAAqBnZ,KAAKoZ,sBAAwBpZ,KAAKuE,YAAYS,OAAS4S,EAAMlH,QAGtG,OAAO,GAGX0F,EAAA7W,UAAAqO,QAAA,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAEbA,KAAK8W,wBAAwBjJ,SAErCuI,EAlYA,CAA+BxD,EAAA7S,SAAlB9C,EAAAmZ,kaC5Bb,IAAAoD,EAAA/b,EAAA,GACAoC,EAAApC,EAAA,GACAmV,EAAAnV,EAAA,GAKAgc,EAAA,SAAAvI,GA+DI,SAAAuI,EAAmBvb,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA9DXgH,EAAAwU,aAAc,EACdxU,EAAAyU,cAAe,EACfzU,EAAA0U,eAAgB,EAChB1U,EAAA2U,0BAA2B,EAC3B3U,EAAA4U,kBAAoBja,EAAAQ,QAAQC,UA4IxC,OAjJgCgR,EAAAmI,EAAAvI,GAQ5B7S,OAAAC,eAAWmb,EAAAla,UAAA,kBAAX,WACI,OAAOS,KAAK0Z,iBAGhB,SAAsB9a,GACdoB,KAAK0Z,cAAgB9a,IAIzBoB,KAAK0Z,YAAc9a,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWmb,EAAAla,UAAA,aAcX,WACI,OAAOS,KAAKa,OAAO8D,SAAS3E,KAAK4E,YAfrC,SAAiBhG,GACRoB,KAAK6Z,2BACN7Z,KAAK2Z,cAAe,GAGpB3Z,KAAKa,OAAO8D,SAAS3E,KAAK4E,SAAWhG,GAIrCoB,KAAKa,OAAOgE,WAAWjG,IACvBoB,KAAKyE,gDASbpG,OAAAC,eAAWmb,EAAAla,UAAA,cAcX,WACI,OAAOS,KAAKe,QAAQ4D,SAAS3E,KAAK4E,YAftC,SAAkBhG,GACToB,KAAK6Z,2BACN7Z,KAAK4Z,eAAgB,GAGrB5Z,KAAKe,QAAQ4D,SAAS3E,KAAK4E,SAAWhG,GAItCoB,KAAKe,QAAQ8D,WAAWjG,IACxBoB,KAAKyE,gDAgBHgV,EAAAla,UAAA+E,aAAV,WACI,MAAO,cAGDmV,EAAAla,UAAA8K,YAAV,SAAsBH,EAAwBjB,GAG1C,IAFA,IAAI8Q,EAAa,EACbC,EAAc,EACA5H,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACVpS,KAAK8Z,kBAAkB1P,SAASgJ,EAAMhT,iBACtCgT,EAAMhT,gBAAgBgK,SAASF,GAC/BkJ,EAAM9I,WAEFtK,KAAK0Z,aACLtG,EAAMrN,IAAMiU,EAAc,KACrB5G,EAAMtR,KAAKyG,uBACZ6K,EAAM3O,eAEV2O,EAAMtR,KAAKyG,uBAAwB,EACnCyR,GAAe5G,EAAMhT,gBAAgB4E,OACjCoO,EAAMhT,gBAAgB2E,MAAQgV,IAC9BA,EAAa3G,EAAMhT,gBAAgB2E,OAEvCqO,EAAMvM,kBAAoB+L,EAAA7S,QAAQ+G,yBAElCsM,EAAMtN,KAAOiU,EAAa,KACrB3G,EAAMvR,MAAM0G,uBACb6K,EAAM3O,eAEV2O,EAAMvR,MAAM0G,uBAAwB,EACpCwR,GAAc3G,EAAMhT,gBAAgB2E,MAChCqO,EAAMhT,gBAAgB4E,OAASgV,IAC/BA,EAAc5G,EAAMhT,gBAAgB4E,QAExCoO,EAAMzM,oBAAsBiM,EAAA7S,QAAQ6G,2BAGxCwM,EAAMhT,gBAAgBgK,SAASpK,KAAK8Z,mBAGxC9Z,KAAK6Z,0BAA2B,EAKhC,IAAII,EACAC,EAEAC,EAAiBna,KAAKgF,OACtBoV,EAAgBpa,KAAK+E,MAEpB/E,KAAK4Z,gBAEN5Z,KAAKgF,OAASgV,EAAc,MAE3Bha,KAAK2Z,eAEN3Z,KAAK+E,MAAQgV,EAAa,MAG9BE,EAAoBG,IAAkBpa,KAAK+E,QAAU/E,KAAKa,OAAO0H,uBACjE2R,EAAqBC,IAAmBna,KAAKgF,SAAWhF,KAAKe,QAAQwH,yBAGjEvI,KAAKe,QAAQwH,uBAAwB,GAGrC0R,IACAja,KAAKa,OAAO0H,uBAAwB,GAGxCvI,KAAK6Z,0BAA2B,GAE5BI,GAAqBC,IACrBla,KAAK2I,kBAGTuI,EAAA3R,UAAM8K,YAAWvM,KAAAkC,KAACkK,EAAejB,IAEzCwQ,EAjJA,CAAgCD,EAAA3G,WAAnB5V,EAAAwc,maCPb,IAAA7G,EAAAnV,EAAA,GACAmC,EAAAnC,EAAA,GAMA4c,EAAA,SAAAnJ,GAoOI,SAAAmJ,EAAmBnc,EAAeoc,QAAA,IAAAA,MAAA,MAAlC,IAAApV,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAhOXgH,EAAAqV,SAAU,EACVrV,EAAAsV,SAAWH,EAASI,aAEpBvV,EAAAwV,YAAa,EAEbxV,EAAAyV,YAAc,EACdzV,EAAA0V,WAAa,EACb1V,EAAA2V,aAAe,EACf3V,EAAA4V,cAAgB,EAEhB5V,EAAAwP,WAAqB,EACrBxP,EAAAyP,YAAsB,EACtBzP,EAAA6V,SAAmB,EAuNvB7V,EAAKoL,OAASgK,IA8GtB,OArVuBhJ,EAAA+I,EAAAnJ,GAqBnB7S,OAAAC,eAAW+b,EAAA9a,UAAA,kBAAX,WACI,OAAOS,KAAK2a,iBAGhB,SAAsB/b,GACdoB,KAAK2a,cAAgB/b,IAIzBoB,KAAK2a,YAAc/b,EAEnBoB,KAAKyE,iDAMTpG,OAAAC,eAAW+b,EAAA9a,UAAA,iBAAX,WACI,OAAOS,KAAK4a,gBAGhB,SAAqBhc,GACboB,KAAK4a,aAAehc,IAIxBoB,KAAK4a,WAAahc,EAElBoB,KAAKyE,iDAMTpG,OAAAC,eAAW+b,EAAA9a,UAAA,mBAAX,WACI,OAAOS,KAAK6a,kBAGhB,SAAuBjc,GACfoB,KAAK6a,eAAiBjc,IAI1BoB,KAAK6a,aAAejc,EAEpBoB,KAAKyE,iDAMTpG,OAAAC,eAAW+b,EAAA9a,UAAA,oBAAX,WACI,OAAOS,KAAK8a,mBAGhB,SAAwBlc,GAChBoB,KAAK8a,gBAAkBlc,IAI3BoB,KAAK8a,cAAgBlc,EAErBoB,KAAKyE,iDAOTpG,OAAAC,eAAW+b,EAAA9a,UAAA,iBAAX,WACI,OAAOS,KAAK0a,gBAGhB,SAAqB9b,GACboB,KAAK0a,aAAe9b,IAIxBoB,KAAK0a,WAAa9b,EAEdA,GAASoB,KAAKua,SACdva,KAAKgb,+DAKb3c,OAAAC,eAAW+b,EAAA9a,UAAA,eAAX,WACI,OAAOS,KAAKwa,cAGhB,SAAmB5b,GACXoB,KAAKwa,WAAa5b,IAItBoB,KAAKwa,SAAW5b,EAEhBoB,KAAKyE,iDAMTpG,OAAAC,eAAW+b,EAAA9a,UAAA,gBAaX,WACI,OAAOS,KAAKib,eAdhB,SAAoBrc,GAApB,IAAAsG,EAAAlF,KACIA,KAAKib,UAAYrc,EACjBoB,KAAKua,SAAU,EAEXva,KAAKib,UAAUlW,MACf/E,KAAKkb,iBAELlb,KAAKib,UAAUE,OAAS,WACpBjW,EAAKgW,mDASTb,EAAA9a,UAAA2b,eAAR,WACIlb,KAAKob,YAAcpb,KAAKib,UAAUlW,MAClC/E,KAAKqb,aAAerb,KAAKib,UAAUjW,OACnChF,KAAKua,SAAU,EAEXva,KAAK0a,YACL1a,KAAKgb,6BAGThb,KAAKyE,gBAMTpG,OAAAC,eAAW+b,EAAA9a,UAAA,cAAX,SAAkBX,GAAlB,IAAAsG,EAAAlF,KACQA,KAAKsb,UAAY1c,IAIrBoB,KAAKua,SAAU,EACfva,KAAKsb,QAAU1c,EAEfoB,KAAKib,UAAY,IAAIM,MAErBvb,KAAKib,UAAUE,OAAS,WACpBjW,EAAKgW,kBAELtc,IACAgB,EAAA6H,MAAM+T,gBAAgB5c,EAAOoB,KAAKib,WAClCjb,KAAKib,UAAUQ,IAAM7c,qCAQ7BP,OAAAC,eAAI+b,EAAA9a,UAAA,iBAAJ,WACI,OAAOS,KAAK0U,gBAEhB,SAAc9V,GACNoB,KAAK0U,aAAe9V,IAIxBoB,KAAK0U,WAAa9V,EAClBoB,KAAKyE,iDAOTpG,OAAAC,eAAI+b,EAAA9a,UAAA,kBAAJ,WACI,OAAOS,KAAK2U,iBAEhB,SAAe/V,GACPoB,KAAK2U,cAAgB/V,IAIzBoB,KAAK2U,YAAc/V,EACnBoB,KAAKyE,iDAOTpG,OAAAC,eAAI+b,EAAA9a,UAAA,cAAJ,WACI,OAAOS,KAAK+a,aAEhB,SAAWnc,GACHoB,KAAK+a,UAAYnc,IAIrBoB,KAAK+a,QAAUnc,EACfoB,KAAKyE,iDAcC4V,EAAA9a,UAAA+E,aAAV,WACI,MAAO,SAIJ+V,EAAA9a,UAAAyb,2BAAP,WACShb,KAAKua,UAIVva,KAAK+E,MAAQ/E,KAAKib,UAAUlW,MAAQ,KACpC/E,KAAKgF,OAAShF,KAAKib,UAAUjW,OAAS,OAGnCqV,EAAA9a,UAAAkM,MAAP,SAAavB,EAAwBjB,GAUjC,IAAI7C,EAAGC,EAAGtB,EAAOC,EACjB,GAVAiE,EAAQyK,QAEJ1T,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,gBAIb,GAAhBxD,KAAK0b,OACLtV,EAAIpG,KAAK2a,YACTtU,EAAIrG,KAAK4a,WAET7V,EAAQ/E,KAAK6a,aAAe7a,KAAK6a,aAAe7a,KAAKob,YACrDpW,EAAShF,KAAK8a,cAAgB9a,KAAK8a,cAAgB9a,KAAKqb,iBAEvD,CACD,IAAIM,EAAW3b,KAAKib,UAAUW,aAAe5b,KAAK6b,UAC9CC,EAAU9b,KAAK0b,OAASC,GAAa,EACrCI,EAAM/b,KAAK0b,OAASC,EAExBvV,EAAIpG,KAAK6b,UAAYE,EACrB1V,EAAIrG,KAAKgc,WAAaF,EACtB/W,EAAQ/E,KAAK6b,UACb7W,EAAShF,KAAKgc,WAIlB,GADAhc,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,IACjCjJ,KAAKua,QACL,OAAQva,KAAKwa,UACT,KAAKH,EAAS4B,aAId,KAAK5B,EAASI,aACVxR,EAAQiT,UAAUlc,KAAKib,UAAW7U,EAAGC,EAAGtB,EAAOC,EAC3ChF,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QAC1G,MACJ,KAAKqV,EAAS8B,gBACV,IAAIC,EAASpc,KAAKI,gBAAgB2E,MAAQA,EACtCsX,EAASrc,KAAKI,gBAAgB4E,OAASA,EACvCsX,EAAQ9T,KAAKuC,IAAIqR,EAAQC,GACzBE,GAAWvc,KAAKI,gBAAgB2E,MAAQA,EAAQuX,GAAS,EACzDE,GAAWxc,KAAKI,gBAAgB4E,OAASA,EAASsX,GAAS,EAE/DrT,EAAQiT,UAAUlc,KAAKib,UAAW7U,EAAGC,EAAGtB,EAAOC,EAC3ChF,KAAKI,gBAAgB0F,KAAOyW,EAASvc,KAAKI,gBAAgB2F,IAAMyW,EAASzX,EAAQuX,EAAOtX,EAASsX,GACrG,MACJ,KAAKjC,EAASoC,eACVxT,EAAQiT,UAAUlc,KAAKib,UAAW7U,EAAGC,EAAGtB,EAAOC,EAC3ChF,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QACtGhF,KAAK0a,YACL1a,KAAKgb,6BAELhb,KAAK4F,OAAS5F,KAAK4F,MAAMmE,SACzB/J,KAAK4F,MAAMb,MAAQ/E,KAAK+E,MACxB/E,KAAK4F,MAAMZ,OAAShF,KAAKgF,QAM7CiE,EAAQ+K,WAUZ3V,OAAAC,eAAkB+b,EAAA,oBAAlB,WACI,OAAOA,EAASqC,+CAIpBre,OAAAC,eAAkB+b,EAAA,oBAAlB,WACI,OAAOA,EAASsC,+CAIpBte,OAAAC,eAAkB+b,EAAA,uBAAlB,WACI,OAAOA,EAASuC,kDAIpBve,OAAAC,eAAkB+b,EAAA,sBAAlB,WACI,OAAOA,EAASwC,iDAtBLxC,EAAAqC,cAAgB,EAChBrC,EAAAsC,cAAgB,EAChBtC,EAAAuC,iBAAmB,EACnBvC,EAAAwC,gBAAkB,EAqBrCxC,EArVA,CAAuBzH,EAAA7S,SAuVF9C,EAAAse,MAAAlB,iFC9VrB,IAAAza,EAAAnC,EAAA,GAEAqf,EAAArf,EAAA,IAMAkV,EAAA,WAuLI,SAAAA,EAEWzU,GAAA8B,KAAA9B,OArLH8B,KAAAgD,WAAa,EACbhD,KAAAiD,aAAe,EACfjD,KAAAmD,mBACAnD,KAAA6C,YAAa,EAgDd7C,KAAA6D,wBAA0B,IAAIjE,EAAAkE,WAK9B9D,KAAA+D,uBAAyB,IAAInE,EAAAkE,WAK7B9D,KAAAgE,wBAA0B,IAAIpE,EAAAkE,WAK9B9D,KAAAiE,sBAAwB,IAAIrE,EAAAkE,WAK5B9D,KAAAkE,yBAA2B,IAAItE,EAAAkE,WAK/B9D,KAAAmE,yBAA2B,IAAIvE,EAAAkE,WAQ9B9D,KAAA+c,WAAa,IAAI1L,MAwU7B,OAtZIhT,OAAAC,eAAWqU,EAAApT,UAAA,gBAAX,WACI,OAAKS,KAAKgd,MAIHhd,KAAKgd,MAAMxW,SAHP5G,EAAAsH,QAAQxE,YAMvB,SAAoB9D,GACXoB,KAAKgd,QAIVhd,KAAKgd,MAAMxW,SAAW5H,oCAI1BP,OAAAC,eAAWqU,EAAApT,UAAA,eAAX,WACI,OAAKS,KAAKgd,MAIHhd,KAAKgd,MAAMC,QAHP,IAAIrd,EAAAsH,QAAQ,EAAG,EAAG,QAMjC,SAAmBtI,GACVoB,KAAKgd,QAIVhd,KAAKgd,MAAMC,QAAUre,oCAsDzBP,OAAAC,eAAWqU,EAAApT,UAAA,iBAAX,WACI,OAAOS,KAAK+c,4CASTpK,EAAApT,UAAA2d,YAAP,SAAmBC,GAAnB,IAAAjY,EAAAlF,KAGI,IAAe,IAFHA,KAAK+c,WAAWhV,QAAQoV,GAGhC,OAAOnd,KAGXmd,EAASC,OACT,IAAI3W,EAAQzG,KAAK4E,MAAM6B,MAWvB,OAVIA,EAAM4W,UAEN5W,EAAM6W,uBAAuBC,QAAQ,WACjCJ,EAASK,OAAOtY,KAGpBiY,EAASK,OAAOxd,MAEpBA,KAAK+c,WAAW7U,KAAKiV,GAEdnd,MASJ2S,EAAApT,UAAAke,eAAP,SAAsBN,GAClB,IAAItV,EAAQ7H,KAAK+c,WAAWhV,QAAQoV,GAEpC,OAAe,IAAXtV,EACO7H,MAGXA,KAAK+c,WAAWlV,GAAO6V,SACvB1d,KAAK+c,WAAW9U,OAAOJ,EAAO,GAEvB7H,OASJ2S,EAAApT,UAAAoe,kBAAP,SAAyBzf,GACrB,IAAqB,IAAAkU,EAAA,EAAAC,EAAArS,KAAK+c,WAAL3K,EAAAC,EAAA3B,OAAA0B,IAAiB,CAAjC,IAAI+K,EAAQ9K,EAAAD,GACb,GAAI+K,EAASjf,OAASA,EAClB,OAAOif,EAIf,OAAO,MAIX9e,OAAAC,eAAWqU,EAAApT,UAAA,iBAAX,WACI,OAAOS,KAAK6C,gBAGhB,SAAqBjE,GACjB,GAAIoB,KAAK6C,aAAejE,EAAxB,CAIAoB,KAAK6C,WAAajE,EAElB,IAAIgJ,EAAO5H,KAAK4H,KACZA,GACAA,EAAKgW,WAAWhf,qCAgBxBP,OAAAC,eAAWqU,EAAApT,UAAA,gBAAX,WACI,OAAOS,KAAKsE,gDAGNqO,EAAApT,UAAA+E,aAAV,WACI,MAAO,aAMXjG,OAAAC,eAAWqU,EAAApT,UAAA,YAAX,WACI,OAAOS,KAAKgd,uCAMhB3e,OAAAC,eAAWqU,EAAApT,UAAA,YAAX,WACI,OAAIS,KAAKgd,iBAAiBpd,EAAAie,aACf7d,KAAKgd,MAGT,sCAQJrK,EAAApT,UAAAue,oBAAP,SAA2B/L,GAIvB,OAHI/R,KAAKgd,QACLhd,KAAKgd,MAAMjT,OAASgI,GAEjB/R,MAIJ2S,EAAApT,UAAAsS,aAAP,SAAoBpL,GAChB,IAAKzG,KAAKgd,MAAO,CAGb,GAFAhd,KAAKgd,MAAQhd,KAAKiS,YAAYxL,IAEzBzG,KAAK+R,KACN,OAEJ/R,KAAKgd,MAAOe,SAAW/d,KACvBA,KAAKgd,MAAOxW,SAAWxG,KAAKwG,SAC5BxG,KAAKgd,MAAOC,QAAUjd,KAAKid,QAE3B,IAAIrV,EAAO5H,KAAK4H,KACZA,IACAA,EAAKoW,YAAa,EAElBhe,KAAKie,gBAAgBrW,MAWvB+K,EAAApT,UAAA0S,YAAV,SAAsBxL,GAElB,OAAO,MAODkM,EAAApT,UAAA0e,gBAAV,SAA0BrW,GACtBA,EAAKsW,SAAW,MAMbvL,EAAApT,UAAA4M,eAAP,SAAsBC,EAAmBC,GACrCrM,KAAK6D,wBAAwB6G,gBAAgB2B,GAAc,EAAGD,EAAQpM,OAInE2S,EAAApT,UAAA+M,gBAAP,SAAuBF,GACnB,QAAIpM,KAAKiD,YAAc,MAIG,IAAtBjD,KAAKiD,cACLjD,KAAKiD,YAAc,GAGvBjD,KAAKiD,cAELjD,KAAKmE,yBAAyBuG,gBAAgB1K,MAAO,EAAGoM,EAAQpM,MAE5DA,KAAKme,uBACLne,KAAKme,yBAGF,IAIJxL,EAAApT,UAAAgN,cAAP,SAAqBH,GACjBpM,KAAKiD,YAAc,EAEnBjD,KAAK+D,uBAAuB2G,gBAAgB1K,MAAO,EAAGoM,EAAQpM,MAE1DA,KAAKoe,qBACLpe,KAAKoe,uBAKNzL,EAAApT,UAAAiN,eAAP,SAAsBJ,EAAmBC,EAAsBN,EAAmBC,GAC9E,OAAwB,IAApBhM,KAAKgD,aAIThD,KAAKgD,aAELhD,KAAKmD,gBAAgB4I,IAAa,EAElC/L,KAAKgE,wBAAwB0G,gBAAgB,IAAIoS,EAAAuB,gBAAgBhS,EAAaL,IAAe,EAAGI,EAAQpM,MAEpGA,KAAKse,sBACLte,KAAKse,wBAGF,IAIJ3L,EAAApT,UAAAmN,aAAP,SAAoBN,EAAmBC,EAAsBN,EAAmBC,EAAqBW,GACjG3M,KAAKgD,WAAa,SAEXhD,KAAKmD,gBAAgB4I,GAExBY,IAAgB3M,KAAKiD,YAAc,IAA2B,IAAtBjD,KAAKiD,cAC7CjD,KAAKkE,yBAAyBwG,gBAAgB,IAAIoS,EAAAuB,gBAAgBhS,EAAaL,IAAe,EAAGI,EAAQpM,MAE7GA,KAAKiE,sBAAsByG,gBAAgB,IAAIoS,EAAAuB,gBAAgBhS,EAAaL,IAAe,EAAGI,EAAQpM,MAElGA,KAAKue,oBACLve,KAAKue,sBAKN5L,EAAApT,UAAAif,eAAP,SAAsBzS,GAClB,QADkB,IAAAA,MAAA,MACA,OAAdA,EACA/L,KAAK0M,aAAa1M,KAAMJ,EAAAsH,QAAQxE,OAAQqJ,EAAW,GAAG,QAEtD,IAAK,IAAI7M,KAAOc,KAAKmD,gBACjBnD,KAAK0M,aAAa1M,KAAMJ,EAAAsH,QAAQxE,QAASxD,EAAe,GAAG,IAMhEyT,EAAApT,UAAA2M,oBAAP,SAA2BJ,EAAc2S,EAAsB1S,EAAmBC,GAC9E,GAAIF,IAASlM,EAAAmN,kBAAkBC,YAAa,CACxChN,KAAKmM,eAAenM,KAAMye,GAE1B,IAAIxR,EAAsBjN,KAAK4E,MAAMsI,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwBjN,MAC/CiN,EAAoBV,cAAcvM,MAGlCiN,IAAwBjN,MACxBA,KAAKsM,gBAAgBtM,MAGzBA,KAAK4E,MAAMsI,iBAAiBnB,GAAa/L,MAClC,EAGX,OAAI8L,IAASlM,EAAAmN,kBAAkBI,aAC3BnN,KAAKwM,eAAexM,KAAMye,EAAa1S,EAAWC,GAClDhM,KAAK4E,MAAMwI,iBAAiBrB,GAAa/L,KACzCA,KAAK4E,MAAMyI,mBAAqBrN,MACzB,GAGP8L,IAASlM,EAAAmN,kBAAkBO,YACvBtN,KAAK4E,MAAMwI,iBAAiBrB,IAC5B/L,KAAK4E,MAAMwI,iBAAiBrB,GAAWW,aAAa1M,KAAMye,EAAa1S,EAAWC,GAAa,UAE5FhM,KAAK4E,MAAMwI,iBAAiBrB,IAC5B,IAOR4G,EAAApT,UAAA4S,aAAP,WACQnS,KAAKgd,QACLhd,KAAKgd,MAAMpP,UACX5N,KAAKgd,MAAQ,OAOdrK,EAAApT,UAAAqO,QAAP,WACI5N,KAAKgE,wBAAwB6J,QAC7B7N,KAAKmE,yBAAyB0J,QAC9B7N,KAAK6D,wBAAwBgK,QAC7B7N,KAAK+D,uBAAuB8J,QAC5B7N,KAAKiE,sBAAsB4J,QAC3B7N,KAAKkE,yBAAyB2J,QAE9B7N,KAAKmS,eAGL,IAAqB,IAAAC,EAAA,EAAAC,EAAArS,KAAK+c,WAAL3K,EAAAC,EAAA3B,OAAA0B,IAAiB,CAArBC,EAAAD,GACJsL,WAGrB/K,EAhaA,GAAa1V,EAAA0V,kaCRb,IAAA+L,EAAAjhB,EAAA,IACAmC,EAAAnC,EAAA,GACAkhB,EAAAlhB,EAAA,IAMAmhB,EAAA,SAAA1N,GAwDI,SAAA0N,EAAY1gB,GAAZ,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YApDPkF,EAAA2Z,mBAAqB,IACrB3Z,EAAA4Z,mBAAqB,EAuDzB5Z,EAAKiZ,sBAAwB,WACpBjZ,EAAK0C,OAGS1C,EAAK6Z,iBAAkBC,cAAgBpf,EAAAqf,OAAOC,QAGrEha,EAAKkZ,oBAAsB,WACJlZ,EAAK6Z,iBAAkBC,cAAgBpf,EAAAqf,OAAOE,SAGrEja,EAAKoZ,qBAAuB,WACnBpZ,EAAK0C,MAIV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,MAGnCtQ,EAAKqZ,mBAAqB,WACjBrZ,EAAK0C,MAIV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,EAAM,QAoFjD,OAzK8BlE,EAAAsN,EAAA1N,GAW1B7S,OAAAC,eAAWsgB,EAAArf,UAAA,yBAAX,WACI,OAAOS,KAAK6e,wBAGhB,SAA6BjgB,GACrBoB,KAAK6e,qBAAuBjgB,IAIhCoB,KAAK6e,mBAAqBjgB,EAC1BoB,KAAKof,kDAMT/gB,OAAAC,eAAWsgB,EAAArf,UAAA,yBAAX,WACI,OAAOS,KAAK8e,wBAGhB,SAA6BlgB,GACrBoB,KAAK8e,qBAAuBlgB,IAIhCoB,KAAK8e,mBAAqBlgB,EAC1BoB,KAAKof,kDAGCR,EAAArf,UAAA8f,sBAAV,WACQrf,KAAKsf,iBACLtf,KAAKsf,eAAe1R,UACpB5N,KAAKsf,eAAiB,OAIpBV,EAAArf,UAAA6f,cAAV,WACIpf,KAAKqf,wBACLrf,KAAKuf,QAAUvf,KAAKwf,UA2CxBnhB,OAAAC,eAAWsgB,EAAArf,UAAA,eAAX,WACI,OAAOS,KAAKwf,cAGhB,SAAmB5gB,GACfoB,KAAKwf,SAAW5gB,EAEXoB,KAAK4E,OAAU5E,KAAK4E,MAAMgN,eAI1B5R,KAAKsf,iBACNtf,KAAKsf,eAAiB,IAAIX,EAAAc,uBAAuB,SAAUzf,KAAK6e,mBAAoB7e,KAAK6e,mBAAoB7e,KAAK4E,MAAMgN,aAAaE,mBAAmB,EAAMlS,EAAA8f,QAAQC,wBACtK3f,KAAKsf,eAAeM,cAAcC,OAAS7f,KAAK8e,mBAChD9e,KAAKsf,eAAeM,cAAcE,OAAS9f,KAAK8e,mBAChD9e,KAAKsf,eAAeS,aAAc,GAGtC/f,KAAKsf,eAAe3N,WAAW/S,GAE/BoB,KAAKggB,aAAahgB,KAAKsf,kDAQjBV,EAAArf,UAAAygB,aAAV,SAAuBC,GACbjgB,KAAK+e,iBAAkBmB,gBAAkBD,GAGzCrB,EAAArf,UAAA+E,aAAV,WACI,MAAO,YAIDsa,EAAArf,UAAA0S,YAAV,SAAsBxL,GAGlB,IAFA,IAAI0Z,EAAS,IAAI9O,MAAM,GAEd1T,EAAI,EAAGA,EAAI,EAAGA,IACnBwiB,EAAOxiB,GAAK,IAAIiC,EAAAwgB,QAAQ,EAAG,EAAG,EAAG,GAWrC,OATAD,EAAO,GAAK,IAAIvgB,EAAAwgB,QAAQ,EAAG,EAAG,EAAG,GAEtBxgB,EAAAygB,YAAYC,UAAUtgB,KAAK9B,KAAO,aACzC6G,MAAO,EACPC,OAAQ,EACRub,MAAO,IACPJ,OAAQA,GACT1Z,IAKGmY,EAAArf,UAAA0e,gBAAV,SAA0BrW,GACtB,IAAIsW,EAAW,IAAIte,EAAA4gB,iBAAiBxgB,KAAK9B,KAAO,WAAY0J,EAAK6Y,YACjEvC,EAASwC,cAAgB9gB,EAAAqf,OAAOE,QAEhCvX,EAAKsW,SAAWA,EAChBle,KAAK+e,iBAAmBb,EAExBle,KAAKof,iBAMFR,EAAArf,UAAAqO,QAAP,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAEbA,KAAKqf,wBAEDrf,KAAK+e,kBACL/e,KAAK+e,iBAAiBnR,WAGlCgR,EAzKA,CAA8BF,EAAAiC,kBAAjB1jB,EAAA2hB,wJCRbgC,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,kJCDAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KAEAmjB,EAAAnjB,EAAA,2ZCpBA,IAAAojB,EAAApjB,EAAA,IACAmV,EAAAnV,EAAA,GACAqjB,EAAArjB,EAAA,GACAsjB,EAAAtjB,EAAA,GAMAujB,EAAA,SAAA9P,GAsBI,SAAA8P,EAAmB9iB,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAGfgH,EAAK+b,UAAY,EACjB/b,EAAK7B,kBAAmB,EAExB6B,EAAKiZ,sBAAwB,WACzBjZ,EAAK8E,OAAS,IAGlB9E,EAAKkZ,oBAAsB,WACvBlZ,EAAK8E,OAAS,IAGlB9E,EAAKoZ,qBAAuB,WACxBpZ,EAAK2a,QAAU,IACf3a,EAAK4a,QAAU,KAGnB5a,EAAKqZ,mBAAqB,WACtBrZ,EAAK2a,QAAU,IACf3a,EAAK4a,QAAU,OA4J3B,OAvM4BxO,EAAA0P,EAAA9P,GA+Cd8P,EAAAzhB,UAAA+E,aAAV,WACI,MAAO,UAKJ0c,EAAAzhB,UAAAsM,gBAAP,SAAuBzF,EAAWC,EAAWyF,EAAcC,EAAmBC,GAC1E,SAAKhM,KAAKoD,mBAAqBpD,KAAKiM,WAAajM,KAAKwH,mBAIjD0J,EAAA3R,UAAMmM,SAAQ5N,KAAAkC,KAACoG,EAAGC,KAIvBrG,KAAKkM,oBAAoBJ,EAAM1F,EAAGC,EAAG0F,EAAWC,IAEzC,KAIJgV,EAAAzhB,UAAA+M,gBAAP,SAAuBF,GACnB,QAAK8E,EAAA3R,UAAM+M,gBAAexO,KAAAkC,KAACoM,KAIvBpM,KAAKme,uBACLne,KAAKme,yBAGF,IAIJ6C,EAAAzhB,UAAAgN,cAAP,SAAqBH,GACbpM,KAAKoe,qBACLpe,KAAKoe,sBAGTlN,EAAA3R,UAAMgN,cAAazO,KAAAkC,KAACoM,IAIjB4U,EAAAzhB,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAKtDhM,KAAKse,sBACLte,KAAKse,wBAGF,IAIJ0C,EAAAzhB,UAAAmN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC3F3M,KAAKue,oBACLve,KAAKue,qBAGTrN,EAAA3R,UAAMmN,aAAY5O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,EAAaW,IAWtDqU,EAAAE,kBAAd,SAAgChjB,EAAcoQ,EAAc6S,GACxD,IAAIjb,EAAS,IAAI8a,EAAO9iB,GAGpBkjB,EAAY,IAAIN,EAAA1K,UAAUlY,EAAO,UAAWoQ,GAChD8S,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1O,EAAA7S,QAAQoB,4BAC5CigB,EAAUG,YAAc,MACxBrb,EAAOyL,WAAWyP,GAGlB,IAAII,EAAY,IAAIT,EAAAxF,MAAMrd,EAAO,QAASijB,GAM1C,OALAK,EAAUzc,MAAQ,MAClByc,EAAUC,QAAUV,EAAAxF,MAAMY,gBAC1BqF,EAAU7a,oBAAsBiM,EAAA7S,QAAQ6G,0BACxCV,EAAOyL,WAAW6P,GAEXtb,GASG8a,EAAAU,sBAAd,SAAoCxjB,EAAcijB,GAC9C,IAAIjb,EAAS,IAAI8a,EAAO9iB,GAGpBsjB,EAAY,IAAIT,EAAAxF,MAAMrd,EAAO,QAASijB,GAK1C,OAJAK,EAAUC,QAAUV,EAAAxF,MAAMd,aAC1B+G,EAAU7a,oBAAsBiM,EAAA7S,QAAQ6G,0BACxCV,EAAOyL,WAAW6P,GAEXtb,GASG8a,EAAAW,mBAAd,SAAiCzjB,EAAcoQ,GAC3C,IAAIpI,EAAS,IAAI8a,EAAO9iB,GAGpBkjB,EAAY,IAAIN,EAAA1K,UAAUlY,EAAO,UAAWoQ,GAKhD,OAJA8S,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1O,EAAA7S,QAAQoB,4BAC5C+E,EAAOyL,WAAWyP,GAEXlb,GAUG8a,EAAAY,gCAAd,SAA8C1jB,EAAcoQ,EAAc6S,GACtE,IAAIjb,EAAS,IAAI8a,EAAO9iB,GAGpBsjB,EAAY,IAAIT,EAAAxF,MAAMrd,EAAO,QAASijB,GAC1CK,EAAUC,QAAUV,EAAAxF,MAAMd,aAC1BvU,EAAOyL,WAAW6P,GAGlB,IAAIJ,EAAY,IAAIN,EAAA1K,UAAUlY,EAAO,UAAWoQ,GAKhD,OAJA8S,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1O,EAAA7S,QAAQoB,4BAC5C+E,EAAOyL,WAAWyP,GAEXlb,GAEf8a,EAvMA,CAA4BH,EAAAgB,WAAf5kB,EAAA+jB,+ZCTb,IAIAa,EAAA,SAAA3Q,GAwCI,SAAA2Q,EAAmB3jB,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAvCXgH,EAAA4c,WAAa,EACb5c,EAAA6c,cAAgB,IAgI5B,OAlI+BzQ,EAAAuQ,EAAA3Q,GAK3B7S,OAAAC,eAAWujB,EAAAtiB,UAAA,iBAAX,WACI,OAAOS,KAAK8hB,gBAGhB,SAAqBljB,GACboB,KAAK8hB,aAAeljB,IAIxBoB,KAAK8hB,WAAaljB,EAClBoB,KAAKyE,iDAITpG,OAAAC,eAAWujB,EAAAtiB,UAAA,oBAAX,WACI,OAAOS,KAAK+hB,mBAGhB,SAAwBnjB,GAChBA,EAAQ,IACRA,EAAQ,GAGRoB,KAAK+hB,gBAAkBnjB,IAI3BoB,KAAK+hB,cAAgBnjB,EACrBoB,KAAKyE,iDAWCod,EAAAtiB,UAAA+E,aAAV,WACI,MAAO,aAGDud,EAAAtiB,UAAAiU,WAAV,SAAqBvK,GACjBA,EAAQyK,QAEJ1T,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAG7BxD,KAAKiT,cACLhK,EAAQY,UAAY7J,KAAKiT,YAErBjT,KAAK+hB,eACL/hB,KAAKgiB,iBAAiB/Y,EAASjJ,KAAK8hB,WAAa,GACjD7Y,EAAQgZ,QAERhZ,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,SAI3HhF,KAAK8hB,cAED9hB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAGxBxD,KAAKkiB,QACLjZ,EAAQuO,YAAcxX,KAAKkiB,OAE/BjZ,EAAQsO,UAAYvX,KAAK8hB,WAErB9hB,KAAK+hB,eACL/hB,KAAKgiB,iBAAiB/Y,EAASjJ,KAAK8hB,WAAa,GACjD7Y,EAAQkZ,UAERlZ,EAAQmZ,WAAWpiB,KAAKI,gBAAgB0F,KAAO9F,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB2F,IAAM/F,KAAK8hB,WAAa,EAC7G9hB,KAAKI,gBAAgB2E,MAAQ/E,KAAK8hB,WAAY9hB,KAAKI,gBAAgB4E,OAAShF,KAAK8hB,aAI7F7Y,EAAQ+K,WAGF6N,EAAAtiB,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GACpDiI,EAAA3R,UAAMiL,sBAAqB1M,KAAAkC,KAACkK,EAAejB,GAE3CjJ,KAAK8S,oBAAoB/N,OAAS,EAAI/E,KAAK8hB,WAC3C9hB,KAAK8S,oBAAoB9N,QAAU,EAAIhF,KAAK8hB,WAC5C9hB,KAAK8S,oBAAoBhN,MAAQ9F,KAAK8hB,WACtC9hB,KAAK8S,oBAAoB/M,KAAO/F,KAAK8hB,YAGjCD,EAAAtiB,UAAAyiB,iBAAR,SAAyB/Y,EAAmCzE,QAAA,IAAAA,MAAA,GACxD,IAAI4B,EAAIpG,KAAKI,gBAAgB0F,KAAOtB,EAChC6B,EAAIrG,KAAKI,gBAAgB2F,IAAMvB,EAC/BO,EAAQ/E,KAAKI,gBAAgB2E,MAAiB,EAATP,EACrCQ,EAAShF,KAAKI,gBAAgB4E,OAAkB,EAATR,EAEvC6d,EAAS7Z,KAAKuC,IAAI/F,EAAS,EAAI,EAAGwD,KAAKuC,IAAIhG,EAAQ,EAAI,EAAG/E,KAAK+hB,gBAEnE9Y,EAAQ4B,YACR5B,EAAQqZ,OAAOlc,EAAIic,EAAQhc,GAC3B4C,EAAQsZ,OAAOnc,EAAIrB,EAAQsd,EAAQhc,GACnC4C,EAAQuZ,iBAAiBpc,EAAIrB,EAAOsB,EAAGD,EAAIrB,EAAOsB,EAAIgc,GACtDpZ,EAAQsZ,OAAOnc,EAAIrB,EAAOsB,EAAIrB,EAASqd,GACvCpZ,EAAQuZ,iBAAiBpc,EAAIrB,EAAOsB,EAAIrB,EAAQoB,EAAIrB,EAAQsd,EAAQhc,EAAIrB,GACxEiE,EAAQsZ,OAAOnc,EAAIic,EAAQhc,EAAIrB,GAC/BiE,EAAQuZ,iBAAiBpc,EAAGC,EAAIrB,EAAQoB,EAAGC,EAAIrB,EAASqd,GACxDpZ,EAAQsZ,OAAOnc,EAAGC,EAAIgc,GACtBpZ,EAAQuZ,iBAAiBpc,EAAGC,EAAGD,EAAIic,EAAQhc,GAC3C4C,EAAQyG,aAGFmS,EAAAtiB,UAAAoU,iBAAV,SAA2B1K,GACnBjJ,KAAK+hB,gBACL/hB,KAAKgiB,iBAAiB/Y,EAASjJ,KAAK8hB,YACpC7Y,EAAQ2B,SAGpBiX,EAlIA,CAJApkB,EAAA,GAI+BoV,WAAlB5V,EAAA4kB,kaCJb,IAAAjiB,EAAAnC,EAAA,GAKAgP,EAAA,SAAAyE,GAMI,SAAAzE,EAAmB6D,EAERtE,QAAA,IAAAA,MAAA,GAFX,IAAA9G,EAGIgM,EAAApT,KAAAkC,KAAMsQ,EAAOlK,EAAGkK,EAAOjK,IAAErG,YADlBkF,EAAA8G,gBAGf,OAXqCsF,EAAA7E,EAAAyE,GAWrCzE,EAXA,CAAqC7M,EAAA6C,SAAxBxF,EAAAwP,kBAcb,IAAApK,EAAA,WAaI,SAAAA,EAAYogB,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAXtE9iB,KAAAjC,EAAI,IAAIglB,aAAa,GAYxB/iB,KAAKgjB,WAAWP,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GA2KjD,OA9JWzgB,EAAA9C,UAAAyjB,WAAP,SAAkBP,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAI/E,OAHA9iB,KAAKjC,EAAE,GAAK0kB,EAAKziB,KAAKjC,EAAE,GAAK2kB,EAC7B1iB,KAAKjC,EAAE,GAAK4kB,EAAK3iB,KAAKjC,EAAE,GAAK6kB,EAC7B5iB,KAAKjC,EAAE,GAAK8kB,EAAK7iB,KAAKjC,EAAE,GAAK+kB,EACtB9iB,MAOJqC,EAAA9C,UAAA0jB,YAAP,WACI,OAAOjjB,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,IAQ/CsE,EAAA9C,UAAAmK,YAAP,SAAmBxD,GACf,IAAIgd,EAAKljB,KAAKjC,EAAE,GAAQolB,EAAKnjB,KAAKjC,EAAE,GAChCqlB,EAAKpjB,KAAKjC,EAAE,GAAQslB,EAAKrjB,KAAKjC,EAAE,GAChCulB,EAAKtjB,KAAKjC,EAAE,GAAQwlB,EAAKvjB,KAAKjC,EAAE,GAEhCylB,EAAMxjB,KAAKijB,cACf,GAAIO,EAAO5jB,EAAA6jB,QAAU7jB,EAAA6jB,QAIjB,OAHAvd,EAAOnI,EAAE,GAAK,EAAGmI,EAAOnI,EAAE,GAAK,EAC/BmI,EAAOnI,EAAE,GAAK,EAAGmI,EAAOnI,EAAE,GAAK,EAC/BmI,EAAOnI,EAAE,GAAK,EAAGmI,EAAOnI,EAAE,GAAK,EACxBiC,KAGX,IAAI0jB,EAAS,EAAIF,EAEbG,EAAOP,EAAKG,EAAKF,EAAKC,EACtBM,EAAOT,EAAKG,EAAKJ,EAAKK,EAM1B,OAJArd,EAAOnI,EAAE,GAAKslB,EAAKK,EAAQxd,EAAOnI,EAAE,IAAMolB,EAAKO,EAC/Cxd,EAAOnI,EAAE,IAAMqlB,EAAKM,EAAQxd,EAAOnI,EAAE,GAAKmlB,EAAKQ,EAC/Cxd,EAAOnI,EAAE,GAAK4lB,EAAOD,EAAQxd,EAAOnI,EAAE,GAAK6lB,EAAOF,EAE3C1jB,MASJqC,EAAA9C,UAAAskB,cAAP,SAAqB5P,EAAiB/N,GAClC,IAAIgd,EAAKljB,KAAKjC,EAAE,GAAQolB,EAAKnjB,KAAKjC,EAAE,GAChCqlB,EAAKpjB,KAAKjC,EAAE,GAAQslB,EAAKrjB,KAAKjC,EAAE,GAChCulB,EAAKtjB,KAAKjC,EAAE,GAAQwlB,EAAKvjB,KAAKjC,EAAE,GAEhC+lB,EAAK7P,EAAMlW,EAAE,GAAQgmB,EAAK9P,EAAMlW,EAAE,GAClCimB,EAAK/P,EAAMlW,EAAE,GAAQkmB,EAAKhQ,EAAMlW,EAAE,GAClCmmB,EAAKjQ,EAAMlW,EAAE,GAAQomB,EAAKlQ,EAAMlW,EAAE,GAMtC,OAJAmI,EAAOnI,EAAE,GAAKmlB,EAAKY,EAAKX,EAAKa,EAAI9d,EAAOnI,EAAE,GAAKmlB,EAAKa,EAAKZ,EAAKc,EAC9D/d,EAAOnI,EAAE,GAAKqlB,EAAKU,EAAKT,EAAKW,EAAI9d,EAAOnI,EAAE,GAAKqlB,EAAKW,EAAKV,EAAKY,EAC9D/d,EAAOnI,EAAE,GAAKulB,EAAKQ,EAAKP,EAAKS,EAAKE,EAAIhe,EAAOnI,EAAE,GAAKulB,EAAKS,EAAKR,EAAKU,EAAKE,EAEjEnkB,MAUJqC,EAAA9C,UAAAoM,qBAAP,SAA4BvF,EAAWC,EAAWH,GAI9C,OAHAA,EAAOE,EAAIA,EAAIpG,KAAKjC,EAAE,GAAKsI,EAAIrG,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAClDmI,EAAOG,EAAID,EAAIpG,KAAKjC,EAAE,GAAKsI,EAAIrG,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAE3CiC,MAQGqC,EAAAC,SAAd,WACI,OAAO,IAAID,EAAS,EAAG,EAAG,EAAG,EAAG,EAAG,IASzBA,EAAA+hB,iBAAd,SAA+Bhe,EAAWC,EAAWH,GACjDA,EAAO8c,WAAW,EAAG,EAAG,EAAG,EAAG5c,EAAGC,IASvBhE,EAAAgiB,aAAd,SAA2Bje,EAAWC,EAAWH,GAC7CA,EAAO8c,WAAW5c,EAAG,EAAG,EAAGC,EAAG,EAAG,IAQvBhE,EAAAiiB,cAAd,SAA4BC,EAAere,GACvC,IAAIxG,EAAI8I,KAAKgc,IAAID,GACbvmB,EAAIwK,KAAKic,IAAIF,GAEjBre,EAAO8c,WAAWhlB,EAAG0B,GAAIA,EAAG1B,EAAG,EAAG,IAqBxBqE,EAAAoH,aAAd,SAA2Bib,EAAYC,EAAYJ,EAAe1E,EAAgBC,EAAgB8E,EAAkC1e,GAChI7D,EAAS+hB,iBAAiBM,EAAIC,EAAItiB,EAASwiB,2BAE3CxiB,EAASgiB,aAAaxE,EAAQC,EAAQzd,EAASyiB,oBAE/CziB,EAASiiB,cAAcC,EAAOliB,EAAS0iB,qBAEvC1iB,EAAS+hB,kBAAkBM,GAAKC,EAAItiB,EAAS2iB,4BAE7C3iB,EAASwiB,0BAA0BhB,cAAcxhB,EAASyiB,mBAAoBziB,EAAS4iB,eACvF5iB,EAAS4iB,cAAcpB,cAAcxhB,EAAS0iB,oBAAqB1iB,EAAS6iB,eACxEN,GACAviB,EAAS6iB,cAAcrB,cAAcxhB,EAAS2iB,2BAA4B3iB,EAAS8iB,eACnF9iB,EAAS8iB,cAActB,cAAce,EAAc1e,IAEnD7D,EAAS6iB,cAAcrB,cAAcxhB,EAAS2iB,2BAA4B9e,IAjCnE7D,EAAAwiB,0BAA4BxiB,EAASC,WACrCD,EAAA2iB,2BAA6B3iB,EAASC,WACtCD,EAAA0iB,oBAAsB1iB,EAASC,WAC/BD,EAAAyiB,mBAAqBziB,EAASC,WAC9BD,EAAA4iB,cAAgB5iB,EAASC,WACzBD,EAAA6iB,cAAgB7iB,EAASC,WACzBD,EAAA8iB,cAAgB9iB,EAASC,WA8B5CD,EAzLA,GAAapF,EAAAoF,iaCnBb,IAAAuQ,EAAAnV,EAAA,GAEAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAMA2nB,EAAA,SAAAlU,GA4NI,SAAAkU,EAAmBlnB,EAAeoQ,QAAA,IAAAA,MAAA,IAAlC,IAAApJ,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA3NXgH,EAAAmR,MAAQ,GACRnR,EAAAmgB,iBAAmB,GACnBngB,EAAA+N,YAAc,UACd/N,EAAAogB,mBAAqB,UACrBpgB,EAAAqgB,kBAAoB,OACpBrgB,EAAA4c,WAAa,EACb5c,EAAAsgB,QAAU,IAAI7lB,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAC5CsE,EAAAugB,mBAAoB,EACpBvgB,EAAAwgB,UAAY,IAAI/lB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAClEoE,EAAAygB,YAAa,EAEbzgB,EAAA0gB,cAAe,EACf1gB,EAAA2gB,cAAgB,EAIhB3gB,EAAA4gB,UAAW,EACX5gB,EAAA6gB,SAAU,EACV7gB,EAAA8gB,YAAc,GAGf9gB,EAAA+gB,cAAgB,qBAGhB/gB,EAAA4R,wBAA0B,IAAIlX,EAAAkE,WAE9BoB,EAAAghB,yBAA2B,IAAItmB,EAAAkE,WAE/BoB,EAAAihB,kBAAoB,IAAIvmB,EAAAkE,WAExBoB,EAAAkhB,iBAAmB,IAAIxmB,EAAAkE,WAgM1BoB,EAAKoJ,KAAOA,IAiTpB,OAhhB+BgD,EAAA8T,EAAAlU,GAkC3B7S,OAAAC,eAAW8mB,EAAA7lB,UAAA,gBAAX,WACI,OAAOS,KAAK0lB,UAAU/gB,SAAS3E,KAAK4E,YAQxC,SAAoBhG,GACZoB,KAAK0lB,UAAU/gB,SAAS3E,KAAK4E,SAAWhG,GAIxCoB,KAAK0lB,UAAU7gB,WAAWjG,IAC1BoB,KAAKyE,gDAVbpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,wBAAX,WACI,OAAOS,KAAK0lB,UAAU5gB,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAchF1G,OAAAC,eAAW8mB,EAAA7lB,UAAA,cAAX,WACI,OAAOS,KAAKwlB,QAAQ7gB,SAAS3E,KAAK4E,YAQtC,SAAkBhG,GACVoB,KAAKwlB,QAAQ7gB,SAAS3E,KAAK4E,SAAWhG,GAItCoB,KAAKwlB,QAAQ3gB,WAAWjG,IACxBoB,KAAKyE,gDAVbpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,sBAAX,WACI,OAAOS,KAAKwlB,QAAQ1gB,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAc9E1G,OAAAC,eAAW8mB,EAAA7lB,UAAA,wBAAX,WACI,OAAOS,KAAKylB,uBAGhB,SAA4B7mB,GACpBoB,KAAKylB,oBAAsB7mB,IAI/BoB,KAAKylB,kBAAoB7mB,EACzBoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,iBAAX,WACI,OAAOS,KAAK8hB,gBAGhB,SAAqBljB,GACboB,KAAK8hB,aAAeljB,IAIxBoB,KAAK8hB,WAAaljB,EAClBoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,yBAAX,WACI,OAAOS,KAAKslB,wBAGhB,SAA6B1mB,GACrBoB,KAAKslB,qBAAuB1mB,IAIhCoB,KAAKslB,mBAAqB1mB,EAC1BoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,wBAAX,WACI,OAAOS,KAAKulB,uBAGhB,SAA4B3mB,GACpBoB,KAAKulB,oBAAsB3mB,IAI/BoB,KAAKulB,kBAAoB3mB,EACzBoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,uBAAX,WACI,OAAOS,KAAKqlB,sBAGhB,SAA2BzmB,GACnBoB,KAAKqlB,mBAAqBzmB,IAG9BoB,KAAKqlB,iBAAmBzmB,EACxBoB,KAAKyE,iDAITpG,OAAAC,eAAW8mB,EAAA7lB,UAAA,eAAX,WACI,OAAOS,KAAK8lB,cAGhB,SAAmBO,GACfrmB,KAAK8lB,SAAWO,mCAIpBhoB,OAAAC,eAAW8mB,EAAA7lB,UAAA,cAAX,WACI,OAAOS,KAAK+lB,aAGhB,SAAkBM,GACdrmB,KAAK+lB,QAAUM,mCAInBhoB,OAAAC,eAAW8mB,EAAA7lB,UAAA,kBAAX,WACI,OAAOS,KAAKgmB,iBAGhB,SAAsB9mB,GAClBc,KAAKgmB,YAAc9mB,mCAIvBb,OAAAC,eAAW8mB,EAAA7lB,UAAA,YAAX,WACI,OAAOS,KAAKqW,WAGhB,SAAgBzX,GACRoB,KAAKqW,QAAUzX,IAGnBoB,KAAKqW,MAAQzX,EACboB,KAAKyE,eAELzE,KAAK8W,wBAAwBpM,gBAAgB1K,wCAIjD3B,OAAAC,eAAW8mB,EAAA7lB,UAAA,aAAX,WACI,OAAOS,KAAKa,OAAO8D,SAAS3E,KAAK4E,YAGrC,SAAiBhG,GACToB,KAAKa,OAAO8D,SAAS3E,KAAK4E,SAAWhG,IAIrCoB,KAAKa,OAAOgE,WAAWjG,IACvBoB,KAAKyE,eAGTzE,KAAKsmB,kBAAmB,oCAerBlB,EAAA7lB,UAAAgnB,OAAP,WACIvmB,KAAK2lB,YAAa,EAClB3lB,KAAKwmB,YAAc,KACnBxmB,KAAK6lB,cAAgB,EACrBY,aAAazmB,KAAK0mB,eAClB1mB,KAAKyE,eAELzE,KAAKomB,iBAAiB1b,gBAAgB1K,OAInColB,EAAA7lB,UAAAonB,QAAP,WASI,GARA3mB,KAAKwmB,YAAc,KACnBxmB,KAAK2lB,YAAa,EAClB3lB,KAAK4lB,cAAe,EACpB5lB,KAAK6lB,cAAgB,EACrB7lB,KAAKyE,eAELzE,KAAKmmB,kBAAkBzb,gBAAgB1K,OAEQ,IAA3C4mB,UAAUC,UAAU9e,QAAQ,UAAkB,CAC9C,IAAInJ,EAAQkoB,OAAO9mB,KAAKimB,eAMxB,OAJc,OAAVrnB,IACAoB,KAAKsO,KAAO1P,QAEhBoB,KAAK4E,MAAMmiB,eAAiB,QAK1B3B,EAAA7lB,UAAA+E,aAAV,WACI,MAAO,aAIJ8gB,EAAA7lB,UAAAynB,WAAP,SAAkBC,EAAiB/nB,GAE/B,OAAQ+nB,GACJ,KAAK,GACD/nB,EAAM,IACN,MACJ,KAAK,EACD,GAAIc,KAAKqW,OAASrW,KAAKqW,MAAM3F,OAAS,EAClC,GAA2B,IAAvB1Q,KAAK6lB,cACL7lB,KAAKsO,KAAOtO,KAAKqW,MAAM6Q,OAAO,EAAGlnB,KAAKqW,MAAM3F,OAAS,QAEjDyW,EAAiBnnB,KAAKqW,MAAM3F,OAAS1Q,KAAK6lB,eACzB,IACjB7lB,KAAKsO,KAAOtO,KAAKqW,MAAMqC,MAAM,EAAGyO,EAAiB,GAAKnnB,KAAKqW,MAAMqC,MAAMyO,IAInF,OACJ,KAAK,GACD,GAAInnB,KAAKqW,OAASrW,KAAKqW,MAAM3F,OAAS,EAAG,CACrC,IAAIyW,EAAiBnnB,KAAKqW,MAAM3F,OAAS1Q,KAAK6lB,cAC9C7lB,KAAKsO,KAAOtO,KAAKqW,MAAMqC,MAAM,EAAGyO,GAAkBnnB,KAAKqW,MAAMqC,MAAMyO,EAAiB,GACpFnnB,KAAK6lB,gBAET,OACJ,KAAK,GAED,YADA7lB,KAAK4E,MAAMmiB,eAAiB,MAEhC,KAAK,GAID,OAHA/mB,KAAK6lB,cAAgB,EACrB7lB,KAAK4lB,cAAe,OACpB5lB,KAAKyE,eAET,KAAK,GAID,OAHAzE,KAAK6lB,cAAgB7lB,KAAKqW,MAAM3F,OAChC1Q,KAAK4lB,cAAe,OACpB5lB,KAAKyE,eAET,KAAK,GAOD,OANAzE,KAAK6lB,gBACD7lB,KAAK6lB,cAAgB7lB,KAAKqW,MAAM3F,SAChC1Q,KAAK6lB,cAAgB7lB,KAAKqW,MAAM3F,QAEpC1Q,KAAK4lB,cAAe,OACpB5lB,KAAKyE,eAET,KAAK,GAOD,OANAzE,KAAK6lB,gBACD7lB,KAAK6lB,cAAgB,IACrB7lB,KAAK6lB,cAAgB,GAEzB7lB,KAAK4lB,cAAe,OACpB5lB,KAAKyE,eAET,KAAK,IAED,YADAzE,KAAKonB,SAAU,GAKvB,GAAIloB,KACe,IAAb+nB,GACe,KAAZA,GACAA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,IAAMA,EAAU,OAC/BjnB,KAAKgmB,YAAc9mB,EACnBc,KAAKkmB,yBAAyBxb,gBAAgB1K,MAC9Cd,EAAMc,KAAKgmB,YACPhmB,KAAK+lB,SACL,GAA2B,IAAvB/lB,KAAK6lB,cACL7lB,KAAKsO,MAAQpP,MACV,CACH,IAAImoB,EAAiBrnB,KAAKqW,MAAM3F,OAAS1Q,KAAK6lB,cAE9C7lB,KAAKsO,KAAOtO,KAAKqW,MAAMqC,MAAM,EAAG2O,GAAkBnoB,EAAMc,KAAKqW,MAAMqC,MAAM2O,KAOlFjC,EAAA7lB,UAAA+nB,gBAAP,SAAuBC,GACnBvnB,KAAKgnB,WAAWO,EAAIN,QAASM,EAAIroB,MAG9BkmB,EAAA7lB,UAAAkM,MAAP,SAAavB,EAAwBjB,GAArC,IAAA/D,EAAAlF,KAII,GAHAiJ,EAAQyK,OAER1T,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,EAE3CjJ,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAI7BxD,KAAK2lB,WACD3lB,KAAKslB,qBACLrc,EAAQY,UAAY7J,KAAKslB,mBAEzBrc,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,SAEpHhF,KAAKiT,cACZhK,EAAQY,UAAY7J,KAAKiT,YAEzBhK,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,UAGvHhF,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAGvBxD,KAAKuE,cACNvE,KAAKuE,YAAcqO,EAAA7S,QAAQ4N,eAAe1E,EAAQW,OAItD,IAAI4d,EAAexnB,KAAKI,gBAAgB0F,KAAO9F,KAAKwlB,QAAQ1gB,gBAAgB9E,KAAK4E,MAAOsF,EAAcnF,OAClG/E,KAAKkiB,QACLjZ,EAAQY,UAAY7J,KAAKkiB,OAG7B,IAAI5T,EAAOtO,KAAKynB,kBAAkBznB,KAAKqW,OAElCrW,KAAK2lB,YAAe3lB,KAAKqW,QAASrW,KAAKqlB,mBACxC/W,EAAOtO,KAAKqlB,iBAERrlB,KAAKulB,oBACLtc,EAAQY,UAAY7J,KAAKulB,oBAIjCvlB,KAAK0nB,WAAaze,EAAQwP,YAAYnK,GAAMvJ,MAC5C,IAAI4iB,EAA8E,EAAhE3nB,KAAKwlB,QAAQ1gB,gBAAgB9E,KAAK4E,MAAOsF,EAAcnF,OACrE/E,KAAKylB,oBACLzlB,KAAK+E,MAAQyD,KAAKuC,IAAI/K,KAAK0lB,UAAU5gB,gBAAgB9E,KAAK4E,MAAOsF,EAAcnF,OAAQ/E,KAAK0nB,WAAaC,GAAe,MAG5H,IAAI7O,EAAQ9Y,KAAKuE,YAAY8K,QAAUrP,KAAKI,gBAAgB4E,OAAShF,KAAKuE,YAAYS,QAAU,EAC5F4iB,EAAiB5nB,KAAKa,OAAOiE,gBAAgB9E,KAAK4E,MAAOsF,EAAcnF,OAAS4iB,EAMpF,GALA1e,EAAQyK,OACRzK,EAAQ4B,YACR5B,EAAQmC,KAAKoc,EAAcxnB,KAAKI,gBAAgB2F,KAAO/F,KAAKI,gBAAgB4E,OAAShF,KAAKuE,YAAYS,QAAU,EAAG4iB,EAAiB,EAAG5nB,KAAKI,gBAAgB4E,QAC5JiE,EAAQ2B,OAEJ5K,KAAK2lB,YAAc3lB,KAAK0nB,WAAaE,EAAgB,CACrD,IAAIC,EAAWL,EAAexnB,KAAK0nB,WAAaE,EAC3C5nB,KAAKwmB,cACNxmB,KAAKwmB,YAAcqB,QAGvB7nB,KAAKwmB,YAAcgB,EAMvB,GAHAve,EAAQoO,SAAS/I,EAAMtO,KAAKwmB,YAAaxmB,KAAKI,gBAAgB2F,IAAM+S,GAGhE9Y,KAAK2lB,WAAY,CAGjB,GAAI3lB,KAAK8nB,mBAAoB,CACzB,IACIC,EADgB/nB,KAAKwmB,YAAcxmB,KAAK0nB,WACC1nB,KAAK8nB,mBAC9CE,EAAc,EAClBhoB,KAAK6lB,cAAgB,EACrB,IAAIoC,EAAe,EACnB,GACQjoB,KAAK6lB,gBACLoC,EAAezf,KAAKC,IAAIsf,EAAyBC,IAErDhoB,KAAK6lB,gBACLmC,EAAc/e,EAAQwP,YAAYnK,EAAK4Y,OAAO5Y,EAAKoC,OAAS1Q,KAAK6lB,cAAe7lB,KAAK6lB,gBAAgB9gB,YAEhGijB,EAAcD,GAA2BzZ,EAAKoC,QAAU1Q,KAAK6lB,eAGlErd,KAAKC,IAAIsf,EAAyBC,GAAeC,GACjDjoB,KAAK6lB,gBAGT7lB,KAAK4lB,cAAe,EACpB5lB,KAAK8nB,mBAAqB,KAI9B,IAAK9nB,KAAK4lB,aAAc,CACpB,IAAIsC,EAAmBloB,KAAKsO,KAAK4Y,OAAOlnB,KAAKqW,MAAM3F,OAAS1Q,KAAK6lB,eAC7DsC,EAAoBlf,EAAQwP,YAAYyP,GAAkBnjB,MAC1DqjB,EAAapoB,KAAKwmB,YAAcxmB,KAAK0nB,WAAaS,EAElDC,EAAaZ,GACbxnB,KAAKwmB,aAAgBgB,EAAeY,EACpCA,EAAaZ,EACbxnB,KAAKyE,gBACE2jB,EAAaZ,EAAeI,IACnC5nB,KAAKwmB,aAAgBgB,EAAeI,EAAiBQ,EACrDA,EAAaZ,EAAeI,EAC5B5nB,KAAKyE,gBAETwE,EAAQwK,SAAS2U,EAAYpoB,KAAKI,gBAAgB2F,KAAO/F,KAAKI,gBAAgB4E,OAAShF,KAAKuE,YAAYS,QAAU,EAAG,EAAGhF,KAAKuE,YAAYS,QAG7IyhB,aAAazmB,KAAK0mB,eAClB1mB,KAAK0mB,cAAqB2B,WAAW,WACjCnjB,EAAK0gB,cAAgB1gB,EAAK0gB,aAC1B1gB,EAAKT,gBACN,KAGPwE,EAAQ+K,UAGJhU,KAAK8hB,aACD9hB,KAAKkiB,QACLjZ,EAAQuO,YAAcxX,KAAKkiB,OAE/BjZ,EAAQsO,UAAYvX,KAAK8hB,WAEzB7Y,EAAQmZ,WAAWpiB,KAAKI,gBAAgB0F,KAAO9F,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB2F,IAAM/F,KAAK8hB,WAAa,EAC7G9hB,KAAKI,gBAAgB2E,MAAQ/E,KAAK8hB,WAAY9hB,KAAKI,gBAAgB4E,OAAShF,KAAK8hB,aAG7F7Y,EAAQ+K,WAGLoR,EAAA7lB,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAI1DhM,KAAK8nB,mBAAqBzb,EAAYjG,EAClCpG,KAAK4E,MAAMmiB,iBAAmB/mB,MAE9BymB,aAAazmB,KAAK0mB,eAClB1mB,KAAKyE,gBACE,IAEXzE,KAAK4E,MAAMmiB,eAAiB/mB,MAErB,KAGJolB,EAAA7lB,UAAAmN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/FuE,EAAA3R,UAAMmN,aAAY5O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,EAAaW,IAG1DyY,EAAA7lB,UAAAkoB,kBAAV,SAA4BnZ,GACxB,OAAOA,GAGJ8W,EAAA7lB,UAAAqO,QAAP,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAEbA,KAAKomB,iBAAiBvY,QACtB7N,KAAKmmB,kBAAkBtY,QACvB7N,KAAK8W,wBAAwBjJ,SAErCuX,EAhhBA,CAA+BxS,EAAA7S,SAAlB9C,EAAAmoB,2FCRb,IAAAzlB,EAAAlC,EAAA,GAEAmC,EAAAnC,EAAA,GAOA6qB,EAAA,WAmBI,SAAAA,EAAYC,GACRvoB,KAAKwoB,WAAaD,EAElBvoB,KAAKyoB,GAAK,IAAI9oB,EAAAgB,aAAa,GAC3BX,KAAK0oB,GAAK,IAAI/oB,EAAAgB,aAAa,GAE3BX,KAAK2oB,OAAS,IAAI/oB,EAAA6C,QAAQ,EAAG,GAkHrC,OA9GIpE,OAAAC,eAAWgqB,EAAA/oB,UAAA,SAAX,WACI,OAAOS,KAAKyoB,GAAG9jB,SAAS3E,KAAKwoB,WAAW5jB,YAG5C,SAAahG,GACLoB,KAAKyoB,GAAG9jB,SAAS3E,KAAKwoB,WAAW5jB,SAAWhG,GAI5CoB,KAAKyoB,GAAG5jB,WAAWjG,IACnBoB,KAAKwoB,WAAW/jB,gDAKxBpG,OAAAC,eAAWgqB,EAAA/oB,UAAA,SAAX,WACI,OAAOS,KAAK0oB,GAAG/jB,SAAS3E,KAAKwoB,WAAW5jB,YAG5C,SAAahG,GACLoB,KAAK0oB,GAAG/jB,SAAS3E,KAAKwoB,WAAW5jB,SAAWhG,GAI5CoB,KAAK0oB,GAAG7jB,WAAWjG,IACnBoB,KAAKwoB,WAAW/jB,gDAKxBpG,OAAAC,eAAWgqB,EAAA/oB,UAAA,eAAX,WACI,OAAOS,KAAK4oB,cAGhB,SAAmBhqB,GACXoB,KAAK4oB,WAAahqB,IAIlBoB,KAAK4oB,UAAY5oB,KAAK6oB,mBACtB7oB,KAAK4oB,SAASxkB,kBAAkBgB,OAAOpF,KAAK6oB,kBAE5C7oB,KAAK6oB,iBAAmB,MAG5B7oB,KAAK4oB,SAAWhqB,EAEZoB,KAAK4oB,WACL5oB,KAAK6oB,iBAAmB7oB,KAAK4oB,SAASxkB,kBAAkBkB,IAAItF,KAAKwoB,WAAWM,gBAGhF9oB,KAAKwoB,WAAW/jB,iDAIpBpG,OAAAC,eAAWgqB,EAAA/oB,UAAA,YAAX,WACI,OAAOS,KAAK+oB,WAGhB,SAAgBnqB,GACRoB,KAAK+oB,QAAUnqB,IAIfoB,KAAK+oB,OAAS/oB,KAAKgpB,eACnBhpB,KAAK+oB,MAAMtI,WAAWwI,8BAA8B7jB,OAAOpF,KAAKgpB,eAGpEhpB,KAAK+oB,MAAQnqB,EAEToB,KAAK+oB,QACL/oB,KAAKgpB,cAAgBhpB,KAAK+oB,MAAMtI,WAAWwI,8BAA8B3jB,IAAItF,KAAKwoB,WAAWM,gBAGjG9oB,KAAKwoB,WAAW/jB,iDAOb6jB,EAAA/oB,UAAA6J,UAAP,WAGI,OAFApJ,KAAK2oB,OAAS3oB,KAAKkpB,kBAEZlpB,KAAK2oB,QAGRL,EAAA/oB,UAAA2pB,gBAAR,WACI,GAAkB,MAAdlpB,KAAK+oB,MACL,OAAO/oB,KAAKwoB,WAAW5jB,MAAMukB,qBAAqBnpB,KAAK+oB,MAAMK,kBAAkBC,eAAeC,OAAQtpB,KAAK+oB,MAAMQ,kBAEhH,GAAqB,MAAjBvpB,KAAK4oB,SACV,OAAO,IAAIhpB,EAAA6C,QAAQzC,KAAK4oB,SAASrM,QAASvc,KAAK4oB,SAASpM,SAGxD,IAAIzT,EAAY/I,KAAKwoB,WAAW5jB,MAE5B4kB,EAAiBxpB,KAAKyoB,GAAG3jB,gBAAgBiE,EAAM0gB,OAAO1gB,EAAK2gB,QAAQ3kB,QACnE4kB,EAAiB3pB,KAAK0oB,GAAG5jB,gBAAgBiE,EAAM0gB,OAAO1gB,EAAK2gB,QAAQ1kB,SAEvE,OAAO,IAAIpF,EAAA6C,QAAQ+mB,EAAQG,IAK5BrB,EAAA/oB,UAAAqO,QAAP,WACI5N,KAAK0R,QAAU,KACf1R,KAAK4H,KAAO,MAGpB0gB,EA3IA,GAAarrB,EAAAqrB,uaCVb,IAAA1oB,EAAAnC,EAAA,GACA+b,EAAA/b,EAAA,GAEAmsB,EAAAnsB,EAAA,IACAoC,EAAApC,EAAA,GAyBAgiB,EAAA,SAAAvO,GAmNI,SAAAuO,EAAYvhB,EAAc6G,EAAWC,EAAYyB,EAAwBojB,EAAyBC,QAAxE,IAAA/kB,MAAA,QAAW,IAAAC,MAAA,QAAoC,IAAA6kB,OAAA,QAAyB,IAAAC,MAAelqB,EAAA8f,QAAQqK,sBAAzH,IAAA7kB,EACIgM,EAAApT,KAAAkC,KAAM9B,GAAQ6G,MAAOA,EAAOC,OAAQA,GAAUyB,EAAOojB,EAAiBC,EAAclqB,EAAAoqB,OAAOC,qBAAmBjqB,KAI9G,OAvNIkF,EAAA5D,UAAW,EASZ4D,EAAAwB,eAAiB,IAAI8S,EAAA3G,UAAU,QAI/B3N,EAAAgI,oBAEAhI,EAAAkI,oBAEAlI,EAAAglB,qBAMAhlB,EAAA4C,gBAAkB,IAAIuJ,MACrBnM,EAAAilB,eAAgB,EAChBjlB,EAAAklB,oBAAsB,IAAIxqB,EAAAyqB,SAAS,EAAG,EAAG,EAAG,GAC5CnlB,EAAAolB,YAAc,EACdplB,EAAAqlB,aAAe,EACfrlB,EAAAslB,mBAA6B,EAC7BtlB,EAAAulB,oBAAqB,EAErBvlB,EAAAwlB,sBAAuB,EACvBxlB,EAAAylB,aAAe,EAKhBzlB,EAAA6a,aAAc,GAgLjBtZ,EAAQvB,EAAKub,aAEEvb,EAAK0lB,UAIpB1lB,EAAK2lB,gBAAkBpkB,EAAMqkB,+BAA+BxlB,IAAI,SAACylB,GAAmB,OAAA7lB,EAAK8lB,aAAaD,KACtG7lB,EAAK+lB,qBAAuBxkB,EAAMykB,wBAAwB5lB,IAAI,SAAA6lB,GACrDjmB,EAAKkmB,kBAIND,EAAKrf,OAASlM,EAAAyrB,mBAAmBC,SACjCpmB,EAAKkmB,gBAAgB9D,gBAAgB6D,EAAKI,OAG9CJ,EAAKK,yBAA0B,KAGnCtmB,EAAKwB,eAAeoC,MAAM,KAAM5D,GAEhCA,EAAKumB,UAAW,EAEX1mB,GAAUC,IACXE,EAAKwmB,gBAAkBjlB,EAAMklB,YAAYC,mBAAmBtmB,IAAI,WAAM,OAAAJ,EAAK2mB,cAC3E3mB,EAAK2mB,aAGT3mB,EAAK0lB,SAASkB,SAAU,OAkehC,OAptB4Cxa,EAAAmO,EAAAvO,GA4CxC7S,OAAAC,eAAWmhB,EAAAlgB,UAAA,mBAAX,WACI,OAAOS,KAAK2qB,kBAGhB,SAAuB/rB,GACfA,IAAUoB,KAAK2qB,eAInB3qB,KAAK2qB,aAAe/rB,EAEpBoB,KAAK6rB,8CAITxtB,OAAAC,eAAWmhB,EAAAlgB,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAK0I,gDAQTrK,OAAAC,eAAWmhB,EAAAlgB,UAAA,kBAAX,WACI,OAAOS,KAAKsqB,iBAGhB,SAAsB1rB,GACdoB,KAAKsqB,cAAgB1rB,IAIzBoB,KAAKsqB,YAAc1rB,EACnBoB,KAAK0I,cACL1I,KAAK0G,eAAeiC,oDAQxBtK,OAAAC,eAAWmhB,EAAAlgB,UAAA,mBAAX,WACI,OAAOS,KAAKuqB,kBAGhB,SAAuB3rB,GACfoB,KAAKuqB,eAAiB3rB,IAI1BoB,KAAKuqB,aAAe3rB,EACpBoB,KAAK0I,cACL1I,KAAK0G,eAAeiC,oDAOxBtK,OAAAC,eAAWmhB,EAAAlgB,UAAA,wBAAX,WACI,OAAOS,KAAKwqB,uBAGhB,SAA4B5rB,GACpBoB,KAAKwqB,oBAAsB5rB,IAI/BoB,KAAKwqB,kBAAoB5rB,EACzBoB,KAAK0I,cACL1I,KAAK0G,eAAeiC,oDAOxBtK,OAAAC,eAAWmhB,EAAAlgB,UAAA,yBAAX,WACI,OAAOS,KAAKyqB,wBAGhB,SAA6B7rB,GACrBoB,KAAKyqB,qBAAuB7rB,IAIhCoB,KAAKyqB,mBAAqB7rB,EAC1BoB,KAAK6rB,8CAMTxtB,OAAAC,eAAWmhB,EAAAlgB,UAAA,aAAX,WACI,OAAOS,KAAK+rB,iDAMhB1tB,OAAAC,eAAWmhB,EAAAlgB,UAAA,qBAAX,WACI,OAAOS,KAAK0G,gDAMhBrI,OAAAC,eAAWmhB,EAAAlgB,UAAA,sBAAX,WACI,OAAOS,KAAKorB,qBAGhB,SAA0B1Z,GAClB1R,KAAKorB,iBAAmB1Z,IAIxB1R,KAAKorB,iBACLprB,KAAKorB,gBAAgB7E,SAGrB7U,GACAA,EAAQiV,UAGZ3mB,KAAKorB,gBAAkB1Z,oCAM3BrT,OAAAC,eAAWmhB,EAAAlgB,UAAA,oBAAX,WACI,OAAKS,KAAKgsB,QAGDhsB,KAAKgsB,MAAMC,kBAGxB,SAAwBrtB,GACfoB,KAAKgsB,OAGNhsB,KAAKgsB,MAAMC,gBAAkBrtB,IAGjCoB,KAAKgsB,MAAMC,cAAgBrtB,oCAmDxB6gB,EAAAlgB,UAAA2sB,qBAAP,SAA4BC,EAAkCC,GACrDA,IACDA,EAAYpsB,KAAK0G,gBAGrBylB,EAAKC,GAEL,IAAkB,IAAAha,EAAA,EAAAC,EAAA+Z,EAAUjZ,SAAVf,EAAAC,EAAA3B,OAAA0B,IAAoB,CAAjC,IAAIgB,EAAKf,EAAAD,GACAgB,EAAOD,SACbnT,KAAKksB,qBAAqBC,EAAkB/Y,GAGhD+Y,EAAK/Y,KAONqM,EAAAlgB,UAAAmJ,YAAP,WACI1I,KAAKsB,UAAW,EAEhBtB,KAAKksB,qBAAqB,SAACxa,GACnBA,EAAQ2a,yBACR3a,EAAQzM,qBAUbwa,EAAAlgB,UAAA+sB,YAAP,WACI,OAAO,IAAI1C,EAAA2C,MAAMvsB,OAQdyf,EAAAlgB,UAAAoS,WAAP,SAAkBD,GAGd,OAFA1R,KAAK0G,eAAeiL,WAAWD,GAExB1R,MAQJyf,EAAAlgB,UAAAuO,cAAP,SAAqB4D,GAEjB,OADA1R,KAAK0G,eAAeoH,cAAc4D,GAC3B1R,MAMJyf,EAAAlgB,UAAAqO,QAAP,WACI,IAAInH,EAAQzG,KAAKygB,WAEZha,IAILA,EAAMqkB,+BAA+B1lB,OAAOpF,KAAK6qB,iBAE7C7qB,KAAK0rB,iBACLjlB,EAAMklB,YAAYC,mBAAmBxmB,OAAOpF,KAAK0rB,iBAGjD1rB,KAAKwsB,sBACL/lB,EAAMgmB,uBAAuBrnB,OAAOpF,KAAKwsB,sBAGzCxsB,KAAK0sB,kBACLjmB,EAAMkmB,oBAAoBvnB,OAAOpF,KAAK0sB,kBAGtC1sB,KAAKirB,sBACLxkB,EAAMykB,wBAAwB9lB,OAAOpF,KAAKirB,sBAG1CjrB,KAAK4sB,2BACLnmB,EAAMklB,YAAYkB,6BAA6BznB,OAAOpF,KAAK4sB,2BAG3D5sB,KAAK+rB,kBACL/rB,KAAK+rB,gBAAgBe,QAAU,KAC/B9sB,KAAK+rB,gBAAgBne,UACrB5N,KAAK+rB,gBAAkB,MAG3B/rB,KAAK0G,eAAekH,UAEpBsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,QAGTyf,EAAAlgB,UAAAssB,UAAR,WACI,IAAIplB,EAAQzG,KAAKygB,WAEjB,GAAKha,EAAL,CAKA,IAAIsmB,EAAStmB,EAAMklB,YACfqB,EAAchtB,KAAKiQ,UACnBgd,EAAcF,EAAOG,iBAAmBltB,KAAK2qB,aAC7CwC,EAAeJ,EAAOK,kBAAoBptB,KAAK2qB,aAE/C3qB,KAAKyqB,qBACDzqB,KAAKsqB,aACL6C,EAAgBA,EAAentB,KAAKsqB,YAAe2C,EACnDA,EAAcjtB,KAAKsqB,aACZtqB,KAAKuqB,eACZ0C,EAAeA,EAAcjtB,KAAKuqB,aAAgB4C,EAClDA,EAAentB,KAAKuqB,eAIxByC,EAAYjoB,QAAUkoB,GAAeD,EAAYhoB,SAAWmoB,IAC5DntB,KAAKqtB,QAAQJ,EAAaE,GAE1BntB,KAAK0I,eAED1I,KAAKsqB,aAAetqB,KAAKuqB,eACzBvqB,KAAK0G,eAAeiC,qBAMzB8W,EAAAlgB,UAAAyH,mBAAP,SAA0BP,GACtB,IAAIsmB,EAAStmB,EAAMklB,YACnB,OAAO3rB,KAAKoqB,oBAAoBkD,SAASP,EAAOG,iBAAkBH,EAAOK,oBAStE3N,EAAAlgB,UAAA4pB,qBAAP,SAA4B3iB,EAAmB+mB,GAC3C,IAAI9mB,EAAQzG,KAAKygB,WAEjB,IAAKha,EACD,OAAO7G,EAAA6C,QAAQC,OAGnB,IAAIqE,EAAiB/G,KAAKgH,mBAAmBP,GACzCQ,EAAoBrH,EAAAsH,QAAQC,QAAQX,EAAU+mB,EAAa9mB,EAAMY,qBAAsBN,GAI3F,OAFAE,EAAkBuO,aAAaxV,KAAKwtB,aAE7B,IAAI5tB,EAAA6C,QAAQwE,EAAkBb,EAAGa,EAAkBZ,IAGtDoZ,EAAAlgB,UAAAyrB,aAAR,SAAqBD,GACjB,IAAI/qB,KAAK+rB,iBACuD,IAAvDhB,EAAO0C,UAAYztB,KAAK+rB,gBAAgB0B,WADjD,CAMA,GAAIztB,KAAKmqB,eAAiBnqB,KAAK8H,gBAAgB4I,OAAQ,CACnD,IAAIjK,EAAQzG,KAAKygB,WAEjB,IAAKha,EACD,OAKJ,IAFA,IAAIM,EAAiB/G,KAAKgH,mBAAmBP,GAEzB2L,EAAA,EAAAC,EAAArS,KAAK8H,gBAALsK,EAAAC,EAAA3B,OAAA0B,IAAsB,CAArC,IAAIV,EAAOW,EAAAD,GACZ,GAAKV,EAAQzF,UAAb,CAIA,IAAIrE,EAAO8J,EAAQ1J,YAEnB,GAAKJ,IAAQA,EAAK8lB,aAAlB,CAQA,IAAIlnB,EAAWoB,EAAKwhB,kBAAkBC,eAAeC,OACjDriB,EAAoBrH,EAAAsH,QAAQC,QAAQX,EAAUoB,EAAK2hB,iBAAkB9iB,EAAMY,qBAAsBN,GAEjGE,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjDmK,EAAQlK,eAAgB,GAG5BkK,EAAQlK,eAAgB,EAExBP,EAAkBuO,aAAaxV,KAAKwtB,aACpC9b,EAAQpK,yBAAyBL,SAjB7BrH,EAAA6H,MAAMgN,aAAa,WACf/C,EAAQ/J,aAAa,WAoBhC3H,KAAKsB,UAAatB,KAAK0G,eAAeinB,WAG3C3tB,KAAKsB,UAAW,EAEhBtB,KAAK4tB,UACL5tB,KAAK6tB,QAAO,EAAM7tB,KAAK+f,gBAGnBN,EAAAlgB,UAAAquB,QAAR,WACI,IAAIZ,EAAchtB,KAAKiQ,UACnBgd,EAAcD,EAAYjoB,MAC1BooB,EAAeH,EAAYhoB,OAG3BiE,EAAUjJ,KAAKuZ,aACnBtQ,EAAQ6kB,UAAU,EAAG,EAAGb,EAAaE,GACjCntB,KAAKiT,cACLhK,EAAQyK,OACRzK,EAAQY,UAAY7J,KAAKiT,YACzBhK,EAAQwK,SAAS,EAAG,EAAGwZ,EAAaE,GACpClkB,EAAQ+K,WAIZ/K,EAAQW,KAAO,aACfX,EAAQuO,YAAc,QACtB,IAAIuW,EAAU,IAAIluB,EAAAQ,QAAQ,EAAG,EAAG4sB,EAAaE,GAC7CntB,KAAK0G,eAAe+E,MAAMsiB,EAAS9kB,IAG/BwW,EAAAlgB,UAAAyuB,WAAR,SAAmB5nB,EAAWC,EAAWyF,EAAcC,EAAmBC,GACtE,IAAIvF,EAAQzG,KAAKygB,WAEjB,GAAKha,EAAL,CAIA,IAAIsmB,EAAStmB,EAAMklB,YACfqB,EAAchtB,KAAKiQ,UAEnBjQ,KAAKmqB,gBACL/jB,GAAS4mB,EAAYjoB,MAAQgoB,EAAOG,iBACpC7mB,GAAS2mB,EAAYhoB,OAAS+nB,EAAOK,mBAGrCptB,KAAKkqB,kBAAkBne,GACvB/L,KAAKkqB,kBAAkBne,GAAWG,oBAAoBJ,EAAM1F,EAAGC,EAAG0F,EAAWC,IAI5EhM,KAAK0G,eAAemF,gBAAgBzF,EAAGC,EAAGyF,EAAMC,EAAWC,IAExDF,IAASlM,EAAAmN,kBAAkBC,cACvBhN,KAAKkN,iBAAiBnB,IACtB/L,KAAKkN,iBAAiBnB,GAAWQ,cAAcvM,KAAKkN,iBAAiBnB,WAGlE/L,KAAKkN,iBAAiBnB,IAIrC/L,KAAKiuB,kBAIFxO,EAAAlgB,UAAA2uB,kCAAP,SAAyCC,EAAwCzc,GAC7E,IAAK,IAAI3F,KAAaoiB,EAAM,CACxB,GAAKA,EAAK3uB,eAAeuM,GAIHoiB,EAAKpiB,KACH2F,UACbyc,EAAKpiB,KAMjB0T,EAAAlgB,UAAAgU,0BAAP,SAAiC7B,GAC7B1R,KAAKkuB,kCAAkCluB,KAAKoN,iBAAkBsE,GAC9D1R,KAAKkuB,kCAAkCluB,KAAKkN,iBAAkBwE,IAI3D+N,EAAAlgB,UAAAie,OAAP,eAAAtY,EAAAlF,KACQyG,EAAQzG,KAAKygB,WACZha,IAILzG,KAAKwsB,qBAAuB/lB,EAAMgmB,uBAAuBnnB,IAAI,SAAC8oB,EAAIC,GAC9D,IAAI5nB,EAAO6nB,kBAAkCF,EAAQ,MAAGriB,aAIpDqiB,EAAGtiB,OAASlM,EAAAmN,kBAAkBC,aAC3BohB,EAAGtiB,OAASlM,EAAAmN,kBAAkBO,WAC9B8gB,EAAGtiB,OAASlM,EAAAmN,kBAAkBI,cAIhC1G,EAAL,CAIA,IAAIskB,EAAStkB,EAAM8nB,wBAA0B9nB,EAAM+nB,aAEnD,GAAKzD,EAAL,CAGA,IAAIgC,EAAStmB,EAAMklB,YACf8C,EAAW1D,EAAO0D,SAClBroB,GAAKK,EAAMioB,SAAW3B,EAAO4B,0BAA4BF,EAASroB,EAAI2mB,EAAOG,kBAAoBuB,EAAS1pB,MAC1GsB,GAAKI,EAAMmoB,SAAW7B,EAAO4B,0BAA4BF,EAASpoB,EAAI0mB,EAAOK,mBAAqBqB,EAASzpB,OAE/GE,EAAK0G,qBAAsB,EAC3B1G,EAAK8oB,WAAW5nB,EAAGC,EAAG+nB,EAAGtiB,KAAOsiB,EAAG7C,MAAuBxf,WAAa,EAAGqiB,EAAG7C,MAAMsD,QAEnFT,EAAG5C,wBAA0BtmB,EAAK0G,wBAGtC5L,KAAK8uB,sBAAsBroB,KAQxBgZ,EAAAlgB,UAAAwvB,aAAP,SAAoBnnB,EAAoBonB,GAAxC,IAAA9pB,EAAAlF,UAAwC,IAAAgvB,OAAA,GACpC,IAAIvoB,EAAQzG,KAAKygB,WACZha,IAGLzG,KAAK0sB,iBAAmBjmB,EAAMkmB,oBAAoBrnB,IAAI,SAAC8oB,EAAIC,GACvD,GAAID,EAAGtiB,OAASlM,EAAAmN,kBAAkBC,aAC3BohB,EAAGtiB,OAASlM,EAAAmN,kBAAkBO,WAC9B8gB,EAAGtiB,OAASlM,EAAAmN,kBAAkBI,YAFrC,CAKA,IAAIpB,EAAaqiB,EAAG7C,MAAuBxf,WAAa,EACxD,GAAIqiB,EAAGa,UAAYb,EAAGa,SAASC,KAAOd,EAAGa,SAASE,aAAevnB,EAAM,CACnE,IAAIwnB,EAAKhB,EAAGa,SAASI,wBAErB,GAAID,EAAI,CACJ,IAAIE,EAAOpqB,EAAK+K,UAEhB/K,EAAK8oB,WAAWoB,EAAGhpB,EAAIkpB,EAAKvqB,OAAQ,EAAMqqB,EAAG/oB,GAAKipB,EAAKtqB,OAAQopB,EAAGtiB,KAAMC,EAAWqiB,EAAG7C,MAAMsD,cAEzFT,EAAGtiB,OAASlM,EAAAmN,kBAAkBO,WACjCpI,EAAKkI,iBAAiBrB,IACtB7G,EAAKkI,iBAAiBrB,GAAWc,gBAAgBd,UAE9C7G,EAAKkI,iBAAiBrB,GAE7B7G,EAAK6hB,eAAiB,MACfqH,EAAGtiB,OAASlM,EAAAmN,kBAAkBC,cACjC9H,EAAKgI,iBAAiBnB,IACtB7G,EAAKgI,iBAAiBnB,GAAWQ,cAAcrH,EAAKgI,iBAAiBnB,WAElE7G,EAAKgI,iBAAiBnB,OAIrCnE,EAAK2nB,wBAA0BP,EAC/BhvB,KAAK8uB,sBAAsBroB,KAOxBgZ,EAAAlgB,UAAAiwB,mBAAP,SAA0B9d,GACtB1R,KAAK+mB,eAAiBrV,EACtB1R,KAAKqN,mBAA0BqE,EAC/B1R,KAAK0qB,sBAAuB,GAGxBjL,EAAAlgB,UAAA0uB,aAAR,WACI,GAAIjuB,KAAK0qB,qBAGL,OAFA1qB,KAAK0qB,sBAAuB,OAC5B1qB,KAAKqN,mBAA0BrN,KAAKorB,iBAKxC,GAAIprB,KAAKorB,iBACDprB,KAAKorB,kBAA0BprB,KAAKqN,mBAAqB,CACzD,GAAIrN,KAAKqN,mBAAmB/J,iBACxB,OAGJtD,KAAK+mB,eAAiB,OAK1BtH,EAAAlgB,UAAAuvB,sBAAR,SAA8BroB,GAA9B,IAAAvB,EAAAlF,KACIA,KAAK4sB,0BAA4BnmB,EAAMklB,YAAYkB,6BAA6BvnB,IAAI,SAACmqB,GAC7EvqB,EAAKgI,iBAAiBuiB,EAAa1jB,YACnC7G,EAAKgI,iBAAiBuiB,EAAa1jB,WAAWQ,cAAcrH,EAAKgI,iBAAiBuiB,EAAa1jB,mBAE5F7G,EAAKgI,iBAAiBuiB,EAAa1jB,WAEtC7G,EAAKkI,iBAAiBqiB,EAAa1jB,YACnC7G,EAAKkI,iBAAiBqiB,EAAa1jB,WAAWc,yBAE3C3H,EAAKkI,iBAAiBqiB,EAAa1jB,cAapC0T,EAAAiQ,cAAd,SAA4B9nB,EAAoB7C,EAAcC,EAAegqB,QAA7B,IAAAjqB,MAAA,WAAc,IAAAC,MAAA,WAAe,IAAAgqB,OAAA,GACzE,IAAI9oB,EAAS,IAAIuZ,EAAuB7X,EAAK1J,KAAO,0BAA2B6G,EAAOC,EAAQ4C,EAAK6Y,YAAY,EAAM7gB,EAAA8f,QAAQC,wBAEzHzB,EAAW,IAAIte,EAAA4gB,iBAAiB,iCAAkC5Y,EAAK6Y,YAW3E,OAVAvC,EAASyR,iBAAkB,EAC3BzR,EAAS0R,aAAehwB,EAAAqf,OAAOE,QAC/BjB,EAASwC,cAAgB9gB,EAAAqf,OAAOE,QAChCjB,EAASgC,gBAAkBha,EAC3BgY,EAAS2R,eAAiB3pB,EAE1B0B,EAAKsW,SAAWA,EAEhBhY,EAAO6oB,aAAannB,EAAMonB,GAEnB9oB,GAeGuZ,EAAAqQ,mBAAd,SAAiC5xB,EAAc6xB,EAA4BtpB,EAA+BupB,QAA3D,IAAAD,OAAA,QAA4B,IAAAtpB,MAAA,WAA+B,IAAAupB,MAAWpwB,EAAA8f,QAAQuQ,uBACzH,IAAI/pB,EAAS,IAAIuZ,EAAuBvhB,EAAM,EAAG,EAAGuI,GAAO,EAAOupB,GAG9DhE,EAAQ,IAAIpsB,EAAAswB,MAAMhyB,EAAO,SAAU,KAAMuI,GAAQspB,GASrD,OARA/D,EAAMc,QAAU5mB,EAEhBA,EAAO6lB,gBAAkBC,EACzB9lB,EAAOikB,eAAgB,EAGvBjkB,EAAOsX,SAEAtX,GAEfuZ,EAptBA,CAA4C7f,EAAAuwB,gBAA/BlzB,EAAAwiB,wGC7Bb,IAAA7f,EAAAnC,EAAA,GAEAkC,EAAAlC,EAAA,GAMA8uB,EAAA,WAkBI,SAAAA,EAAmBxjB,GAjBX/I,KAAAO,YAAc,QACdP,KAAAQ,WAAa,GACbR,KAAAS,YAAc,GAIfT,KAAAU,UAAY,IAAIf,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAK9DZ,KAAAmF,oBAAsB,IAAIvF,EAAAkE,WAO7B9D,KAAK4E,MAAQmE,EAsErB,OAhEI1K,OAAAC,eAAWiuB,EAAAhtB,UAAA,gBAAX,WACI,OAAOS,KAAKU,UAAUiE,SAAS3E,KAAK4E,YAGxC,SAAoBhG,GACZoB,KAAKU,UAAUiE,SAAS3E,KAAK4E,SAAWhG,GAIxCoB,KAAKU,UAAUmE,WAAWjG,IAC1BoB,KAAKmF,oBAAoBuF,gBAAgB1K,uCAOjD3B,OAAAC,eAAWiuB,EAAAhtB,UAAA,kBAAX,WACI,OAAOS,KAAKO,iBAGhB,SAAsB3B,GACdoB,KAAKO,cAAgB3B,IAIzBoB,KAAKO,YAAc3B,EACnBoB,KAAKmF,oBAAoBuF,gBAAgB1K,wCAM7C3B,OAAAC,eAAWiuB,EAAAhtB,UAAA,iBAAX,WACI,OAAOS,KAAKQ,gBAGhB,SAAqB5B,GACboB,KAAKQ,aAAe5B,IAIxBoB,KAAKQ,WAAa5B,EAClBoB,KAAKmF,oBAAoBuF,gBAAgB1K,wCAI7C3B,OAAAC,eAAWiuB,EAAAhtB,UAAA,kBAAX,WACI,OAAOS,KAAKS,iBAGhB,SAAsB7B,GACdoB,KAAKS,cAAgB7B,IAIzBoB,KAAKS,YAAc7B,EACnBoB,KAAKmF,oBAAoBuF,gBAAgB1K,wCAItCusB,EAAAhtB,UAAAqO,QAAP,WACI5N,KAAKmF,oBAAoB0I,SAEjC0e,EAzFA,GAAatvB,EAAAsvB,8ZCRb,IAAAvb,EAAAvT,EAAA,IACAmC,EAAAnC,EAAA,GAKAkjB,EAAA,SAAAzP,GAKI,SAAAyP,EAAYziB,UACRgT,EAAApT,KAAAkC,KAAM9B,IAAK8B,KAWnB,OAjBsCsR,EAAAqP,EAAAzP,GASxByP,EAAAphB,UAAA+E,aAAV,WACI,MAAO,oBAIDqc,EAAAphB,UAAA0S,YAAV,SAAsBxL,GAClB,OAAO,IAAI7G,EAAAsS,cAAc,SAAWlS,KAAK9B,OAEjDyiB,EAjBA,CAAsC3P,EAAA2B,WAAzB1V,EAAA0jB,yaCNb,IAKAtC,EAAA,SAAAnN,GAMI,SAAAmN,EAAmB/N,EAERtE,QAAA,IAAAA,MAAA,GAFX,IAAA9G,EAGIgM,EAAApT,KAAAkC,KAAMsQ,EAAOlK,EAAGkK,EAAOjK,EAAGiK,EAAO/I,IAAEvH,YAD5BkF,EAAA8G,gBAGf,OAXqCsF,EAAA+M,EAAAnN,GAWrCmN,EAXA,CALA5gB,EAAA,GAKqCyJ,SAAxBjK,EAAAohB,qwBCLb,IAAAze,EAAAnC,EAAA,GAEAA,EAAA,IAGA2yB,iBAGA,IAAAC,EAAA,SAAAnf,GAKI,SAAAmf,IAAA,IAAAnrB,EACIgM,EAAApT,KAAAkC,OAAOA,YALJkF,EAAAorB,WAAY,EACZprB,EAAAqrB,QAAS,EACTrrB,EAAAsrB,YAAa,EAIhBtrB,EAAKurB,YAEb,OAT2Cnf,EAAA+e,EAAAnf,GAS3Cmf,EATA,CAA2CzwB,EAAA8wB,iBAA9BzzB,EAAAozB,wBAcb,IAAAM,EAAA,SAAAzf,GAkFI,SAAAyf,EAAYzyB,EAAcuI,GAA1B,IAAAvB,EACIgM,EAAApT,KAAAkC,KAAM9B,EAAMuI,IAAMzG,YA5EfkF,EAAA0rB,wBAA0B,GAM1B1rB,EAAA2rB,eAAiB,IAAIjxB,EAAAqf,OAAO,EAAK,EAAK,GAMtC/Z,EAAA8E,MAAQ,EAMR9E,EAAA4rB,YAAc,IAAIlxB,EAAAqf,OAAO,GAAK,IAAM,IAOpC/Z,EAAA6rB,eAAgB,EAMhB7rB,EAAA8rB,YAAc,GAMd9rB,EAAA+rB,mBAAqB,IAMrB/rB,EAAAgsB,eAAiB,GAOjBhsB,EAAAisB,kBAAmB,EAMnBjsB,EAAAksB,YAAc,EAMdlsB,EAAAmsB,WAAa,IAAIzxB,EAAA0xB,OAAO,GAAK,GAAK,GAAK,GAMvCpsB,EAAAqsB,cAAgB3xB,EAAAsH,QAAQxE,SAuLnC,OAlQoC4O,EAAAqf,EAAAzf,GAsFzByf,EAAApxB,UAAAiyB,kBAAP,WACI,OAAsB,IAAfxxB,KAAKgK,OAGT2mB,EAAApxB,UAAAkyB,iBAAP,WACI,OAAO,GAGJd,EAAApxB,UAAAmyB,oBAAP,WACI,OAAO,MAGJf,EAAApxB,UAAAoyB,kBAAP,SAAyB/pB,EAAoBgqB,EAAkBC,GAC3D,GAAI7xB,KAAK8xB,UACD9xB,KAAK+xB,qBAAuBH,EAAQI,OACpC,OAAO,EAIVJ,EAAQK,mBACTL,EAAQK,iBAAmB,IAAI5B,GAGnC,IAAI5pB,EAAQzG,KAAKygB,WACbyR,EAAiCN,EAAQK,iBAC7C,IAAKjyB,KAAKmyB,uBAAyBP,EAAQI,QACnCE,EAAQE,YAAc3rB,EAAM4rB,cAC5B,OAAO,EAIXH,EAAQI,oBACRJ,EAAQ5B,UAAYtwB,KAAK4wB,wBAA0B,EACnDsB,EAAQ3B,OAASvwB,KAAK+wB,cACtBmB,EAAQ1B,WAAaxwB,KAAKmxB,kBAG9B,IAAIpE,EAAStmB,EAAMklB,YAEnB,GAAIuG,EAAQvE,QAAS,CACjBuE,EAAQK,kBACR9rB,EAAM+rB,sBAGN,IAAIC,GAAW7yB,EAAA8yB,aAAaC,cAC5BF,EAAQvqB,KAAKtI,EAAA8yB,aAAaE,YAC1BH,EAAQvqB,KAAKtI,EAAA8yB,aAAaG,QAE1B,IAEIC,GAAY,QAAS,iBAAkB,iBAAkB,cAAe,cAAe,qBAAsB,cAAe,iBAC5H,aAAc,gBAAiB,eAG/BC,EAAW,IAAI1hB,MACf2hB,EAAiB,IAAI3hB,MAEzBzR,EAAAqzB,eAAeC,gCACXC,cAAeL,EACfM,oBAAqBJ,EACrBD,SAAUA,EACVb,QAASA,EACTmB,sBAAuB,IAG3B,IAAIC,EAAOpB,EAAQvtB,WACnBitB,EAAQ2B,UAAU9sB,EAAMklB,YAAY6H,aAlBnB,UAoBTC,WAAYhB,EACZU,cAAeL,EACfM,oBAAqBJ,EACrBD,SAAUA,EACVb,QAASoB,EACTI,UAAW,KACXC,WAAY3zB,KAAK2zB,WACjBC,QAAS5zB,KAAK4zB,QACdC,iBAAmBR,sBAAuB,IAC3CtG,IAIX,SAAK6E,EAAQI,SAAWJ,EAAQI,OAAOlG,aAIvCoG,EAAQE,UAAY3rB,EAAM4rB,cAC1BryB,KAAK+xB,qBAAsB,GAEpB,IAGJpB,EAAApxB,UAAAu0B,eAAP,SAAsBC,EAAensB,EAAYgqB,GAC7C,IAAInrB,EAAQzG,KAAKygB,WAEbyR,EAAiCN,EAAQK,iBAC7C,GAAKC,EAAL,CAIA,IAAIF,EAASJ,EAAQI,OAChBA,IAGLhyB,KAAKg0B,cAAgBhC,EAGrBhyB,KAAKi0B,oBAAoBF,GACzB/zB,KAAKg0B,cAAcE,UAAU,iBAAkBztB,EAAMY,sBAGjDrH,KAAKm0B,YAAY1tB,EAAOurB,KACxBhyB,KAAKg0B,cAAcI,UAAU,cAAep0B,KAAK8wB,YAAa9wB,KAAKgK,OAE/DkoB,EAAQ5B,WACRtwB,KAAKg0B,cAAcI,UAAU,iBAAkBp0B,KAAK6wB,eAAgB7wB,KAAK4wB,yBAGzEsB,EAAQ3B,SACRvwB,KAAKg0B,cAAcK,SAAS,cAAer0B,KAAKgxB,aAChDhxB,KAAKg0B,cAAcK,SAAS,qBAAsBr0B,KAAKixB,oBACvDjxB,KAAKg0B,cAAcK,SAAS,iBAAkBr0B,KAAKkxB,gBAEnDtpB,EAAKwhB,kBAAkBlU,YAAYE,WAAWyO,cAAcjc,EAAKqV,QAASrd,EAAAyV,IAAInO,QAAQ,IACtFlH,KAAKg0B,cAAcM,WAAW,cAAe10B,EAAAyV,IAAInO,QAAQ,KAGzDgrB,EAAQ1B,aACRxwB,KAAKg0B,cAAcO,gBAAgB,aAAcv0B,KAAKqxB,YACtDrxB,KAAKg0B,cAAcK,SAAS,cAAer0B,KAAKoxB,aAChDpxB,KAAKg0B,cAAcM,WAAW,gBAAiBt0B,KAAKuxB,iBAI5DvxB,KAAKw0B,WAAW5sB,EAAM5H,KAAKg0B,kBAGxBrD,EAAApxB,UAAAk1B,kBAAP,WAGI,OAFqBvjB,EAAA3R,UAAMk1B,kBAAiB32B,KAAAkC,OAKzC2wB,EAAApxB,UAAAm1B,WAAP,SAAkB5H,GACd,QAAI5b,EAAA3R,UAAMm1B,WAAU52B,KAAAkC,KAAC8sB,IAOlB6D,EAAApxB,UAAAqO,QAAP,SAAe+mB,GACXzjB,EAAA3R,UAAMqO,QAAO9P,KAAAkC,KAAC20B,IAGXhE,EAAApxB,UAAAq1B,MAAP,SAAa12B,GAAb,IAAAgH,EAAAlF,KACI,OAAOJ,EAAAi1B,oBAAoBC,MAAM,WAAM,WAAInE,EAAezyB,EAAMgH,EAAKub,aAAazgB,OAG/E2wB,EAAApxB,UAAAw1B,UAAP,WACI,IAAIC,EAAsBp1B,EAAAi1B,oBAAoBI,UAAUj1B,MAExD,OADAg1B,EAAoBE,WAAa,6BAC1BF,GAGJrE,EAAApxB,UAAA41B,aAAP,WACI,MAAO,kBAIGxE,EAAAyE,MAAd,SAAoB9kB,EAAa7J,EAAc4uB,GAC3C,OAAOz1B,EAAAi1B,oBAAoBO,MAAM,WAAM,WAAIzE,EAAergB,EAAOpS,KAAMuI,IAAQ6J,EAAQ7J,EAAO4uB,IAzPlGC,GAFC11B,EAAAm1B,YACAn1B,EAAA21B,iBAAiB,mFAOlBD,GADC11B,EAAA41B,0DAODF,GADC11B,EAAAm1B,yCAODO,GADC11B,EAAA41B,uDAQDF,GAFC11B,EAAAm1B,YACAn1B,EAAA21B,iBAAiB,yEAOlBD,GADC11B,EAAAm1B,+CAODO,GADC11B,EAAAm1B,sDAODO,GADC11B,EAAAm1B,kDAQDO,GAFC11B,EAAAm1B,YACAn1B,EAAA21B,iBAAiB,4EAOlBD,GADC11B,EAAAm1B,+CAODO,GADC11B,EAAA61B,sDAODH,GADC11B,EAAA81B,0DAwLL/E,EAlQA,CAAoC/wB,EAAA+1B,cAAvB14B,EAAA0zB,6GCtBb,IAAAiF,EAAAn4B,EAAA,IAQIo4B,OAAkC,IAAXC,EAA0BA,EAA6B,oBAAXx4B,OAA0BA,YAASy4B,OAC9E,IAAjBF,IACDA,EAAcG,QAAgBH,EAAcG,YAC5CH,EAAcG,QAAQJ,IAAMA,+DAGtChV,CAAAnjB,EAAA,uCCdA,IAAAw4B,EAGAA,EAAA,WACA,OAAAj2B,KADA,GAIA,IAEAi2B,KAAAC,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAC,GAED,iBAAA94B,SAAA24B,EAAA34B,QAOAJ,EAAAD,QAAAg5B,+ICnBArV,EAAAnjB,EAAA,KAEAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,0ZCPA,IAAAmV,EAAAnV,EAAA,GAEAmC,EAAAnC,EAAA,GAKA44B,EAAA,SAAAnlB,GA2EI,SAAAmlB,EAAmBn4B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA1EXgH,EAAAoxB,YAAa,EACbpxB,EAAA+N,YAAc,QACd/N,EAAAqxB,gBAAkB,GAClBrxB,EAAA4c,WAAa,EAmBd5c,EAAAsxB,6BAA+B,IAAI52B,EAAAkE,WAsDtCoB,EAAK7B,kBAAmB,IA4DhC,OAzI8BiO,EAAA+kB,EAAAnlB,GAO1B7S,OAAAC,eAAW+3B,EAAA92B,UAAA,iBAAX,WACI,OAAOS,KAAK8hB,gBAGhB,SAAqBljB,GACboB,KAAK8hB,aAAeljB,IAIxBoB,KAAK8hB,WAAaljB,EAClBoB,KAAKyE,iDASTpG,OAAAC,eAAW+3B,EAAA92B,UAAA,sBAAX,WACI,OAAOS,KAAKu2B,qBAGhB,SAA0B33B,GACtBA,EAAQ4J,KAAKyC,IAAIzC,KAAKuC,IAAI,EAAGnM,GAAQ,GAEjCoB,KAAKu2B,kBAAoB33B,IAI7BoB,KAAKu2B,gBAAkB33B,EACvBoB,KAAKyE,iDAITpG,OAAAC,eAAW+3B,EAAA92B,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAW+3B,EAAA92B,UAAA,iBAAX,WACI,OAAOS,KAAKs2B,gBAGhB,SAAqB13B,GACboB,KAAKs2B,aAAe13B,IAIxBoB,KAAKs2B,WAAa13B,EAClBoB,KAAKyE,eAELzE,KAAKw2B,6BAA6B9rB,gBAAgB9L,qCAY5Cy3B,EAAA92B,UAAA+E,aAAV,WACI,MAAO,YAIJ+xB,EAAA92B,UAAAkM,MAAP,SAAavB,EAAwBjB,GAIjC,GAHAA,EAAQyK,OAER1T,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAC/C,IAAIwtB,EAAcz2B,KAAKI,gBAAgB2E,MAAQ/E,KAAK8hB,WAChD4U,EAAe12B,KAAKI,gBAAgB4E,OAAShF,KAAK8hB,WAkBtD,IAhBI9hB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjCyF,EAAQY,UAAY7J,KAAKiT,YACzBhK,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAO9F,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB2F,IAAM/F,KAAK8hB,WAAa,EAAG2U,EAAaC,IAE3H12B,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAGxBxD,KAAKs2B,WAAY,CACjBrtB,EAAQY,UAAY7J,KAAKkiB,MACzB,IAAIyU,EAAcF,EAAcz2B,KAAKu2B,gBACjCK,EAAcF,EAAe12B,KAAKu2B,gBAEtCttB,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAO9F,KAAK8hB,WAAa,GAAK2U,EAAcE,GAAe,EAAG32B,KAAKI,gBAAgB2F,IAAM/F,KAAK8hB,WAAa,GAAK4U,EAAeE,GAAe,EAAGD,EAAaC,GAGxM3tB,EAAQuO,YAAcxX,KAAKkiB,MAC3BjZ,EAAQsO,UAAYvX,KAAK8hB,WAEzB7Y,EAAQmZ,WAAWpiB,KAAKI,gBAAgB0F,KAAO9F,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB2F,IAAM/F,KAAK8hB,WAAa,EAAG2U,EAAaC,GAErIztB,EAAQ+K,WAMLqiB,EAAA92B,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAI1DhM,KAAK62B,WAAa72B,KAAK62B,WAEhB,IAEfR,EAzIA,CAA8BzjB,EAAA7S,SAAjB9C,EAAAo5B,iaCPb,IAAAzjB,EAAAnV,EAAA,GACAmC,EAAAnC,EAAA,GAIAq5B,EAAA,SAAA5lB,GAkFI,SAAA4lB,EAAmB54B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA/EXgH,EAAA4K,OAAiBlQ,EAAAqf,OAAOC,MACxBha,EAAA6xB,UAAY,IAAIn3B,EAAAqf,OAEhB/Z,EAAA8xB,yBAA0B,EAC1B9xB,EAAA+xB,wBAAyB,EAEzB/xB,EAAAgyB,YAAc,EACdhyB,EAAAiyB,WAAa,EACbjyB,EAAAkyB,YAAc,EAEdlyB,EAAAmyB,GAAK,IACLnyB,EAAAoyB,GAAK,EACLpyB,EAAAqyB,GAAK,EAKNryB,EAAAsyB,yBAA2B,IAAI53B,EAAAkE,WAkT9BoB,EAAAuyB,gBAAiB,EAlPrBvyB,EAAKtG,MAAQ,IAAIgB,EAAAqf,OAAO,IAAK,GAAI,IACjC/Z,EAAKoqB,KAAO,QACZpqB,EAAK7B,kBAAmB,IAgVhC,OAtaiCiO,EAAAwlB,EAAA5lB,GAuB7B7S,OAAAC,eAAWw4B,EAAAv3B,UAAA,aAAX,WACI,OAAOS,KAAK8P,YAGhB,SAAiBlR,GACToB,KAAK8P,OAAO4nB,OAAO94B,KAIvBoB,KAAK8P,OAAO1F,SAASxL,GAErBoB,KAAK23B,UAAU33B,KAAK8P,OAAQ9P,KAAK+2B,WAEjC/2B,KAAKq3B,GAAKr3B,KAAK+2B,UAAUt4B,EACzBuB,KAAKs3B,GAAK9uB,KAAKyC,IAAIjL,KAAK+2B,UAAUd,EAAG,MACrCj2B,KAAKu3B,GAAK/uB,KAAKyC,IAAIjL,KAAK+2B,UAAUa,EAAG,MAErC53B,KAAKyE,eAELzE,KAAKw3B,yBAAyB9sB,gBAAgB1K,KAAK8P,0CAIvDzR,OAAAC,eAAWw4B,EAAAv3B,UAAA,aAAX,SAAiBX,GACToB,KAAKa,OAAO8D,SAAS3E,KAAK4E,SAAWhG,GAIrCoB,KAAKa,OAAOgE,WAAWjG,KACvBoB,KAAKe,QAAQ8D,WAAWjG,GACxBoB,KAAKyE,iDAKbpG,OAAAC,eAAWw4B,EAAAv3B,UAAA,cAAX,SAAkBX,GACVoB,KAAKe,QAAQ4D,SAAS3E,KAAK4E,SAAWhG,GAItCoB,KAAKe,QAAQ8D,WAAWjG,KACxBoB,KAAKa,OAAOgE,WAAWjG,GACvBoB,KAAKyE,iDAKbpG,OAAAC,eAAWw4B,EAAAv3B,UAAA,YAAX,WACI,OAAOS,KAAK+E,WAGhB,SAAgBnG,GACZoB,KAAK+E,MAAQnG,mCAcPk4B,EAAAv3B,UAAA+E,aAAV,WACI,MAAO,eAGHwyB,EAAAv3B,UAAAs4B,mBAAR,WACI,IAAIxV,EAA6E,GAApE7Z,KAAKuC,IAAI/K,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QAGnE8yB,EAD4C,GAA3BzV,EADS,GAATA,GAEa7Z,KAAKuvB,KAAK,GACxCvzB,EAAS6d,EAAsB,GAAbyV,EAEtB93B,KAAKk3B,YAAcl3B,KAAKI,gBAAgB0F,KAAOtB,EAC/CxE,KAAKm3B,WAAan3B,KAAKI,gBAAgB2F,IAAMvB,EAC7CxE,KAAKo3B,YAAcU,GAGfhB,EAAAv3B,UAAAy4B,oBAAR,SAA4BC,EAAkBnyB,EAAcC,EAAahB,EAAeC,EAAgBiE,GACpG,IAAIivB,EAAMjvB,EAAQkvB,qBAAqBryB,EAAMC,EAAKhB,EAAQe,EAAMC,GAChEmyB,EAAIE,aAAa,EAAG,QACpBF,EAAIE,aAAa,EAAG,OAASH,EAAW,gBAExChvB,EAAQY,UAAYquB,EACpBjvB,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,GAEnC,IAAIqzB,EAAMpvB,EAAQkvB,qBAAqBryB,EAAMC,EAAKD,EAAMd,EAASe,GACjEsyB,EAAID,aAAa,EAAG,iBACpBC,EAAID,aAAa,EAAG,QAEpBnvB,EAAQY,UAAYwuB,EACpBpvB,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,IAG/B8xB,EAAAv3B,UAAA+4B,YAAR,SAAoB/b,EAAiBC,EAAiB6F,EAAgBpZ,GAClEA,EAAQ4B,YACR5B,EAAQuG,IAAI+M,EAASC,EAAS6F,EAAS,EAAG,EAAG,EAAI7Z,KAAKiH,IAAI,GAC1DxG,EAAQsO,UAAY,EACpBtO,EAAQuO,YAAc,UACtBvO,EAAQkZ,SACRlZ,EAAQ4B,YACR5B,EAAQuG,IAAI+M,EAASC,EAAS6F,EAAQ,EAAG,EAAI7Z,KAAKiH,IAAI,GACtDxG,EAAQsO,UAAY,EACpBtO,EAAQuO,YAAc,UACtBvO,EAAQkZ,UAGJ2U,EAAAv3B,UAAAg5B,wBAAR,SAAgClW,EAAgBpB,GAC5C,IAAIuX,EAASjqB,SAASC,cAAc,UACpCgqB,EAAOzzB,MAAiB,EAATsd,EACfmW,EAAOxzB,OAAkB,EAATqd,EAUhB,IATA,IAAIpZ,EAAoCuvB,EAAOjf,WAAW,MACtDkf,EAAQxvB,EAAQyvB,aAAa,EAAG,EAAY,EAATrW,EAAqB,EAATA,GAC/CsW,EAAOF,EAAME,KAEbzW,EAAQliB,KAAK+2B,UACb6B,EAAYvW,EAASA,EACrBwW,EAAcxW,EAASpB,EACvB6X,EAAYD,EAAcA,EAErBzyB,GAAKic,EAAQjc,EAAIic,EAAQjc,IAC9B,IAAK,IAAIC,GAAKgc,EAAQhc,EAAIgc,EAAQhc,IAAK,CAEnC,IAAI0yB,EAAS3yB,EAAIA,EAAIC,EAAIA,EAEzB,KAAI0yB,EAASH,GAAaG,EAASD,GAAnC,CAIA,IAAIE,EAAOxwB,KAAKuvB,KAAKgB,GACjBE,EAAMzwB,KAAK0wB,MAAM7yB,EAAGD,GAExBpG,KAAKm5B,UAAgB,IAANF,EAAYzwB,KAAKiH,GAAK,IAAKupB,EAAO3W,EAAQ,EAAGH,GAE5D,IAAIra,EAAuD,GAA7CzB,EAAIic,EAA0B,GAAdhc,EAAIgc,GAAcA,GAEhDsW,EAAK9wB,GAAmB,IAAVqa,EAAMzjB,EACpBk6B,EAAK9wB,EAAQ,GAAe,IAAVqa,EAAM+T,EACxB0C,EAAK9wB,EAAQ,GAAe,IAAVqa,EAAM0V,EACxB,IAGIwB,EAAc,GAOdA,EADA/W,EAHc,GAFH,GAOJA,EAJO,IAFH,KASG,KAAyBA,EARzB,IAQiD,IAVpD,GAaf,IAAIgX,GAAcL,EAAOH,IAAgBxW,EAASwW,GAG9CF,EAAK9wB,EAAQ,GADbwxB,EAAaD,EACYC,EAAaD,EAApB,IACXC,EAAa,EAAID,EACN,KAAO,GAAQC,GAAc,EAAID,IAAgBA,GAEjD,KAQ9B,OAFAnwB,EAAQqwB,aAAab,EAAO,EAAG,GAExBD,GAGH1B,EAAAv3B,UAAAo4B,UAAR,SAAkBzV,EAAehc,GAC7B,IAAIzH,EAAIyjB,EAAMzjB,EACVw3B,EAAI/T,EAAM+T,EACV2B,EAAI1V,EAAM0V,EAEV3sB,EAAMzC,KAAKyC,IAAIxM,EAAGw3B,EAAG2B,GACrB7sB,EAAMvC,KAAKuC,IAAItM,EAAGw3B,EAAG2B,GACrB2B,EAAI,EACJ75B,EAAI,EACJ85B,EAAIvuB,EAEJwuB,EAAKxuB,EAAMF,EAEH,IAARE,IACAvL,EAAI+5B,EAAKxuB,GAGTA,GAAOF,IACHE,GAAOxM,GACP86B,GAAKtD,EAAI2B,GAAK6B,EACVxD,EAAI2B,IACJ2B,GAAK,IAEFtuB,GAAOgrB,EACdsD,GAAK3B,EAAIn5B,GAAKg7B,EAAK,EACZxuB,GAAO2sB,IACd2B,GAAK96B,EAAIw3B,GAAKwD,EAAK,GAEvBF,GAAK,IAGTrzB,EAAOzH,EAAI86B,EACXrzB,EAAO+vB,EAAIv2B,EACXwG,EAAO0xB,EAAI4B,GAGP1C,EAAAv3B,UAAA45B,UAAR,SAAkBO,EAAaC,EAAoB/6B,EAAesH,GAC9D,IAAI0zB,EAASh7B,EAAQ+6B,EACjBJ,EAAIG,EAAM,GACVtzB,EAAIwzB,GAAU,EAAIpxB,KAAKC,IAAK8wB,EAAI,EAAK,IACrC96B,EAAI,EACJw3B,EAAI,EACJ2B,EAAI,EAEJ2B,GAAK,GAAKA,GAAK,GACf96B,EAAIm7B,EACJ3D,EAAI7vB,GACGmzB,GAAK,GAAKA,GAAK,GACtB96B,EAAI2H,EACJ6vB,EAAI2D,GACGL,GAAK,GAAKA,GAAK,GACtBtD,EAAI2D,EACJhC,EAAIxxB,GACGmzB,GAAK,GAAKA,GAAK,GACtBtD,EAAI7vB,EACJwxB,EAAIgC,GACGL,GAAK,GAAKA,GAAK,GACtB96B,EAAI2H,EACJwxB,EAAIgC,GACGL,GAAK,GAAKA,GAAK,IACtB96B,EAAIm7B,EACJhC,EAAIxxB,GAGR,IAAIrI,EAAIa,EAAQg7B,EAChB1zB,EAAO2zB,IAAKp7B,EAAIV,EAAKk4B,EAAIl4B,EAAK65B,EAAI75B,IAI/B+4B,EAAAv3B,UAAAkM,MAAP,SAAavB,EAAwBjB,GAIjC,GAHAA,EAAQyK,OAER1T,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAE/C,IAAIoZ,EAA6E,GAApE7Z,KAAKuC,IAAI/K,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QACnE80B,EAA0B,GAATzX,EACjBvc,EAAO9F,KAAKI,gBAAgB0F,KAC5BC,EAAM/F,KAAKI,gBAAgB2F,IAE1B/F,KAAK+5B,mBAAqB/5B,KAAK+5B,kBAAkBh1B,OAAkB,EAATsd,IAC3DriB,KAAK+5B,kBAAoB/5B,KAAKu4B,wBAAwBlW,EAAQyX,IAGlE95B,KAAK63B,sBAED73B,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,cAE7ByF,EAAQwK,SAASzT,KAAKk3B,YAAal3B,KAAKm3B,WAAYn3B,KAAKo3B,YAAap3B,KAAKo3B,cAG/EnuB,EAAQiT,UAAUlc,KAAK+5B,kBAAmBj0B,EAAMC,IAE5C/F,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAG5BxD,KAAKg4B,oBAAoBh4B,KAAKq3B,GAC1Br3B,KAAKk3B,YACLl3B,KAAKm3B,WACLn3B,KAAKo3B,YACLp3B,KAAKo3B,YACLnuB,GAEJ,IAAI+wB,EAAKh6B,KAAKk3B,YAAcl3B,KAAKo3B,YAAcp3B,KAAKs3B,GAChD2C,EAAKj6B,KAAKm3B,WAAan3B,KAAKo3B,aAAe,EAAIp3B,KAAKu3B,IAExDv3B,KAAKs4B,YAAY0B,EAAIC,EAAa,IAAT5X,EAAcpZ,GAEvC,IAAI+vB,EAAO3W,EAA0B,GAAjByX,EACpBE,EAAKl0B,EAAOuc,EAAS7Z,KAAKic,KAAKzkB,KAAKq3B,GAAK,KAAO7uB,KAAKiH,GAAK,KAAOupB,EACjEiB,EAAKl0B,EAAMsc,EAAS7Z,KAAKgc,KAAKxkB,KAAKq3B,GAAK,KAAO7uB,KAAKiH,GAAK,KAAOupB,EAChEh5B,KAAKs4B,YAAY0B,EAAIC,EAAqB,IAAjBH,EAAsB7wB,GAGnDA,EAAQ+K,WAMJ8iB,EAAAv3B,UAAA26B,wBAAR,SAAgC9zB,EAAWC,GACvC,GAAIrG,KAAKi3B,uBAAwB,CAC7B,IAAI5U,EAA6E,GAApE7Z,KAAKuC,IAAI/K,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QACnEuX,EAAU8F,EAASriB,KAAKI,gBAAgB0F,KACxC0W,EAAU6F,EAASriB,KAAKI,gBAAgB2F,IAC5C/F,KAAKq3B,GAA4C,IAAvC7uB,KAAK0wB,MAAM7yB,EAAImW,EAASpW,EAAImW,GAAiB/T,KAAKiH,GAAK,SAE5DzP,KAAKg3B,0BACVh3B,KAAK63B,qBACL73B,KAAKs3B,IAAMlxB,EAAIpG,KAAKk3B,aAAel3B,KAAKo3B,YACxCp3B,KAAKu3B,GAAK,GAAKlxB,EAAIrG,KAAKm3B,YAAcn3B,KAAKo3B,YAC3Cp3B,KAAKs3B,GAAK9uB,KAAKuC,IAAI/K,KAAKs3B,GAAI,GAC5Bt3B,KAAKs3B,GAAK9uB,KAAKyC,IAAIjL,KAAKs3B,GAAI,MAC5Bt3B,KAAKu3B,GAAK/uB,KAAKuC,IAAI/K,KAAKu3B,GAAI,GAC5Bv3B,KAAKu3B,GAAK/uB,KAAKyC,IAAIjL,KAAKu3B,GAAI,OAGhCv3B,KAAKm5B,UAAUn5B,KAAKq3B,GAAIr3B,KAAKs3B,GAAIt3B,KAAKu3B,GAAIv3B,KAAK+2B,WAE/C/2B,KAAKpB,MAAQoB,KAAK+2B,WAGdD,EAAAv3B,UAAA46B,iBAAR,SAAyB9tB,GACrBrM,KAAK63B,qBAEL,IAAI/xB,EAAO9F,KAAKk3B,YACZnxB,EAAM/F,KAAKm3B,WACX7H,EAAOtvB,KAAKo3B,YAEhB,OAAI/qB,EAAYjG,GAAKN,GAAQuG,EAAYjG,GAAKN,EAAOwpB,GACjDjjB,EAAYhG,GAAKN,GAAOsG,EAAYhG,GAAKN,EAAMupB,GAO/CwH,EAAAv3B,UAAA66B,gBAAR,SAAwB/tB,GACpB,IAAIgW,EAA6E,GAApE7Z,KAAKuC,IAAI/K,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QACnEuX,EAAU8F,EAASriB,KAAKI,gBAAgB0F,KACxC0W,EAAU6F,EAASriB,KAAKI,gBAAgB2F,IAExC8yB,EAAcxW,EADY,GAATA,EAEjBgY,EAAWhY,EAASA,EACpBiY,EAAgBzB,EAAcA,EAE9B0B,EAAKluB,EAAYjG,EAAImW,EACrBie,EAAKnuB,EAAYhG,EAAImW,EAErBuc,EAASwB,EAAKA,EAAKC,EAAKA,EAE5B,OAAIzB,GAAUsB,GAAYtB,GAAUuB,GAOjCxD,EAAAv3B,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAI1DhM,KAAKy3B,gBAAiB,EAEtBz3B,KAAKg3B,yBAA0B,EAC/Bh3B,KAAKi3B,wBAAyB,EAE1Bj3B,KAAKm6B,iBAAiB9tB,GACtBrM,KAAKg3B,yBAA0B,EACxBh3B,KAAKo6B,gBAAgB/tB,KAC5BrM,KAAKi3B,wBAAyB,GAGlCj3B,KAAKk6B,wBAAwB7tB,EAAYjG,EAAGiG,EAAYhG,GACxDrG,KAAK4E,MAAMslB,kBAAkBne,GAAa/L,MAEnC,IAGJ82B,EAAAv3B,UAAA4M,eAAP,SAAsBC,EAAiBC,GAC/BrM,KAAKy3B,gBACLz3B,KAAKk6B,wBAAwB7tB,EAAYjG,EAAGiG,EAAYhG,GAG5D6K,EAAA3R,UAAM4M,eAAcrO,KAAAkC,KAACoM,EAAQC,IAG1ByqB,EAAAv3B,UAAAmN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/F3M,KAAKy3B,gBAAiB,SAEfz3B,KAAK4E,MAAMslB,kBAAkBne,GACpCmF,EAAA3R,UAAMmN,aAAY5O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,EAAaW,IAExEmqB,EAtaA,CAAiClkB,EAAA7S,SAApB9C,EAAA65B,oaCLb,IAAAtd,EAAA/b,EAAA,GACAmV,EAAAnV,EAAA,GAIAg9B,EAAA,SAAAvpB,GAqBI,SAAAupB,EAAmBv8B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OApBXgH,EAAA4c,WAAa,IAgFzB,OAjF6BxQ,EAAAmpB,EAAAvpB,GAIzB7S,OAAAC,eAAWm8B,EAAAl7B,UAAA,iBAAX,WACI,OAAOS,KAAK8hB,gBAGhB,SAAqBljB,GACboB,KAAK8hB,aAAeljB,IAIxBoB,KAAK8hB,WAAaljB,EAClBoB,KAAKyE,iDAWCg2B,EAAAl7B,UAAA+E,aAAV,WACI,MAAO,WAGDm2B,EAAAl7B,UAAAiU,WAAV,SAAqBvK,GACjBA,EAAQyK,QAEJ1T,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjCoP,EAAA7S,QAAQwP,YAAYvP,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,EAAG/E,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,EACrIhF,KAAKI,gBAAgB2E,MAAQ,EAAI/E,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB4E,OAAS,EAAIhF,KAAK8hB,WAAa,EAAG7Y,GAE7GjJ,KAAKiT,cACLhK,EAAQY,UAAY7J,KAAKiT,YAEzBhK,EAAQgZ,SAGRjiB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAGxBxD,KAAK8hB,aACD9hB,KAAKkiB,QACLjZ,EAAQuO,YAAcxX,KAAKkiB,OAE/BjZ,EAAQsO,UAAYvX,KAAK8hB,WAEzB7Y,EAAQkZ,UAGZlZ,EAAQ+K,WAGFymB,EAAAl7B,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GACpDiI,EAAA3R,UAAMiL,sBAAqB1M,KAAAkC,KAACkK,EAAejB,GAE3CjJ,KAAK8S,oBAAoB/N,OAAS,EAAI/E,KAAK8hB,WAC3C9hB,KAAK8S,oBAAoB9N,QAAU,EAAIhF,KAAK8hB,WAC5C9hB,KAAK8S,oBAAoBhN,MAAQ9F,KAAK8hB,WACtC9hB,KAAK8S,oBAAoB/M,KAAO/F,KAAK8hB,YAG/B2Y,EAAAl7B,UAAAoU,iBAAV,SAA2B1K,GAEvB2J,EAAA7S,QAAQwP,YAAYvP,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,EAAG/E,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,EAAGhF,KAAKI,gBAAgB2E,MAAQ,EAAG/E,KAAKI,gBAAgB4E,OAAS,EAAGiE,GAE7MA,EAAQ2B,QAEhB6vB,EAjFA,CAA6BjhB,EAAA3G,WAAhB5V,EAAAw9B,gaCLb,IAAAjhB,EAAA/b,EAAA,GACAkC,EAAAlC,EAAA,GACAmV,EAAAnV,EAAA,GAMAi9B,EAAA,SAAAxpB,GAiPI,SAAAwpB,EAAmBx8B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAhPXgH,EAAAy1B,gBAAkB,IAAItpB,MACtBnM,EAAA01B,mBAAqB,IAAIvpB,MACzBnM,EAAA21B,UACA31B,EAAA41B,eAAiB,IAAIzpB,QAkVjC,OAtV0BC,EAAAopB,EAAAxpB,GAOtB7S,OAAAC,eAAWo8B,EAAAn7B,UAAA,gBAAX,WACI,OAAOS,KAAK86B,gDASTJ,EAAAn7B,UAAAw7B,iBAAP,SAAwB/1B,EAAgBS,GAKpC,YALoC,IAAAA,OAAA,GACpCzF,KAAK26B,gBAAgBzyB,KAAK,IAAIvI,EAAAgB,aAAaqE,EAAQS,EAAU9F,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,sBAExGd,KAAKyE,eAEEzE,MASJ06B,EAAAn7B,UAAAy7B,oBAAP,SAA2Bj2B,EAAeU,GAKtC,YALsC,IAAAA,OAAA,GACtCzF,KAAK46B,mBAAmB1yB,KAAK,IAAIvI,EAAAgB,aAAaoE,EAAOU,EAAU9F,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,sBAE1Gd,KAAKyE,eAEEzE,MAUJ06B,EAAAn7B,UAAA07B,iBAAP,SAAwBpzB,EAAe7C,EAAgBS,GACnD,YADmD,IAAAA,OAAA,GAC/CoC,EAAQ,GAAKA,GAAS7H,KAAK26B,gBAAgBjqB,OACpC1Q,MAGXA,KAAK26B,gBAAgB9yB,GAAS,IAAIlI,EAAAgB,aAAaqE,EAAQS,EAAU9F,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,qBAE5Gd,KAAKyE,eAEEzE,OAUJ06B,EAAAn7B,UAAA27B,oBAAP,SAA2BrzB,EAAe9C,EAAeU,GACrD,YADqD,IAAAA,OAAA,GACjDoC,EAAQ,GAAKA,GAAS7H,KAAK46B,mBAAmBlqB,OACvC1Q,MAGXA,KAAK46B,mBAAmB/yB,GAAS,IAAIlI,EAAAgB,aAAaoE,EAAOU,EAAU9F,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,qBAE9Gd,KAAKyE,eAEEzE,OAGH06B,EAAAn7B,UAAA47B,YAAR,SAAoBC,EAAiBl8B,GACjC,GAAKk8B,EAAL,CAIAlqB,EAAA3R,UAAMuO,cAAahQ,KAAAkC,KAACo7B,GAEpB,IAAoB,IAAAhpB,EAAA,EAAAC,EAAA+oB,EAAKjoB,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA9B,IAAIV,EAAOW,EAAAD,GACRipB,EAAar7B,KAAK86B,eAAe/yB,QAAQ2J,IAEzB,IAAhB2pB,GACAr7B,KAAK86B,eAAe7yB,OAAOozB,EAAY,UAIxCr7B,KAAK66B,OAAO37B,KAGfw7B,EAAAn7B,UAAA+7B,YAAR,SAAoBC,EAAqBr8B,GACrC,GAAKc,KAAK66B,OAAO37B,GAAjB,CAIAc,KAAK66B,OAAOU,GAAev7B,KAAK66B,OAAO37B,GAEvC,IAAoB,IAAAkT,EAAA,EAAAC,EAAArS,KAAK66B,OAAOU,GAAapoB,SAAzBf,EAAAC,EAAA3B,OAAA0B,IAAmC,CAAvCC,EAAAD,GACJopB,KAAOD,SAGZv7B,KAAK66B,OAAO37B,KAQhBw7B,EAAAn7B,UAAAk8B,uBAAP,SAA8B5zB,GAC1B,GAAIA,EAAQ,GAAKA,GAAS7H,KAAK46B,mBAAmBlqB,OAC9C,OAAO1Q,KAGX,IAAK,IAAIoG,EAAI,EAAGA,EAAIpG,KAAK26B,gBAAgBjqB,OAAQtK,IAAK,CAClD,IAAIlH,EAASkH,EAAC,IAAIyB,EACduzB,EAAOp7B,KAAK66B,OAAO37B,GAEvBc,KAAKm7B,YAAYC,EAAMl8B,GAG3B,IAASkH,EAAI,EAAGA,EAAIpG,KAAK26B,gBAAgBjqB,OAAQtK,IAC7C,IAAK,IAAIC,EAAIwB,EAAQ,EAAGxB,EAAIrG,KAAK46B,mBAAmBlqB,OAAQrK,IAAK,CAC7D,IAAIk1B,EAAiBn1B,EAAC,KAAIC,EAAI,GAC1BnH,EAASkH,EAAC,IAAIC,EAElBrG,KAAKs7B,YAAYC,EAAar8B,GAQtC,OAJAc,KAAK46B,mBAAmB3yB,OAAOJ,EAAO,GAEtC7H,KAAKyE,eAEEzE,MAQJ06B,EAAAn7B,UAAAm8B,oBAAP,SAA2B7zB,GACvB,GAAIA,EAAQ,GAAKA,GAAS7H,KAAK26B,gBAAgBjqB,OAC3C,OAAO1Q,KAGX,IAAK,IAAIqG,EAAI,EAAGA,EAAIrG,KAAK46B,mBAAmBlqB,OAAQrK,IAAK,CACrD,IAAInH,EAAS2I,EAAK,IAAIxB,EAClB+0B,EAAOp7B,KAAK66B,OAAO37B,GAEvBc,KAAKm7B,YAAYC,EAAMl8B,GAG3B,IAASmH,EAAI,EAAGA,EAAIrG,KAAK46B,mBAAmBlqB,OAAQrK,IAChD,IAAK,IAAID,EAAIyB,EAAQ,EAAGzB,EAAIpG,KAAK26B,gBAAgBjqB,OAAQtK,IAAK,CAC1D,IAAIm1B,EAAiBn1B,EAAI,EAAC,IAAIC,EAC1BnH,EAASkH,EAAC,IAAIC,EAElBrG,KAAKs7B,YAAYC,EAAar8B,GAQtC,OAJAc,KAAK26B,gBAAgB1yB,OAAOJ,EAAO,GAEnC7H,KAAKyE,eAEEzE,MAUJ06B,EAAAn7B,UAAAoS,WAAP,SAAkBD,EAAkBqK,EAAiBD,QAAjB,IAAAC,MAAA,QAAiB,IAAAD,MAAA,GACb,IAAhC9b,KAAK26B,gBAAgBjqB,QAErB1Q,KAAK+6B,iBAAiB,GAAG,GAGU,IAAnC/6B,KAAK46B,mBAAmBlqB,QAExB1Q,KAAKg7B,oBAAoB,GAAG,GAGhC,IAEI97B,EAFIsJ,KAAKuC,IAAIgR,EAAK/b,KAAK26B,gBAAgBjqB,OAAS,GAEtC,IADNlI,KAAKuC,IAAI+Q,EAAQ9b,KAAK46B,mBAAmBlqB,OAAS,GAEtDirB,EAAgB37B,KAAK66B,OAAO37B,GAgBhC,OAdKy8B,IACDA,EAAgB,IAAIniB,EAAA3G,UAAU3T,GAC9Bc,KAAK66B,OAAO37B,GAAOy8B,EACnBA,EAAch1B,oBAAsBiM,EAAA7S,QAAQ6G,0BAC5C+0B,EAAc90B,kBAAoB+L,EAAA7S,QAAQ+G,uBAC1CoK,EAAA3R,UAAMoS,WAAU7T,KAAAkC,KAAC27B,IAGrBA,EAAchqB,WAAWD,GACzB1R,KAAK86B,eAAe5yB,KAAKwJ,GACzBA,EAAQ8pB,KAAOt8B,EAEfc,KAAKyE,eAEEzE,MAQJ06B,EAAAn7B,UAAAuO,cAAP,SAAqB4D,GACjB,IAAI7J,EAAQ7H,KAAK86B,eAAe/yB,QAAQ2J,IAEzB,IAAX7J,GACA7H,KAAK86B,eAAe7yB,OAAOJ,EAAO,GAGtC,IAAIuzB,EAAOp7B,KAAK66B,OAAOnpB,EAAQ8pB,MAO/B,OALIJ,GACAA,EAAKttB,cAAc4D,GAGvB1R,KAAKyE,eACEzE,MAWD06B,EAAAn7B,UAAA+E,aAAV,WACI,MAAO,QAGDo2B,EAAAn7B,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GAapD,IAZA,IAAI2yB,KACAC,KACAC,KACAC,KAEAnU,EAAiB5nB,KAAKI,gBAAgB2E,MACtCi3B,EAAwB,EACxBC,EAAkBj8B,KAAKI,gBAAgB4E,OACvCk3B,EAAyB,EAGzBr0B,EAAQ,EACMuK,EAAA,EAAAC,EAAArS,KAAK26B,gBAALvoB,EAAAC,EAAA3B,OAAA0B,IAAsB,CACpC,IADKxT,EAAKyT,EAAAD,IACA3M,QAENw2B,GADIj3B,EAASpG,EAAM8G,SAAS1F,KAAK4E,OAEjCi3B,EAAQh0B,GAAS7C,OAEjBk3B,GAA0Bt9B,EAAMoa,cAEpCnR,IAGJ,IAAI9B,EAAM,EACV8B,EAAQ,EACR,IAAkB,IAAAkO,EAAA,EAAAC,EAAAhW,KAAK26B,gBAAL5kB,EAAAC,EAAAtF,OAAAqF,IAAsB,CAAnC,IAIO/Q,EAJHpG,EAAKoX,EAAAD,GAGV,GAFAgmB,EAAK7zB,KAAKnC,GAELnH,EAAM6G,QAKPM,GAAOnH,EAAM8G,SAAS1F,KAAK4E,YAH3BmB,GADIf,EAAUpG,EAAMoa,cAAgBkjB,EAA0BD,EAE9DJ,EAAQh0B,GAAS7C,EAIrB6C,IAIJA,EAAQ,EACR,IAAkB,IAAAs0B,EAAA,EAAAC,EAAAp8B,KAAK46B,mBAALuB,EAAAC,EAAA1rB,OAAAyrB,IAAyB,CACvC,IADKv9B,EAAKw9B,EAAAD,IACA12B,QAENmiB,GADI7iB,EAAQnG,EAAM8G,SAAS1F,KAAK4E,OAEhCg3B,EAAO/zB,GAAS9C,OAEhBi3B,GAAyBp9B,EAAMoa,cAEnCnR,IAGJ,IAAI/B,EAAO,EACX+B,EAAQ,EACR,IAAkB,IAAAw0B,EAAA,EAAAC,EAAAt8B,KAAK46B,mBAALyB,EAAAC,EAAA5rB,OAAA2rB,IAAyB,CAAtC,IAGOt3B,EAHHnG,EAAK09B,EAAAD,GAEV,GADAP,EAAM5zB,KAAKpC,GACNlH,EAAM6G,QAKPK,GAAQlH,EAAM8G,SAAS1F,KAAK4E,YAH5BkB,GADIf,EAASnG,EAAMoa,cAAgBgjB,EAAyBpU,EAE5DgU,EAAO/zB,GAAS9C,EAIpB8C,IAIJ,IAAK,IAAI3I,KAAOc,KAAK66B,OACjB,GAAK76B,KAAK66B,OAAOr7B,eAAeN,GAAhC,CAGA,IAAI2Y,EAAQ3Y,EAAI2Y,MAAM,KAClBzR,EAAIm2B,SAAS1kB,EAAM,IACnBxR,EAAIk2B,SAAS1kB,EAAM,IACnBujB,EAAOp7B,KAAK66B,OAAO37B,GAEvBk8B,EAAKt1B,KAAOg2B,EAAMz1B,GAAK,KACvB+0B,EAAKr1B,IAAMg2B,EAAK31B,GAAK,KACrBg1B,EAAKr2B,MAAQ62B,EAAOv1B,GAAK,KACzB+0B,EAAKp2B,OAAS62B,EAAQz1B,GAAK,KAG/B8K,EAAA3R,UAAMiL,sBAAqB1M,KAAAkC,KAACkK,EAAejB,IAIxCyxB,EAAAn7B,UAAAqO,QAAP,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAEb,IAAoB,IAAAoS,EAAA,EAAAC,EAAArS,KAAK86B,eAAL1oB,EAAAC,EAAA3B,OAAA0B,IAAqB,CAAzBC,EAAAD,GACJxE,YAGpB8sB,EAtVA,CAA0BlhB,EAAA3G,WAAb5V,EAAAy9B,6ZCRb,IAKA8B,EAAA,SAAAtrB,GAAA,SAAAsrB,mDAQA,OARmClrB,EAAAkrB,EAAAtrB,GACrBsrB,EAAAj9B,UAAAkoB,kBAAV,SAA4BnZ,GAExB,IADA,IAAImuB,EAAM,GACD9+B,EAAI,EAAGA,EAAI2Q,EAAKoC,OAAQ/S,IAC7B8+B,GAAO,IAEX,OAAOA,GAEfD,EARA,CALA/+B,EAAA,IAKmC2nB,WAAtBnoB,EAAAu/B,saCLb,IAAA5pB,EAAAnV,EAAA,GACAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAIAi/B,EAAA,SAAAxrB,GA+II,SAAAwrB,EAAmBx+B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA9IXgH,EAAAy3B,WAAa,EACbz3B,EAAA03B,IAAM,IAAIj9B,EAAAgB,aAAa,GACvBuE,EAAA23B,IAAM,IAAIl9B,EAAAgB,aAAa,GACvBuE,EAAA43B,IAAM,IAAIn9B,EAAAgB,aAAa,GACvBuE,EAAA63B,IAAM,IAAIp9B,EAAAgB,aAAa,GACvBuE,EAAA83B,MAAQ,IAAI3rB,MA4IhBnM,EAAK9B,kBAAmB,EACxB8B,EAAKhE,qBAAuB0R,EAAA7S,QAAQ6G,0BACpC1B,EAAK9D,mBAAqBwR,EAAA7S,QAAQ+G,yBA0F1C,OA9O0BwK,EAAAorB,EAAAxrB,GAWtB7S,OAAAC,eAAWo+B,EAAAn9B,UAAA,YAAX,WACI,OAAOS,KAAKg9B,WAGhB,SAAgBp+B,GACRoB,KAAKg9B,QAAUp+B,IAInBoB,KAAKg9B,MAAQp+B,EACboB,KAAKyE,iDAITpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,wBAAX,WACI,OAAOS,KAAKi9B,uBAGhB,SAA4Br+B,GAA5B,IAAAsG,EAAAlF,KACQA,KAAKi9B,oBAAsBr+B,IAI3BoB,KAAKk9B,gCAAkCl9B,KAAKi9B,oBAC5Cj9B,KAAKi9B,kBAAkB74B,kBAAkBgB,OAAOpF,KAAKk9B,gCACrDl9B,KAAKk9B,+BAAiC,MAGtCt+B,IACAoB,KAAKk9B,+BAAiCt+B,EAAMwF,kBAAkBkB,IAAI,WAAM,OAAAJ,EAAKT,kBAGjFzE,KAAKi9B,kBAAoBr+B,EACzBoB,KAAKyE,iDAITpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,UAAX,WACI,OAAOS,KAAK48B,IAAIj4B,SAAS3E,KAAK4E,YAGlC,SAAchG,GACNoB,KAAK48B,IAAIj4B,SAAS3E,KAAK4E,SAAWhG,GAIlCoB,KAAK48B,IAAI/3B,WAAWjG,IACpBoB,KAAKyE,gDAKbpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,UAAX,WACI,OAAOS,KAAK68B,IAAIl4B,SAAS3E,KAAK4E,YAGlC,SAAchG,GACNoB,KAAK68B,IAAIl4B,SAAS3E,KAAK4E,SAAWhG,GAIlCoB,KAAK68B,IAAIh4B,WAAWjG,IACpBoB,KAAKyE,gDAKbpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,UAAX,WACI,OAAOS,KAAK88B,IAAIn4B,SAAS3E,KAAK4E,YAGlC,SAAchG,GACNoB,KAAK88B,IAAIn4B,SAAS3E,KAAK4E,SAAWhG,GAIlCoB,KAAK88B,IAAIj4B,WAAWjG,IACpBoB,KAAKyE,gDAKbpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,UAAX,WACI,OAAOS,KAAK+8B,IAAIp4B,SAAS3E,KAAK4E,YAGlC,SAAchG,GACNoB,KAAK+8B,IAAIp4B,SAAS3E,KAAK4E,SAAWhG,GAIlCoB,KAAK+8B,IAAIl4B,WAAWjG,IACpBoB,KAAKyE,gDAKbpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,iBAAX,WACI,OAAOS,KAAK28B,gBAGhB,SAAqB/9B,GACboB,KAAK28B,aAAe/9B,IAIxBoB,KAAK28B,WAAa/9B,EAClBoB,KAAKyE,iDAITpG,OAAAC,eAAWo+B,EAAAn9B,UAAA,2BAAX,SAA+BX,qCAK/BP,OAAAC,eAAWo+B,EAAAn9B,UAAA,yBAAX,SAA6BX,qCAI7BP,OAAAC,eAAYo+B,EAAAn9B,UAAA,oBAAZ,WACI,OAAQS,KAAKi9B,kBAAoBj9B,KAAKi9B,kBAAkB1gB,QAAU,GAAKvc,KAAK88B,IAAIp3B,SAAS1F,KAAK4E,wCAGlGvG,OAAAC,eAAYo+B,EAAAn9B,UAAA,oBAAZ,WACI,OAAQS,KAAKi9B,kBAAoBj9B,KAAKi9B,kBAAkBzgB,QAAU,GAAKxc,KAAK+8B,IAAIr3B,SAAS1F,KAAK4E,wCAexF83B,EAAAn9B,UAAA+E,aAAV,WACI,MAAO,QAGJo4B,EAAAn9B,UAAAkM,MAAP,SAAavB,EAAwBjB,GACjCA,EAAQyK,QAEJ1T,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjCxD,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,KACrCA,EAAQuO,YAAcxX,KAAKkiB,MAC3BjZ,EAAQsO,UAAYvX,KAAK28B,WACzB1zB,EAAQk0B,YAAYn9B,KAAKg9B,OAEzB/zB,EAAQ4B,YACR5B,EAAQqZ,OAAOtiB,KAAK48B,IAAIl3B,SAAS1F,KAAK4E,OAAQ5E,KAAK68B,IAAIn3B,SAAS1F,KAAK4E,QAErEqE,EAAQsZ,OAAOviB,KAAKo9B,aAAcp9B,KAAKq9B,cAEvCp0B,EAAQkZ,UAGZlZ,EAAQ+K,WAGL0oB,EAAAn9B,UAAA+K,SAAP,WAEItK,KAAKI,gBAAgB2E,MAAQyD,KAAKC,IAAIzI,KAAK48B,IAAIl3B,SAAS1F,KAAK4E,OAAS5E,KAAKo9B,cAAgBp9B,KAAK28B,WAChG38B,KAAKI,gBAAgB4E,OAASwD,KAAKC,IAAIzI,KAAK68B,IAAIn3B,SAAS1F,KAAK4E,OAAS5E,KAAKq9B,cAAgBr9B,KAAK28B,YAG3FD,EAAAn9B,UAAAgL,kBAAV,SAA4BL,EAAwBjB,GAChDjJ,KAAKI,gBAAgB0F,KAAO0C,KAAKuC,IAAI/K,KAAK48B,IAAIl3B,SAAS1F,KAAK4E,OAAQ5E,KAAKo9B,cAAgBp9B,KAAK28B,WAAa,EAC3G38B,KAAKI,gBAAgB2F,IAAMyC,KAAKuC,IAAI/K,KAAK68B,IAAIn3B,SAAS1F,KAAK4E,OAAQ5E,KAAKq9B,cAAgBr9B,KAAK28B,WAAa,GASvGD,EAAAn9B,UAAAgH,cAAP,SAAqBC,EAAmBC,EAAc62B,GAClD,QADkD,IAAAA,OAAA,GAC7Ct9B,KAAK4E,OAAS5E,KAAK4F,QAAU5F,KAAK4E,MAAM8B,eAA7C,CAKA,IAAIK,EAAiB/G,KAAK4E,MAAMoC,mBAAmBP,GAC/CQ,EAAoBrH,EAAAsH,QAAQC,QAAQX,EAAU5G,EAAAwH,OAAO9E,WAAYmE,EAAMY,qBAAsBN,GAEjG/G,KAAKsH,yBAAyBL,EAAmBq2B,GAE7Cr2B,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjDvH,KAAKwH,eAAgB,EAGzBxH,KAAKwH,eAAgB,OAbjB5H,EAAA6H,MAAMC,MAAM,2EAqBbg1B,EAAAn9B,UAAA+H,yBAAP,SAAgCL,EAA4Bq2B,QAAA,IAAAA,OAAA,GACxD,IAAIl3B,EAAaa,EAAkBb,EAAIpG,KAAK2D,aAAa+B,SAAS1F,KAAK4E,OAAU,KAC7EyB,EAAaY,EAAkBZ,EAAIrG,KAAK4D,aAAa8B,SAAS1F,KAAK4E,OAAU,KAE7E04B,GACAt9B,KAAKu9B,GAAKn3B,EACVpG,KAAKw9B,GAAKn3B,EACVrG,KAAK88B,IAAIv0B,uBAAwB,EACjCvI,KAAK+8B,IAAIx0B,uBAAwB,IAEjCvI,KAAKy9B,GAAKr3B,EACVpG,KAAK09B,GAAKr3B,EACVrG,KAAK48B,IAAIr0B,uBAAwB,EACjCvI,KAAK68B,IAAIt0B,uBAAwB,IAG7Cm0B,EA9OA,CAA0B9pB,EAAA7S,SAAb9C,EAAAy/B,6ZCNb,IAAA9pB,EAAAnV,EAAA,GACAkgC,EAAAlgC,EAAA,IACAmC,EAAAnC,EAAA,GAOAmgC,EAAA,SAAA1sB,GAeI,SAAA0sB,EAAmB1/B,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAbXgH,EAAAy3B,WAAqB,EAoDtBz3B,EAAA4jB,cAAgB,WACnB5jB,EAAKT,gBArCLS,EAAK9B,kBAAmB,EACxB8B,EAAKhE,qBAAuB0R,EAAA7S,QAAQ6G,0BACpC1B,EAAK9D,mBAAqBwR,EAAA7S,QAAQ+G,uBAElC5B,EAAK83B,SACL93B,EAAK24B,aAwNb,OA/O+BvsB,EAAAssB,EAAA1sB,GA2B3B7S,OAAAC,eAAWs/B,EAAAr+B,UAAA,YAAX,WACI,OAAOS,KAAKg9B,WAGhB,SAAgBp+B,GACRoB,KAAKg9B,QAAUp+B,IAInBoB,KAAKg9B,MAAQp+B,EACboB,KAAKyE,iDAQFm5B,EAAAr+B,UAAAu+B,MAAP,SAAaj2B,GAKT,OAJK7H,KAAK69B,QAAQh2B,KACd7H,KAAK69B,QAAQh2B,GAAS,IAAI81B,EAAArV,eAAetoB,OAGtCA,KAAK69B,QAAQh2B,IAajB+1B,EAAAr+B,UAAA+F,IAAP,mBAAAJ,EAAAlF,KAAW+9B,KAAA3rB,EAAA,EAAAA,EAAA4rB,UAAAttB,OAAA0B,IAAA2rB,EAAA3rB,GAAA4rB,UAAA5rB,GACP,OAAO2rB,EAAME,IAAI,SAAAC,GAAQ,OAAAh5B,EAAKgD,KAAKg2B,MAQhCN,EAAAr+B,UAAA2I,KAAP,SAAYg2B,GACR,IAAIC,EAAwBn+B,KAAK89B,MAAM99B,KAAK69B,QAAQntB,QAEpD,OAAY,MAARwtB,EAAqBC,GAErBD,aAAgBt+B,EAAAie,aAChBsgB,EAAMv2B,KAAOs2B,EAERA,aAAgBtrB,EAAA7S,QACrBo+B,EAAMzsB,QAAUwsB,EAED,MAAVA,EAAK93B,GAAuB,MAAV83B,EAAK73B,IAC5B83B,EAAM/3B,EAAI83B,EAAK93B,EACf+3B,EAAM93B,EAAI63B,EAAK73B,GAGZ83B,IAOJP,EAAAr+B,UAAA6F,OAAP,SAAcxG,GACV,IAAIiJ,EAEJ,GAAIjJ,aAAiB++B,EAAArV,gBAGjB,IAAe,KAFfzgB,EAAQ7H,KAAK69B,QAAQ91B,QAAQnJ,IAGzB,YAIJiJ,EAAQjJ,EAGZ,IAAIu/B,EAAkCn+B,KAAK69B,QAAQh2B,GAE9Cs2B,IAILA,EAAMvwB,UAEN5N,KAAK69B,QAAQ51B,OAAOJ,EAAO,KAI/BxJ,OAAAC,eAAWs/B,EAAAr+B,UAAA,iBAAX,WACI,OAAOS,KAAK28B,gBAGhB,SAAqB/9B,GACboB,KAAK28B,aAAe/9B,IAIxBoB,KAAK28B,WAAa/9B,EAClBoB,KAAKyE,iDAGTpG,OAAAC,eAAWs/B,EAAAr+B,UAAA,2BAAX,SAA+BX,qCAI/BP,OAAAC,eAAWs/B,EAAAr+B,UAAA,yBAAX,SAA6BX,qCAInBg/B,EAAAr+B,UAAA+E,aAAV,WACI,MAAO,aAGJs5B,EAAAr+B,UAAAkM,MAAP,SAAavB,EAAwBjB,GAYjC,GAXAA,EAAQyK,QAEJ1T,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjCxD,KAAK2J,aAAaV,GAEdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAC/CA,EAAQuO,YAAcxX,KAAKkiB,MAC3BjZ,EAAQsO,UAAYvX,KAAK28B,WACzB1zB,EAAQk0B,YAAYn9B,KAAKg9B,OAEzB/zB,EAAQ4B,YAER,IAAIuzB,GAAiB,EAErBp+B,KAAK69B,QAAQQ,QAAQ,SAAAF,GACZA,IAIDC,GACAn1B,EAAQqZ,OAAO6b,EAAMxV,OAAOviB,EAAG+3B,EAAMxV,OAAOtiB,GAE5C+3B,GAAQ,GAGRn1B,EAAQsZ,OAAO4b,EAAMxV,OAAOviB,EAAG+3B,EAAMxV,OAAOtiB,MAIpD4C,EAAQkZ,SAGZlZ,EAAQ+K,WAGF4pB,EAAAr+B,UAAAiL,sBAAV,SAAgCN,EAAwBjB,GAAxD,IAAA/D,EAAAlF,KACIA,KAAKs+B,MAAQ,KACbt+B,KAAKu+B,MAAQ,KACbv+B,KAAKw+B,MAAQ,KACbx+B,KAAKy+B,MAAQ,KAEbz+B,KAAK69B,QAAQQ,QAAQ,SAACF,EAAOt2B,GACpBs2B,IAILA,EAAM/0B,aAEY,MAAdlE,EAAKo5B,OAAiBH,EAAMxV,OAAOviB,EAAIlB,EAAKo5B,SAAOp5B,EAAKo5B,MAAQH,EAAMxV,OAAOviB,IAC/D,MAAdlB,EAAKq5B,OAAiBJ,EAAMxV,OAAOtiB,EAAInB,EAAKq5B,SAAOr5B,EAAKq5B,MAAQJ,EAAMxV,OAAOtiB,IAC/D,MAAdnB,EAAKs5B,OAAiBL,EAAMxV,OAAOviB,EAAIlB,EAAKs5B,SAAOt5B,EAAKs5B,MAAQL,EAAMxV,OAAOviB,IAC/D,MAAdlB,EAAKu5B,OAAiBN,EAAMxV,OAAOtiB,EAAInB,EAAKu5B,SAAOv5B,EAAKu5B,MAAQN,EAAMxV,OAAOtiB,MAGnE,MAAdrG,KAAKs+B,QAAet+B,KAAKs+B,MAAQ,GACnB,MAAdt+B,KAAKu+B,QAAev+B,KAAKu+B,MAAQ,GACnB,MAAdv+B,KAAKw+B,QAAex+B,KAAKw+B,MAAQ,GACnB,MAAdx+B,KAAKy+B,QAAez+B,KAAKy+B,MAAQ,IAGlCb,EAAAr+B,UAAA+K,SAAP,WACsB,MAAdtK,KAAKs+B,OAA+B,MAAdt+B,KAAKw+B,OAA+B,MAAdx+B,KAAKu+B,OAA+B,MAAdv+B,KAAKy+B,QAI3Ez+B,KAAKI,gBAAgB2E,MAAQyD,KAAKC,IAAIzI,KAAKw+B,MAAQx+B,KAAKs+B,OAASt+B,KAAK28B,WACtE38B,KAAKI,gBAAgB4E,OAASwD,KAAKC,IAAIzI,KAAKy+B,MAAQz+B,KAAKu+B,OAASv+B,KAAK28B,aAGjEiB,EAAAr+B,UAAAgL,kBAAV,SAA4BL,EAAwBjB,GAC9B,MAAdjJ,KAAKs+B,OAA+B,MAAdt+B,KAAKu+B,QAI/Bv+B,KAAKI,gBAAgB0F,KAAO9F,KAAKs+B,MAAQt+B,KAAK28B,WAAa,EAC3D38B,KAAKI,gBAAgB2F,IAAM/F,KAAKu+B,MAAQv+B,KAAK28B,WAAa,IAGvDiB,EAAAr+B,UAAAqO,QAAP,WACI,KAAO5N,KAAK69B,QAAQntB,OAAS,GACzB1Q,KAAKoF,OAAOpF,KAAK69B,QAAQntB,OAAS,GAGtCQ,EAAA3R,UAAMqO,QAAO9P,KAAAkC,OAGrB49B,EA/OA,CAA+BhrB,EAAA7S,SAAlB9C,EAAA2gC,kaCTb,IAAAhrB,EAAAnV,EAAA,GACAmC,EAAAnC,EAAA,GAMAihC,EAAA,SAAAxtB,GA6FI,SAAAwtB,EAAmBxgC,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA5FXgH,EAAAoxB,YAAa,EACbpxB,EAAA+N,YAAc,QACd/N,EAAAqxB,gBAAkB,GAClBrxB,EAAA4c,WAAa,EAiBd5c,EAAAy5B,MAAQ,GAGRz5B,EAAAsxB,6BAA+B,IAAI52B,EAAAkE,WAwEtCoB,EAAK7B,kBAAmB,IAoEhC,OApKiCiO,EAAAotB,EAAAxtB,GAO7B7S,OAAAC,eAAWogC,EAAAn/B,UAAA,iBAAX,WACI,OAAOS,KAAK8hB,gBAGhB,SAAqBljB,GACboB,KAAK8hB,aAAeljB,IAIxBoB,KAAK8hB,WAAaljB,EAClBoB,KAAKyE,iDAUTpG,OAAAC,eAAWogC,EAAAn/B,UAAA,sBAAX,WACI,OAAOS,KAAKu2B,qBAGhB,SAA0B33B,GACtBA,EAAQ4J,KAAKyC,IAAIzC,KAAKuC,IAAI,EAAGnM,GAAQ,GAEjCoB,KAAKu2B,kBAAoB33B,IAI7BoB,KAAKu2B,gBAAkB33B,EACvBoB,KAAKyE,iDAITpG,OAAAC,eAAWogC,EAAAn/B,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWogC,EAAAn/B,UAAA,iBAAX,WACI,OAAOS,KAAKs2B,gBAGhB,SAAqB13B,GAArB,IAAAsG,EAAAlF,KACQA,KAAKs2B,aAAe13B,IAIxBoB,KAAKs2B,WAAa13B,EAClBoB,KAAKyE,eAELzE,KAAKw2B,6BAA6B9rB,gBAAgB9L,GAE9CoB,KAAKs2B,YAAct2B,KAAK4E,OAExB5E,KAAK4E,MAAMsnB,qBAAqB,SAACxa,GAC7B,GAAIA,IAAYxM,QAIa6wB,IAAnBrkB,EAASitB,MAAnB,CAGA,IAAIC,EAA2BltB,EAC3BktB,EAAWD,QAAUz5B,EAAKy5B,QAC1BC,EAAW/H,WAAY,wCAgB7B6H,EAAAn/B,UAAA+E,aAAV,WACI,MAAO,eAGJo6B,EAAAn/B,UAAAkM,MAAP,SAAavB,EAAwBjB,GAIjC,GAHAA,EAAQyK,OAER1T,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAC/C,IAAIwtB,EAAcz2B,KAAKI,gBAAgB2E,MAAQ/E,KAAK8hB,WAChD4U,EAAe12B,KAAKI,gBAAgB4E,OAAShF,KAAK8hB,WA4BtD,IA1BI9hB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAIjCoP,EAAA7S,QAAQwP,YAAYvP,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,EAAG/E,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,EACrIhF,KAAKI,gBAAgB2E,MAAQ,EAAI/E,KAAK8hB,WAAa,EAAG9hB,KAAKI,gBAAgB4E,OAAS,EAAIhF,KAAK8hB,WAAa,EAAG7Y,GAEjHA,EAAQY,UAAY7J,KAAKiT,YACzBhK,EAAQgZ,QAEJjiB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAG5ByF,EAAQuO,YAAcxX,KAAKkiB,MAC3BjZ,EAAQsO,UAAYvX,KAAK8hB,WAEzB7Y,EAAQkZ,SAGJniB,KAAKs2B,WAAY,CACjBrtB,EAAQY,UAAY7J,KAAKkiB,MACzB,IAAIyU,EAAcF,EAAcz2B,KAAKu2B,gBACjCK,EAAcF,EAAe12B,KAAKu2B,gBAEtC3jB,EAAA7S,QAAQwP,YAAYvP,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,EAAG/E,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,EACrI2xB,EAAc,EAAI32B,KAAK8hB,WAAa,EAAG8U,EAAc,EAAI52B,KAAK8hB,WAAa,EAAG7Y,GAElFA,EAAQgZ,QAIhBhZ,EAAQ+K,WAIL0qB,EAAAn/B,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAIrDhM,KAAK62B,YACN72B,KAAK62B,WAAY,IAGd,IAEf6H,EApKA,CAAiC9rB,EAAA7S,SAApB9C,EAAAyhC,oaCPb,IAAAG,EAAAphC,EAAA,GACAmC,EAAAnC,EAAA,GACAqhC,EAAArhC,EAAA,IASAshC,EAAA,WAiBA,OAjBA,gBAAa9hC,EAAA8hC,iBAsBb,IAAAC,EAAA,SAAA9tB,GAAA,SAAA8tB,IAAA,IAAA95B,EAAA,OAAAgM,KAAAkH,MAAApY,KAAAg+B,YAAAh+B,YAEWkF,EAAA+5B,qBAAuB,IAAIr/B,EAAAkE,WAG3BoB,EAAAg6B,mBAAqB,OAErBh6B,EAAAi6B,oBAAsB,OAGtBj6B,EAAAk6B,yBAA2B,MAE3Bl6B,EAAAm6B,0BAA4B,MAE5Bn6B,EAAAo6B,wBAA0B,MAE1Bp6B,EAAAq6B,2BAA6B,MAG7Br6B,EAAAs6B,mBAAqB,OAErBt6B,EAAAu6B,wBAA0B,UAG1Bv6B,EAAAw6B,iBAAmB,UAEnBx6B,EAAAy6B,uBAAyB,EAGzBz6B,EAAA06B,WAAa,IAkLxB,OA/MqCtuB,EAAA0tB,EAAA9tB,GA+BvB8tB,EAAAz/B,UAAA+E,aAAV,WACI,MAAO,mBAGH06B,EAAAz/B,UAAAsgC,WAAR,SAAmB3gC,EAAa4gC,GAAhC,IAAA56B,EAAAlF,KACQ6uB,EAASiQ,EAAA9d,OAAOW,mBAAmBziB,EAAKA,GAuB5C,OArBA2vB,EAAO9pB,MAAQ+6B,GAAeA,EAAY/6B,MAAQ+6B,EAAY/6B,MAAQ/E,KAAKk/B,mBAC3ErQ,EAAO7pB,OAAS86B,GAAeA,EAAY96B,OAAS86B,EAAY96B,OAAShF,KAAKm/B,oBAC9EtQ,EAAO3M,MAAQ4d,GAAeA,EAAY5d,MAAQ4d,EAAY5d,MAAQliB,KAAKw/B,mBAC3E3Q,EAAOkR,WAAaD,GAAeA,EAAYC,WAAaD,EAAYC,WAAa//B,KAAKy/B,wBAC1F5Q,EAAOtN,YAAcue,GAAeA,EAAYve,YAAcue,EAAYve,YAAcvhB,KAAKo/B,yBAC7FvQ,EAAOmR,aAAeF,GAAeA,EAAYE,aAAeF,EAAYE,aAAehgC,KAAKq/B,0BAChGxQ,EAAOoR,WAAaH,GAAeA,EAAYG,WAAaH,EAAYG,WAAajgC,KAAKs/B,wBAC1FzQ,EAAOqR,cAAgBJ,GAAeA,EAAYI,cAAgBJ,EAAYI,cAAgBlgC,KAAKu/B,2BAEnG1Q,EAAO5N,UAAY,EACnB4N,EAAOvrB,kBAAmB,EAE1BurB,EAAOnrB,YAAc1D,KAAK0D,YAC1BmrB,EAAOprB,WAAazD,KAAKyD,WACzBorB,EAAOtrB,cAAgBvD,KAAKuD,cAC5BsrB,EAAOrrB,cAAgBxD,KAAKwD,cAE5BqrB,EAAO5qB,sBAAsBqB,IAAI,WAC7BJ,EAAK+5B,qBAAqBv0B,gBAAgBxL,KAGvC2vB,GAQJmQ,EAAAz/B,UAAA4gC,WAAP,SAAkBC,EAAqBC,GACnC,IAAIC,EAAQ,IAAIzB,EAAAplB,WAChB6mB,EAAMC,YAAa,EACnBD,EAAMh9B,kBAAmB,EAEzB,IAAK,IAAI3F,EAAI,EAAGA,EAAIyiC,EAAK1vB,OAAQ/S,IAAK,CAClC,IAAI6iC,EAAa,KAEbH,GAAgBA,EAAa3vB,SAAW0vB,EAAK1vB,SAC7C8vB,EAAaH,EAAa1iC,IAG9B2iC,EAAM3uB,WAAW3R,KAAK6/B,WAAWO,EAAKziC,GAAI6iC,IAG9CxgC,KAAK2R,WAAW2uB,IAObtB,EAAAz/B,UAAAkhC,gBAAP,SAAuBb,GACnB,GAAK5/B,KAAKmT,SAIV,IAAK,IAAIxV,EAAI,EAAGA,EAAIqC,KAAKmT,SAASzC,OAAQ/S,IAAK,CAC3C,IAAIoe,EAAM/b,KAAKmT,SAASxV,GACxB,GAAKoe,GAAoBA,EAAK5I,SAK9B,IADA,IAAIutB,EAA0B3kB,EACrB4kB,EAAI,EAAGA,EAAID,EAAavtB,SAASzC,OAAQiwB,IAAK,CACnD,IAAI9R,EAAS6R,EAAavtB,SAASwtB,GAEnC,GAAK9R,GAAWA,EAAO1b,SAAS,GAAhC,CAIA,IAAIytB,EAAgB/R,EAAO1b,SAAS,GAET,MAAvBytB,EAActyB,OACdugB,EAAO3M,MAAS0d,EAAa5/B,KAAK0/B,iBAAmB1/B,KAAKw/B,mBAC1D3Q,EAAO5N,UAAa2e,EAAa,EAAI5/B,KAAK2/B,uBAAyB,GAGvEiB,EAActyB,KAAQsxB,EAAa,EAAIgB,EAActyB,KAAKuyB,cAAgBD,EAActyB,KAAKwyB,kBAWzGziC,OAAAC,eAAW0gC,EAAAz/B,UAAA,0BAAX,WACI,OAAOS,KAAK+gC,qDAOT/B,EAAAz/B,UAAAyhC,QAAP,SAAeC,GAAf,IAAA/7B,EAAAlF,KACIA,KAAKiM,WAAY,EACjBjM,KAAK+gC,oBAAsBE,EAG3BjhC,KAAKkhC,iBAAmBD,EAAM9a,kBAAkB7gB,IAAI,WAChDJ,EAAK+G,WAAY,IAGrBjM,KAAKmhC,gBAAkBF,EAAM7a,iBAAiB9gB,IAAI,WAC9CJ,EAAK+G,WAAY,IAGrBjM,KAAKohC,oBAAsBphC,KAAKi/B,qBAAqB35B,IAAI,SAACpG,GACtD,GAAKgG,EAAK67B,oBAAV,CAGA,OAAQ7hC,GACJ,IAAK,IAMD,OALAgG,EAAK06B,aACD16B,EAAK06B,WAAa,IAClB16B,EAAK06B,WAAa,QAEtB16B,EAAKu7B,gBAAgBv7B,EAAK06B,YAE9B,IAAK,IAED,YADA16B,EAAK67B,oBAAoB/Z,WAAW,GAExC,IAAK,IAED,YADA9hB,EAAK67B,oBAAoB/Z,WAAW,IAG5C9hB,EAAK67B,oBAAoB/Z,YAAY,EAAI9hB,EAAK06B,WAAa1gC,EAAI2hC,cAAgB3hC,GAEvD,IAApBgG,EAAK06B,aACL16B,EAAK06B,WAAa,EAClB16B,EAAKu7B,gBAAgBv7B,EAAK06B,iBAQ/BZ,EAAAz/B,UAAA8hC,WAAP,WACSrhC,KAAK+gC,sBAIV/gC,KAAK+gC,oBAAoB5a,kBAAkB/gB,OAAOpF,KAAKkhC,kBACvDlhC,KAAK+gC,oBAAoB3a,iBAAiBhhB,OAAOpF,KAAKmhC,iBACtDnhC,KAAKi/B,qBAAqB75B,OAAOpF,KAAKohC,qBAEtCphC,KAAK+gC,oBAAsB,OASjB/B,EAAAsC,oBAAd,WACI,IAAIC,EAAc,IAAIvC,EAQtB,OANAuC,EAAYpB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1EoB,EAAYpB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACrEoB,EAAYpB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/EoB,EAAYpB,YAAY,IAAU,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/EoB,EAAYpB,YAAY,OAASp7B,MAAO,WAEjCw8B,GAEfvC,EA/MA,CAAqCH,EAAAplB,YAAxBxc,EAAA+hC,waCjCb,IAAApsB,EAAAnV,EAAA,GACAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAMA+jC,EAAA,SAAAtwB,GAkLI,SAAAswB,EAAmBtjC,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OAjLXgH,EAAAu8B,YAAc,IAAI9hC,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAChEsE,EAAAw8B,SAAW,EACXx8B,EAAAy8B,SAAW,IACXz8B,EAAA4K,OAAS,GACT5K,EAAAwU,aAAc,EACdxU,EAAA+N,YAAc,QACd/N,EAAA08B,aAAe,QACf18B,EAAA28B,WAAa,IAAIliC,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaC,gBAAgB,GAC9DsE,EAAA48B,gBAAiB,EACjB58B,EAAA68B,iBAAkB,EAGnB78B,EAAAsyB,yBAA2B,IAAI53B,EAAAkE,WA8Y9BoB,EAAAuyB,gBAAiB,EAtOrBvyB,EAAK7B,kBAAmB,IAkRhC,OAvc4BiO,EAAAkwB,EAAAtwB,GAgBxB7S,OAAAC,eAAWkjC,EAAAjiC,UAAA,mBAAX,WACI,OAAOS,KAAK4hC,kBAGhB,SAAuBhjC,GACfoB,KAAK4hC,eAAiBhjC,IAI1BoB,KAAK4hC,aAAehjC,EACpBoB,KAAKyE,iDAITpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,iBAAX,WACI,OAAOS,KAAK6hC,WAAWl9B,SAAS3E,KAAK4E,YAQzC,SAAqBhG,GACboB,KAAK6hC,WAAWl9B,SAAS3E,KAAK4E,SAAWhG,GAIzCoB,KAAK6hC,WAAWh9B,WAAWjG,IAC3BoB,KAAKyE,gDAVbpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,yBAAX,WACI,OAAOS,KAAK6hC,WAAW/8B,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAcjF1G,OAAAC,eAAWkjC,EAAAjiC,UAAA,kBAAX,WACI,OAAOS,KAAKyhC,YAAY98B,SAAS3E,KAAK4E,YAQ1C,SAAsBhG,GACdoB,KAAKyhC,YAAY98B,SAAS3E,KAAK4E,SAAWhG,GAI1CoB,KAAKyhC,YAAY58B,WAAWjG,IAC5BoB,KAAKyE,gDAVbpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,0BAAX,WACI,OAAOS,KAAKyhC,YAAY38B,gBAAgB9E,KAAK4E,MAAO5E,KAAKwB,qBAAqBuD,wCAclF1G,OAAAC,eAAWkjC,EAAAjiC,UAAA,eAAX,WACI,OAAOS,KAAK0hC,cAGhB,SAAmB9iC,GACXoB,KAAK0hC,WAAa9iC,IAItBoB,KAAK0hC,SAAW9iC,EAChBoB,KAAKyE,eAELzE,KAAKpB,MAAQ4J,KAAKyC,IAAIzC,KAAKuC,IAAI/K,KAAKpB,MAAOoB,KAAK2hC,UAAW3hC,KAAK0hC,4CAIpErjC,OAAAC,eAAWkjC,EAAAjiC,UAAA,eAAX,WACI,OAAOS,KAAK2hC,cAGhB,SAAmB/iC,GACXoB,KAAK2hC,WAAa/iC,IAItBoB,KAAK2hC,SAAW/iC,EAChBoB,KAAKyE,eAELzE,KAAKpB,MAAQ4J,KAAKyC,IAAIzC,KAAKuC,IAAI/K,KAAKpB,MAAOoB,KAAK2hC,UAAW3hC,KAAK0hC,4CAIpErjC,OAAAC,eAAWkjC,EAAAjiC,UAAA,aAAX,WACI,OAAOS,KAAK8P,YAGhB,SAAiBlR,GACbA,EAAQ4J,KAAKyC,IAAIzC,KAAKuC,IAAInM,EAAOoB,KAAK2hC,UAAW3hC,KAAK0hC,UAElD1hC,KAAK8P,SAAWlR,IAIpBoB,KAAK8P,OAASlR,EACdoB,KAAKyE,eACLzE,KAAKw3B,yBAAyB9sB,gBAAgB1K,KAAK8P,0CAIvDzR,OAAAC,eAAWkjC,EAAAjiC,UAAA,kBAAX,WACI,OAAOS,KAAK0Z,iBAGhB,SAAsB9a,GACdoB,KAAK0Z,cAAgB9a,IAIzBoB,KAAK0Z,YAAc9a,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,qBAAX,WACI,OAAOS,KAAK8hC,oBAGhB,SAAyBljC,GACjBoB,KAAK8hC,iBAAmBljC,IAI5BoB,KAAK8hC,eAAiBljC,EACtBoB,KAAKyE,iDAITpG,OAAAC,eAAWkjC,EAAAjiC,UAAA,sBAAX,WACI,OAAOS,KAAK+hC,qBAGhB,SAA0BnjC,GAClBoB,KAAK+hC,kBAAoBnjC,IAI7BoB,KAAK+hC,gBAAkBnjC,EACvBoB,KAAKyE,iDAaC+8B,EAAAjiC,UAAA+E,aAAV,WACI,MAAO,UAGDk9B,EAAAjiC,UAAAyiC,mBAAV,SAA6Bl2B,EAAcm2B,GACvC,IAAIC,EAAiB,EACrB,OAAQp2B,GACJ,IAAK,SAEGo2B,EADAliC,KAAKyhC,YAAYh8B,QACA+C,KAAKyC,IAAIjL,KAAKyhC,YAAY/7B,SAAS1F,KAAK4E,OAAQq9B,GAGhDA,EAAmBjiC,KAAKyhC,YAAY/7B,SAAS1F,KAAK4E,OAEvE,MACJ,IAAK,YAEGs9B,EADAliC,KAAKyhC,YAAYh8B,QACA+C,KAAKuC,IAAI/K,KAAKyhC,YAAY/7B,SAAS1F,KAAK4E,OAAQq9B,GAGhDA,EAAmBjiC,KAAKyhC,YAAY/7B,SAAS1F,KAAK4E,OAG/E,OAAOs9B,GAIJV,EAAAjiC,UAAAkM,MAAP,SAAavB,EAAwBjB,GAIjC,GAHAA,EAAQyK,OAER1T,KAAK2J,aAAaV,GACdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAE/C,IAAIk5B,EAAqB,EACrBr2B,EAAO9L,KAAKoiC,cAAgB,SAAW,YACvCt8B,EAAO9F,KAAKI,gBAAgB0F,KAC5BC,EAAM/F,KAAKI,gBAAgB2F,IAC3BhB,EAAQ/E,KAAKI,gBAAgB2E,MAC7BC,EAAShF,KAAKI,gBAAgB4E,OAE9Bq9B,EAAsB75B,KAAKyC,IAAIjL,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QAChFs9B,EAAyB95B,KAAKuC,IAAI/K,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,QAEnFu9B,EAA0BviC,KAAKgiC,mBAAmBl2B,EAAMw2B,GAC5DD,GAAuBE,EAEvB,IAAIlgB,EAAS,EAIb,GAAKriB,KAAK0Z,aAAe1Z,KAAKI,gBAAgB4E,OAAShF,KAAKI,gBAAgB2E,MAExE,YADAy9B,QAAQC,MAAM,uCAUlBH,GAAgD,GAN5CH,EADAniC,KAAK6hC,WAAWp8B,QACK+C,KAAKuC,IAAI/K,KAAK6hC,WAAWn8B,SAAS1F,KAAK4E,OAAQ09B,GAG/CA,EAAyBtiC,KAAK6hC,WAAWn8B,SAAS1F,KAAK4E,QAK5E5E,KAAK0Z,aACL5T,GAAQq8B,EACHniC,KAAK0iC,iBACN38B,GAAQw8B,EAA0B,GAGtCv9B,EAASq9B,EACTt9B,EAAQu9B,IAIRv8B,GAAOo8B,EACFniC,KAAK0iC,iBACN58B,GAASy8B,EAA0B,GAEvCv9B,EAASs9B,EACTv9B,EAAQs9B,GAGRriC,KAAK0iC,gBAAkB1iC,KAAKoiC,eACxBpiC,KAAK0Z,YACL3T,GAAQw8B,EAA0B,EAElCz8B,GAASy8B,EAA0B,EAEvClgB,EAASigB,EAAyB,GAGlCjgB,GAAUkgB,EAA0BJ,GAAsB,GAG1DniC,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAGjC,IAAIm/B,EAAiB3iC,KAAgB,aAAMA,KAAK2hC,SAAW3hC,KAAK8P,SAAW9P,KAAK2hC,SAAW3hC,KAAK0hC,UAAaW,GAAwBriC,KAAK8P,OAAS9P,KAAK0hC,WAAa1hC,KAAK2hC,SAAW3hC,KAAK0hC,UAAaW,EACvMp5B,EAAQY,UAAY7J,KAAKiT,YAErBjT,KAAK0Z,YACD1Z,KAAK0iC,eACD1iC,KAAKoiC,eACLn5B,EAAQ4B,YACR5B,EAAQuG,IAAI1J,EAAOw8B,EAAyB,EAAGv8B,EAAKsc,EAAQ7Z,KAAKiH,GAAI,EAAIjH,KAAKiH,IAC9ExG,EAAQgZ,OACRhZ,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,IAGnCiE,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,EAASu9B,GAIhDt5B,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,GAInChF,KAAK0iC,eACD1iC,KAAKoiC,eACLn5B,EAAQ4B,YACR5B,EAAQuG,IAAI1J,EAAOu8B,EAAqBt8B,EAAOu8B,EAAyB,EAAIjgB,EAAQ,EAAG,EAAI7Z,KAAKiH,IAChGxG,EAAQgZ,OACRhZ,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,IAGnCiE,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAQw9B,EAAyBv9B,GAIjEiE,EAAQwK,SAAS3N,EAAMC,EAAKhB,EAAOC,IAIvChF,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAG5ByF,EAAQY,UAAY7J,KAAKkiB,MACrBliB,KAAK0Z,YACD1Z,KAAK0iC,eACD1iC,KAAKoiC,eACLn5B,EAAQ4B,YACR5B,EAAQuG,IAAI1J,EAAOw8B,EAAyB,EAAGv8B,EAAMs8B,EAAqBhgB,EAAQ,EAAG,EAAI7Z,KAAKiH,IAC9FxG,EAAQgZ,OACRhZ,EAAQwK,SAAS3N,EAAMC,EAAM48B,EAAe59B,EAAOC,EAAS29B,IAG5D15B,EAAQwK,SAAS3N,EAAMC,EAAM48B,EAAe59B,EAAO/E,KAAKI,gBAAgB4E,OAAS29B,GAIrF15B,EAAQwK,SAAS3N,EAAMC,EAAM48B,EAAe59B,EAAOC,EAAS29B,GAI5D3iC,KAAK0iC,gBACD1iC,KAAKoiC,eACLn5B,EAAQ4B,YACR5B,EAAQuG,IAAI1J,EAAMC,EAAMu8B,EAAyB,EAAGjgB,EAAQ,EAAG,EAAI7Z,KAAKiH,IACxExG,EAAQgZ,OACRhZ,EAAQwK,SAAS3N,EAAMC,EAAK48B,EAAe39B,IAO/CiE,EAAQwK,SAAS3N,EAAMC,EAAK48B,EAAe39B,IAK/ChF,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQvF,YAAc1D,KAAK0D,YAC3BuF,EAAQxF,WAAazD,KAAKyD,WAC1BwF,EAAQ1F,cAAgBvD,KAAKuD,cAC7B0F,EAAQzF,cAAgBxD,KAAKwD,eAE7BxD,KAAK8hC,gBACL74B,EAAQ4B,YACJ7K,KAAK0Z,YACLzQ,EAAQuG,IAAI1J,EAAOw8B,EAAyB,EAAGv8B,EAAM48B,EAAetgB,EAAQ,EAAG,EAAI7Z,KAAKiH,IAGxFxG,EAAQuG,IAAI1J,EAAO68B,EAAe58B,EAAOu8B,EAAyB,EAAIjgB,EAAQ,EAAG,EAAI7Z,KAAKiH,IAE9FxG,EAAQgZ,QACJjiB,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAE5ByF,EAAQuO,YAAcxX,KAAK4hC,aAC3B34B,EAAQkZ,WAGJniB,KAAK0Z,YACLzQ,EAAQwK,SAAS3N,EAAOq8B,EAAoBniC,KAAKI,gBAAgB2F,IAAM48B,EAAe3iC,KAAKI,gBAAgB2E,MAAOw9B,GAGlHt5B,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAO68B,EAAe3iC,KAAKI,gBAAgB2F,IAAKw8B,EAAyBviC,KAAKI,gBAAgB4E,SAEpIhF,KAAKyD,YAAczD,KAAKuD,eAAiBvD,KAAKwD,iBAC9CyF,EAAQxF,WAAa,EACrBwF,EAAQ1F,cAAgB,EACxB0F,EAAQzF,cAAgB,GAE5ByF,EAAQuO,YAAcxX,KAAK4hC,aACvB5hC,KAAK0Z,YACLzQ,EAAQmZ,WAAWtc,EAAOq8B,EAAoBniC,KAAKI,gBAAgB2F,IAAM48B,EAAe3iC,KAAKI,gBAAgB2E,MAAOw9B,GAGpHt5B,EAAQmZ,WAAWpiB,KAAKI,gBAAgB0F,KAAO68B,EAAe3iC,KAAKI,gBAAgB2F,IAAKw8B,EAAyBviC,KAAKI,gBAAgB4E,SAIlJiE,EAAQ+K,WAOJwtB,EAAAjiC,UAAA26B,wBAAR,SAAgC9zB,EAAWC,GAClB,GAAjBrG,KAAK4iC,WACL5iC,KAAKuC,uBAAuBoJ,qBAAqBvF,EAAGC,EAAGrG,KAAKwC,sBAC5D4D,EAAIpG,KAAKwC,qBAAqB4D,EAC9BC,EAAIrG,KAAKwC,qBAAqB6D,GAG9BrG,KAAK0Z,YACL1Z,KAAKpB,MAAQoB,KAAK0hC,UAAY,GAAMr7B,EAAIrG,KAAKI,gBAAgB2F,KAAO/F,KAAKI,gBAAgB4E,SAAYhF,KAAK2hC,SAAW3hC,KAAK0hC,UAG1H1hC,KAAKpB,MAAQoB,KAAK0hC,UAAat7B,EAAIpG,KAAKI,gBAAgB0F,MAAQ9F,KAAKI,gBAAgB2E,OAAU/E,KAAK2hC,SAAW3hC,KAAK0hC,WAIrHF,EAAAjiC,UAAAiN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAA3R,UAAMiN,eAAc1O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,KAI1DhM,KAAKy3B,gBAAiB,EAEtBz3B,KAAKk6B,wBAAwB7tB,EAAYjG,EAAGiG,EAAYhG,GACxDrG,KAAK4E,MAAMslB,kBAAkBne,GAAa/L,MAEnC,IAGJwhC,EAAAjiC,UAAA4M,eAAP,SAAsBC,EAAiBC,GAC/BrM,KAAKy3B,gBACLz3B,KAAKk6B,wBAAwB7tB,EAAYjG,EAAGiG,EAAYhG,GAG5D6K,EAAA3R,UAAM4M,eAAcrO,KAAAkC,KAACoM,EAAQC,IAG1Bm1B,EAAAjiC,UAAAmN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/F3M,KAAKy3B,gBAAiB,SAEfz3B,KAAK4E,MAAMslB,kBAAkBne,GACpCmF,EAAA3R,UAAMmN,aAAY5O,KAAAkC,KAACoM,EAAQC,EAAaN,EAAWC,EAAaW,IAExE60B,EAvcA,CAA4B5uB,EAAA7S,SAAf9C,EAAAukC,+ZCPb,IAIAqB,EAAA,SAAA3xB,GA6GI,SAAA2xB,EAAmB3kC,GAAnB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YADIkF,EAAAhH,OA5GXgH,EAAAwP,WAAa,GACbxP,EAAAyP,YAAc,GAEdzP,EAAA49B,mBAAqB,EACrB59B,EAAA69B,gBAAkB,WAElB79B,EAAA89B,mBAAqB,EACrB99B,EAAA+9B,gBAAkB,QAElB/9B,EAAAg+B,oBAAsB,EAEtBh+B,EAAA+N,YAAc,UA2K1B,OAvLiC3B,EAAAuxB,EAAA3xB,GAe7B7S,OAAAC,eAAWukC,EAAAtjC,UAAA,kBAAX,WACI,OAAOS,KAAKiT,iBAGhB,SAAsBrU,GACdoB,KAAKiT,cAAgBrU,IAIzBoB,KAAKiT,YAAcrU,EACnBoB,KAAKyE,iDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,iBAAX,WACI,OAAOS,KAAK0U,gBAGhB,SAAqB9V,GACjBoB,KAAK0U,WAAa9V,EAElBoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,kBAAX,WACI,OAAOS,KAAK2U,iBAGhB,SAAsB/V,GAClBoB,KAAK2U,YAAc/V,EAEnBoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,yBAAX,WACI,OAAOS,KAAK8iC,wBAGhB,SAA6BlkC,GACzBoB,KAAK8iC,mBAAqBlkC,EAE1BoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,sBAAX,WACI,OAAOS,KAAK+iC,qBAGhB,SAA0BnkC,GACtBoB,KAAK+iC,gBAAkBnkC,EAEvBoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,yBAAX,WACI,OAAOS,KAAKgjC,wBAGhB,SAA6BpkC,GACzBoB,KAAKgjC,mBAAqBpkC,EAE1BoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,sBAAX,WACI,OAAOS,KAAKijC,qBAGhB,SAA0BrkC,GACtBoB,KAAKijC,gBAAkBrkC,EAEvBoB,KAAKyE,gDAITpG,OAAAC,eAAWukC,EAAAtjC,UAAA,0BAAX,WACI,OAAOS,KAAKkjC,yBAGhB,SAA8BtkC,GAC1BoB,KAAKkjC,oBAAsBtkC,EAE3BoB,KAAKyE,gDAWFo+B,EAAAtjC,UAAAkM,MAAP,SAAavB,EAAwBjB,GAKjC,GAJAA,EAAQyK,OAER1T,KAAK2J,aAAaV,GAEdjJ,KAAKiK,iBAAiBC,EAAejB,GAAU,CAE3CjJ,KAAKiT,cACLhK,EAAQY,UAAY7J,KAAKiT,YACzBhK,EAAQwK,SAASzT,KAAKI,gBAAgB0F,KAAM9F,KAAKI,gBAAgB2F,IAAK/F,KAAKI,gBAAgB2E,MAAO/E,KAAKI,gBAAgB4E,SAG3H,IAAIm+B,EAAanjC,KAAKI,gBAAgB2E,MAAQ/E,KAAK0U,WAC/C0uB,EAAapjC,KAAKI,gBAAgB4E,OAAShF,KAAK2U,YAGpD1L,EAAQuO,YAAcxX,KAAK+iC,gBAC3B95B,EAAQsO,UAAYvX,KAAK8iC,mBAIzB,IAFA,IAAMh9B,EAAO9F,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAQ,EAE7DqB,GAAK+8B,EAAa,EAAG/8B,EAAI+8B,EAAa,EAAG/8B,IAAK,CACnD,IAAMi9B,EAAQv9B,EAAOM,EAAIpG,KAAK6b,UAE9B5S,EAAQ4B,YACR5B,EAAQqZ,OAAO+gB,EAAOrjC,KAAKI,gBAAgB2F,KAC3CkD,EAAQsZ,OAAO8gB,EAAOrjC,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,QAEtEiE,EAAQkZ,SAKZ,IAFA,IAAMmhB,EAAMtjC,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,OAAS,EAE5DqB,GAAK+8B,EAAa,EAAG/8B,EAAI+8B,EAAa,EAAG/8B,IAAK,CACnD,IAAMk9B,EAAQD,EAAMj9B,EAAIrG,KAAKgc,WAE7B/S,EAAQ4B,YACR5B,EAAQqZ,OAAOtiB,KAAKI,gBAAgB0F,KAAMy9B,GAC1Ct6B,EAAQsZ,OAAOviB,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAOw+B,GACvEt6B,EAAQkZ,SAIZlZ,EAAQuO,YAAcxX,KAAKijC,gBAC3Bh6B,EAAQsO,UAAYvX,KAAKgjC,mBAEzB,IAAS58B,GAAK+8B,EAAa,EAAInjC,KAAKkjC,oBAAqB98B,EAAI+8B,EAAa,EAAG/8B,GAAKpG,KAAKkjC,oBAAqB,CACpGG,EAAQv9B,EAAOM,EAAIpG,KAAK6b,UAE5B5S,EAAQ4B,YACR5B,EAAQqZ,OAAO+gB,EAAOrjC,KAAKI,gBAAgB2F,KAC3CkD,EAAQsZ,OAAO8gB,EAAOrjC,KAAKI,gBAAgB2F,IAAM/F,KAAKI,gBAAgB4E,QACtEiE,EAAQkZ,SAGZ,IAAS9b,GAAK+8B,EAAa,EAAIpjC,KAAKkjC,oBAAqB78B,EAAI+8B,EAAa,EAAG/8B,GAAKrG,KAAKkjC,oBAAqB,CACpGK,EAAQD,EAAMj9B,EAAIrG,KAAKgc,WAC3B/S,EAAQqZ,OAAOtiB,KAAKI,gBAAgB0F,KAAMy9B,GAC1Ct6B,EAAQsZ,OAAOviB,KAAKI,gBAAgB0F,KAAO9F,KAAKI,gBAAgB2E,MAAOw+B,GACvEt6B,EAAQyG,YACRzG,EAAQkZ,UAIhBlZ,EAAQ+K,WAGF6uB,EAAAtjC,UAAA+E,aAAV,WACI,MAAO,eAEfu+B,EAvLA,CAJAplC,EAAA,IAIiCsC,SAApB9C,EAAA4lC,6FCLb,IAAAjwB,EAAAnV,EAAA,GACAohC,EAAAphC,EAAA,GACAqjB,EAAArjB,EAAA,GAQSR,EAAAiB,KAFI,UAYb0U,EAAA7S,QAAQ4P,UAAY,SAAU+B,EAAkBpD,EAAcghB,EAAuBkU,GACjF,IAAIlD,EAAQ,IAAIzB,EAAAplB,WAAW,SACvBgqB,GAAeD,GAAUA,EAAQC,aACjCC,GAAeF,GAAUA,EAAQE,aAErCpD,EAAMC,YAAckD,EAEpB,IAAIE,EAAS,IAAI7iB,EAAA1K,UAAU,UAwB3B,OAvBAutB,EAAOr1B,KAAOA,EACdq1B,EAAOriB,wBAA0B1O,EAAA7S,QAAQ6G,0BACrC68B,EACAE,EAAO5+B,MAAQuqB,EAEfqU,EAAO3+B,OAASsqB,EAGhBoU,GACApD,EAAM3uB,WAAWD,GACjB4uB,EAAM3uB,WAAWgyB,GACjBA,EAAOpiB,YAAc,QAErB+e,EAAM3uB,WAAWgyB,GACjBrD,EAAM3uB,WAAWD,GACjBiyB,EAAO3D,aAAe,OAG1B2D,EAAOlgC,WAAaiO,EAAQjO,WAC5BkgC,EAAOjgC,YAAcgO,EAAQhO,YAC7BigC,EAAOpgC,cAAgBmO,EAAQnO,cAC/BogC,EAAOngC,cAAgBkO,EAAQlO,cAExB88B,gJCnDX1f,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KAEAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,kJCJAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,IACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,KACAmjB,EAAAnjB,EAAA,0ZCXA,IAAAmmC,EAAAnmC,EAAA,GACAmC,EAAAnC,EAAA,GAEAyW,EAAAzW,EAAA,GAKAomC,EAAA,SAAA3yB,GAAA,SAAA2yB,IAAA,IAAA3+B,EAAA,OAAAgM,KAAAkH,MAAApY,KAAAg+B,YAAAh+B,YACYkF,EAAA4+B,QAAU,IAsDtB,OAvDmCxyB,EAAAuyB,EAAA3yB,GAM/B7S,OAAAC,eAAWulC,EAAAtkC,UAAA,cAAX,WACI,OAAOS,KAAK8jC,aAGhB,SAAkBllC,GAAlB,IAAAsG,EAAAlF,KACQA,KAAK8jC,UAAYllC,IAIrBoB,KAAK8jC,QAAUllC,EAEfgB,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAIHsyB,EAAAtkC,UAAA0W,aAAV,SAAuBvE,EAAoBqyB,GACvC,IAAIn8B,EAAO8J,EAAQ9J,KAEnB,GAAKA,EAAL,CAGA,IAAIo8B,EAAShkC,KAAKikC,oBAAoBF,GAGtC,OAFAryB,EAAQlL,SAAWw9B,EAEXhkC,KAAKkkC,aACT,KAAKhwB,EAAAjD,YAAYsB,uBACb3K,EAAKu8B,OAAO,IAAInO,QAAQ9uB,SAAS88B,EAAO59B,EAAG49B,EAAO39B,GAAI29B,EAAOz8B,IAC7D,MACJ,KAAK2M,EAAAjD,YAAYuB,+BACb5K,EAAKu8B,OAAO,IAAInO,QAAQ9uB,QAAQ,EAAI88B,EAAO59B,EAAG49B,EAAO39B,EAAG,EAAI29B,EAAOz8B,IACnE,MACJ,KAAK2M,EAAAjD,YAAYwB,wBACb,MACJ,KAAKyB,EAAAjD,YAAYyB,gCACb9K,EAAKyB,OAAO2sB,QAAQoO,KAAKC,EAAG77B,KAAKiH,GAAIumB,QAAQsO,MAAMC,UAKvDV,EAAAtkC,UAAA0kC,oBAAR,SAA4B3zB,GACxB,IAAI0zB,EAAS,IAAIpkC,EAAAsH,QAAQ,EAAGoJ,EAAOjK,EAAGrG,KAAK8jC,SAEvCU,EAAUl0B,EAAOlK,EAAIpG,KAAK8jC,QAI9B,OAFAlkC,EAAAwH,OAAOq9B,0BAA0BD,EAAQ,EAAG,EAAG5kC,EAAAyV,IAAIjO,OAAO,IAEnDxH,EAAAsH,QAAQw9B,gBAAgBV,EAAQpkC,EAAAyV,IAAIjO,OAAO,KAE1Dy8B,EAvDA,CAAmCD,EAAAzvB,kBAAtBlX,EAAA4mC,saCRb,IAAAc,EAAAlnC,EAAA,IACAmC,EAAAnC,EAAA,GACAmnC,EAAAnnC,EAAA,IACAohC,EAAAphC,EAAA,GACAsjB,EAAAtjB,EAAA,GACAqjB,EAAArjB,EAAA,GAMAonC,EAAA,SAAA3zB,GA4EI,SAAA2zB,EAAY3mC,EAAe4mC,QAAA,IAAAA,OAAA,GAA3B,IAAA5/B,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YAvEPkF,EAAA6/B,iBAAkB,EAyEtB7/B,EAAK6/B,gBAAkBD,EAGvB5/B,EAAKiZ,sBAAwB,WACpBjZ,EAAK0C,MAGV1C,EAAK8/B,YAAYpnB,YAAW,IAGhC1Y,EAAKkZ,oBAAsB,WAClBlZ,EAAK0C,MAGV1C,EAAK8/B,YAAYpnB,YAAW,MA8IxC,OA3OuCtM,EAAAuzB,EAAA3zB,GAenC7S,OAAAC,eAAWumC,EAAAtlC,UAAA,YAAX,WACI,OAAOS,KAAKqW,WAGhB,SAAgBzX,GACRoB,KAAKqW,QAAUzX,IAInBoB,KAAKqW,MAAQzX,EACboB,KAAKilC,oDAMT5mC,OAAAC,eAAWumC,EAAAtlC,UAAA,gBAAX,WACI,OAAOS,KAAKklC,eAGhB,SAAoBtmC,GACZoB,KAAKklC,YAActmC,IAIvBoB,KAAKklC,UAAYtmC,EACjBoB,KAAKilC,oDAMT5mC,OAAAC,eAAWumC,EAAAtlC,UAAA,oBAAX,WACI,OAAOS,KAAKmlC,+CAMhB9mC,OAAAC,eAAWumC,EAAAtlC,UAAA,qBAAX,WACI,OAAOS,KAAKolC,gDAMhB/mC,OAAAC,eAAWumC,EAAAtlC,UAAA,qBAAX,WACI,OAAOS,KAAKqlC,gDAMhBhnC,OAAAC,eAAWumC,EAAAtlC,UAAA,sBAAX,WACI,OAAOS,KAAK+kC,iDA4BNF,EAAAtlC,UAAA+E,aAAV,WACI,MAAO,qBAGHugC,EAAAtlC,UAAA0lC,gBAAR,WACIjlC,KAAKqf,wBAEL,IAAIihB,EAAQ,IAAIzB,EAAAplB,WAGhB,GAFA6mB,EAAMC,YAAa,EAEfvgC,KAAKklC,UAAW,CAChB,IAAIzM,EAAQ,IAAI1X,EAAAxF,MAChBkd,EAAMnoB,OAAStQ,KAAKklC,UACpBzM,EAAMwH,WAAa,OACnBxH,EAAMzzB,OAAS,QACfyzB,EAAM1zB,MAAQ,QACd0zB,EAAMyH,cAAgB,OACtBI,EAAM3uB,WAAW8mB,GAGrB,GAAIz4B,KAAKqW,MAAO,CACZ,IAAI/H,EAAO,IAAIwS,EAAA1K,UACf9H,EAAKA,KAAOtO,KAAKqW,MACjB/H,EAAK4T,MAAQ,QACb5T,EAAKtJ,OAAS,OACdsJ,EAAKg3B,SAAW,GAChBhF,EAAM3uB,WAAWrD,GAGjBtO,KAAKglC,cACLhlC,KAAKuf,QAAU+gB,IAKbuE,EAAAtlC,UAAA0S,YAAV,SAAsBxL,GAuBlB,OAtBAzG,KAAKulC,WAAa3lC,EAAAygB,YAAYC,UAAUtgB,KAAK9B,KAAO,YAChD6G,MAAO,EACPC,OAAQ,EACRub,MAAO,KACR9Z,GAEHzG,KAAKglC,YAAcplC,EAAAygB,YAAYC,UAAUtgB,KAAK9B,KAAO,aACjD6G,MAAO,EACPC,OAAQ,EACRub,MAAO,KACR9Z,GAEHzG,KAAKglC,YAAYj7B,OAAS/J,KAAKulC,WAC/BvlC,KAAKglC,YAAYx+B,SAASe,GAAK,IAC/BvH,KAAKglC,YAAYhnB,YAAa,EAC9Bhe,KAAKglC,YAAYpnB,YAAW,GAE5B5d,KAAKwlC,WAAmBt0B,EAAA3R,UAAM0S,YAAWnU,KAAAkC,KAACyG,GAC1CzG,KAAKwlC,WAAWz7B,OAAS/J,KAAKulC,WAC9BvlC,KAAKwlC,WAAWh/B,SAASe,GAAK,IAC9BvH,KAAKwlC,WAAWxnB,YAAa,EAEtBhe,KAAKulC,YAGNV,EAAAtlC,UAAAygB,aAAV,SAAuBC,GACnBjgB,KAAKqlC,eAAenlB,gBAAkBD,EACtCjgB,KAAKqlC,eAAexV,eAAiB5P,GAGjC4kB,EAAAtlC,UAAAkmC,oBAAR,SAA4B79B,GAA5B,IAAA1C,EAAAlF,KACIA,KAAKmlC,cAAgB,IAAIP,EAAAjU,eAAe3wB,KAAK9B,KAAO,gBAAiB0J,EAAK6Y,YAC1EzgB,KAAKmlC,cAAchU,kBAAmB,EACtCnxB,KAAK0lC,qBAAuB1lC,KAAK4E,MAAM+gC,+BAA+BrgC,IAAI,SAAAmZ,GAClEA,GACAvZ,EAAKigC,cAAc5T,cAAgB9S,EACnCvZ,EAAKigC,cAAc9T,WAAWuU,EAAI,GAElC1gC,EAAKigC,cAAc9T,WAAWuU,EAAI,KAKtCf,EAAAtlC,UAAAsmC,qBAAR,SAA6Bj+B,GACzB5H,KAAKolC,eAAiB,IAAIR,EAAAjU,eAAe3wB,KAAK9B,KAAO,iBAAkB0J,EAAK6Y,YAC5EzgB,KAAKolC,eAAexU,wBAA0B,EAC9C5wB,KAAKolC,eAAep7B,MAAQ,GAC5BhK,KAAKolC,eAAerU,eAAgB,GAGhC8T,EAAAtlC,UAAAumC,qBAAR,SAA6Bl+B,GACzB5H,KAAKqlC,eAAiB,IAAIzlC,EAAA4gB,iBAAiBxgB,KAAK9B,KAAO,iBAAkB0J,EAAK6Y,YAC9EzgB,KAAKqlC,eAAe3kB,cAAgB9gB,EAAAqf,OAAOE,SAGrC0lB,EAAAtlC,UAAA0e,gBAAV,SAA0BrW,GAElB5H,KAAK+kC,iBACA/kC,KAAK4E,MAAMmhC,iBAAqC,mBAIjD/lC,KAAKmlC,cAAgBnlC,KAAK4E,MAAMmhC,iBAAqC,oBAHrE/lC,KAAKylC,oBAAoB79B,GACzB5H,KAAK4E,MAAMmhC,iBAAqC,mBAAI/lC,KAAKmlC,eAMxDnlC,KAAK4E,MAAMmhC,iBAAsC,oBAIlD/lC,KAAKolC,eAAiBplC,KAAK4E,MAAMmhC,iBAAsC,qBAHvE/lC,KAAK6lC,qBAAqBj+B,GAC1B5H,KAAK4E,MAAMmhC,iBAAsC,oBAAI/lC,KAAKolC,kBAK9DplC,KAAKylC,oBAAoB79B,GACzB5H,KAAK6lC,qBAAqBj+B,IAG9B5H,KAAK8lC,qBAAqBl+B,GAC1B5H,KAAKulC,WAAWrnB,SAAWle,KAAKmlC,cAChCnlC,KAAKglC,YAAY9mB,SAAWle,KAAKolC,eACjCplC,KAAKwlC,WAAWtnB,SAAWle,KAAKqlC,eAEhCrlC,KAAKilC,mBAMFJ,EAAAtlC,UAAAqO,QAAP,WACIsD,EAAA3R,UAAMqO,QAAO9P,KAAAkC,MAERA,KAAK8kC,iBACN9kC,KAAKmlC,cAAcv3B,UACnB5N,KAAKolC,eAAex3B,UACpB5N,KAAKqlC,eAAez3B,UAEhB5N,KAAK0lC,uBACL1lC,KAAK4E,MAAM+gC,+BAA+BvgC,OAAOpF,KAAK0lC,sBACtD1lC,KAAK0lC,qBAAuB,QAI5Cb,EA3OA,CAAuCF,EAAA/lB,UAA1B3hB,EAAA4nC,mGCXb,IAAAjlC,EAAAnC,EAAA,GAEMuoC,EAAUvoC,EAAQ,IASfR,EAAA+oC,UART,IAAMC,EAAUxoC,EAAQ,IAQNR,EAAAgpC,UANlBhpC,EAAAmzB,eAAA,WAEIxwB,EAAAsmC,OAAOC,aAAiC,mBAAIF,EAC5CrmC,EAAAsmC,OAAOC,aAAgC,kBAAIH,kBCR/C9oC,EAAAD,QAAA,q+CCAAC,EAAAD,QAAA,s4DCCA,IAKAmpC,EAAA,SAAAl1B,GASI,SAAAk1B,EAAYx+B,EAAY1J,GAAxB,IAAAgH,EACIgM,EAAApT,KAAAkC,KAAM9B,IAAK8B,YACXkF,EAAKmhC,aAAez+B,EAMpB1C,EAAKiZ,sBAAwB,WACpBjZ,EAAK0C,MAGV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,MAGnCtQ,EAAKkZ,oBAAsB,WAClBlZ,EAAK0C,MAGV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,EAAM,MAGzCtQ,EAAKoZ,qBAAuB,WACnBpZ,EAAK0C,MAGV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,MAGnCtQ,EAAKqZ,mBAAqB,WACjBrZ,EAAK0C,MAGV1C,EAAK0C,KAAKqV,QAAQzH,aAAa,EAAM,QAkBjD,OA5DkClE,EAAA80B,EAAAl1B,GA8CpBk1B,EAAA7mC,UAAA+E,aAAV,WACI,MAAO,gBAID8hC,EAAA7mC,UAAA0S,YAAV,SAAsBxL,GAAtB,IAAAvB,EAAAlF,KAII,OAHAA,KAAKqmC,aAAaC,iBAAiBjI,QAAQ,SAACz2B,GACxCA,EAAKmW,SAAW7Y,IAEblF,KAAKqmC,cAGND,EAAA7mC,UAAA0e,gBAAV,SAA0BrW,KAE9Bw+B,EA5DA,CALA3oC,EAAA,IAKkCmhB,UAArB3hB,EAAAmpC,qaCNb,IAAAxmC,EAAAnC,EAAA,GACAyW,EAAAzW,EAAA,GAOA8oC,EAAA,SAAAr1B,GAAA,SAAAq1B,mDA2BA,OA3BgCj1B,EAAAi1B,EAAAr1B,GAClBq1B,EAAAhnC,UAAA0W,aAAV,SAAuBvE,EAAoBqyB,GACvC,IAAIn8B,EAAO8J,EAAQ9J,KAEnB,GAAKA,EAAL,CAIA8J,EAAQlL,SAAWu9B,EAAanP,QAChC,IAAIxoB,EAASxM,EAAAyV,IAAInO,QAAQ,GAIzB,OAFAkF,EAAOhC,SAAS25B,GAER/jC,KAAKkkC,aACT,KAAKhwB,EAAAjD,YAAYsB,uBACjB,KAAK2B,EAAAjD,YAAYwB,wBACbrG,EAAOo6B,WAAW,IAAIxQ,QAAQ9uB,QAAQ,EAAG,GAAI,IAC7CU,EAAKu8B,OAAO/3B,GACZ,MACJ,KAAK8H,EAAAjD,YAAYyB,gCACjB,KAAKwB,EAAAjD,YAAYuB,+BACbpG,EAAOo6B,WAAW,IAAIxQ,QAAQ9uB,QAAQ,EAAG,EAAG,IAC5CU,EAAKu8B,OAAO/3B,MAK5Bm6B,EA3BA,CALA9oC,EAAA,GAKgC0W,kBAAnBlX,EAAAspC,maCRb,IAAA3C,EAAAnmC,EAAA,GACAmC,EAAAnC,EAAA,GAEAyW,EAAAzW,EAAA,GAKAgpC,EAAA,SAAAv1B,GAAA,SAAAu1B,IAAA,IAAAvhC,EAAA,OAAAgM,KAAAkH,MAAApY,KAAAg+B,YAAAh+B,YACYkF,EAAAwhC,WAAa,MAuGzB,OAxGkCp1B,EAAAm1B,EAAAv1B,GAM9B7S,OAAAC,eAAWmoC,EAAAlnC,UAAA,iBAAX,WACI,OAAOS,KAAK0mC,gBAGhB,SAAqB9nC,GAArB,IAAAsG,EAAAlF,KACQA,KAAK0mC,aAAe9nC,IAIxBoB,KAAK0mC,WAAa9nC,EAElBgB,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAIHk1B,EAAAlnC,UAAA0W,aAAV,SAAuBvE,EAAoBqyB,GACvC,IAAIn8B,EAAO8J,EAAQ9J,KACfo8B,EAAShkC,KAAK2mC,gBAAgB5C,GAElC,GAAKn8B,EAAL,CAIA,OAAQ5H,KAAKkkC,aACT,KAAKhwB,EAAAjD,YAAYsB,uBACjB,KAAK2B,EAAAjD,YAAYwB,wBACb7K,EAAKu8B,OAAO,IAAIvkC,EAAAsH,QAAQ,EAAG,GAAI,IAC/B,MACJ,KAAKgN,EAAAjD,YAAYyB,gCACjB,KAAKwB,EAAAjD,YAAYuB,+BACb5K,EAAKu8B,OAAO,IAAIvkC,EAAAsH,QAAQ,EAAG,EAAG,IAItCwK,EAAQlL,SAAWw9B,IAGfyC,EAAAlnC,UAAAonC,gBAAR,SAAwBr2B,GAIpB,OAHAA,EAAOlK,GAAK,EAAsB,EAAhBoC,KAAKo+B,UAAkB5mC,KAAK0U,WAC9CpE,EAAOjK,GAAK,EAAsB,EAAhBmC,KAAKo+B,UAAkB5mC,KAAK2U,YAEvCrE,GAGDm2B,EAAAlnC,UAAA2W,iBAAV,WAEI,IADA,IAAI2wB,KACcz0B,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACLgB,EAAMxL,MAIXi/B,EAAO3+B,KAAKkL,EAAMxL,MAGtB,IAAK,IAAIk/B,EAAQ,EAAGA,EAAQ9mC,KAAK0mC,WAAYI,IAAS,CAClDD,EAAOE,KAAK,SAACnB,EAAGhO,GACZ,IAAIoP,EAAYpB,EAAEp/B,SAASygC,gBACvBC,EAAYtP,EAAEpxB,SAASygC,gBAE3B,OAAID,EAAYE,EACL,EACAF,EAAYE,GACX,EAGL,IAQX,IALA,IAAIC,EAAuB3+B,KAAK4+B,IAAIpnC,KAAKwU,OAAQ,GAC7C6yB,EAAW7+B,KAAKyC,IAAIjL,KAAK0U,WAAY1U,KAAK2U,aAC1C2yB,EAAe1nC,EAAAyV,IAAI5S,QAAQ,GAC3B8kC,EAAa3nC,EAAAyV,IAAInO,QAAQ,GAEpBvJ,EAAI,EAAGA,EAAIkpC,EAAOn2B,OAAS,EAAG/S,IACnC,IAAK,IAAIgjC,EAAIhjC,EAAI,EAAGgjC,EAAIkG,EAAOn2B,OAAQiwB,IACnC,GAAIhjC,GAAKgjC,EAAG,CACRkG,EAAOlG,GAAGn6B,SAAS+O,cAAcsxB,EAAOlpC,GAAG6I,SAAU+gC,GAGrDD,EAAalhC,EAAImhC,EAAWnhC,EAC5BkhC,EAAajhC,EAAIkhC,EAAWlhC,EAC5B,IAAImhC,EAAiBH,EACjBI,EAAWH,EAAaL,gBAAkBE,GAE9CM,GADoBj/B,KAAKuC,IAAI08B,EAAUN,IAGvB3+B,KAAK4+B,IAAII,EAAgB,KACrCF,EAAaI,YACbH,EAAW/xB,aAAsD,IAAxCgyB,EAAiBh/B,KAAKuvB,KAAK0P,KACpDZ,EAAOlG,GAAGn6B,SAASggC,WAAWe,GAC9BV,EAAOlpC,GAAG6I,SAASmhC,gBAAgBJ,OAO/Dd,EAxGA,CAAkC7C,EAAAzvB,kBAArBlX,EAAAwpC,qaCRb,IAAA7C,EAAAnmC,EAAA,GACAmC,EAAAnC,EAAA,GAEAyW,EAAAzW,EAAA,GAKAmqC,EAAA,SAAA12B,GAAA,SAAA02B,IAAA,IAAA1iC,EAAA,OAAAgM,KAAAkH,MAAApY,KAAAg+B,YAAAh+B,YACYkF,EAAA4+B,QAAU,IAwDtB,OAzDiCxyB,EAAAs2B,EAAA12B,GAM7B7S,OAAAC,eAAWspC,EAAAroC,UAAA,cAAX,WACI,OAAOS,KAAK8jC,aAGhB,SAAkBllC,GAAlB,IAAAsG,EAAAlF,KACQA,KAAK8jC,UAAYllC,IAIrBoB,KAAK8jC,QAAUllC,EAEfgB,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAIHq2B,EAAAroC,UAAA0W,aAAV,SAAuBvE,EAAoBqyB,GACvC,IAAIn8B,EAAO8J,EAAQ9J,KAEnB,GAAKA,EAAL,CAIA,IAAIo8B,EAAShkC,KAAK6nC,kBAAkB9D,GAGpC,OAFAryB,EAAQlL,SAAWw9B,EAEXhkC,KAAKkkC,aACT,KAAKhwB,EAAAjD,YAAYsB,uBACb3K,EAAKu8B,OAAO,IAAInO,QAAQ9uB,SAAS88B,EAAO59B,GAAI49B,EAAO39B,GAAI29B,EAAOz8B,IAC9D,MACJ,KAAK2M,EAAAjD,YAAYuB,+BACb5K,EAAKu8B,OAAO,IAAInO,QAAQ9uB,QAAQ,EAAI88B,EAAO59B,EAAG,EAAI49B,EAAO39B,EAAG,EAAI29B,EAAOz8B,IACvE,MACJ,KAAK2M,EAAAjD,YAAYwB,wBACb,MACJ,KAAKyB,EAAAjD,YAAYyB,gCACb9K,EAAKyB,OAAO2sB,QAAQoO,KAAKC,EAAG77B,KAAKiH,GAAIumB,QAAQsO,MAAMC,UAKvDqD,EAAAroC,UAAAsoC,kBAAR,SAA0Bv3B,GACtB,IAAI0zB,EAAS,IAAIpkC,EAAAsH,QAAQ,EAAG,EAAGlH,KAAK8jC,SAEhCgE,EAAUx3B,EAAOjK,EAAIrG,KAAK8jC,QAC1BU,GAAWl0B,EAAOlK,EAAIpG,KAAK8jC,QAI/B,OAFAlkC,EAAAwH,OAAOq9B,0BAA0BD,EAAQsD,EAAQ,EAAGloC,EAAAyV,IAAIjO,OAAO,IAExDxH,EAAAsH,QAAQw9B,gBAAgBV,EAAQpkC,EAAAyV,IAAIjO,OAAO,KAE1DwgC,EAzDA,CAAiChE,EAAAzvB,kBAApBlX,EAAA2qC,oaCRb,IAAA1zB,EAAAzW,EAAA,GACAmC,EAAAnC,EAAA,GAKAsqC,EAAA,SAAA72B,GA+BI,SAAA62B,EAAmBxH,QAAA,IAAAA,OAAA,GAAnB,IAAAr7B,EACIgM,EAAApT,KAAAkC,OAAOA,YA/BHkF,EAAAwU,aAAc,EAwBfxU,EAAAsP,OAAS,GASZtP,EAAKwU,YAAc6mB,IAmE3B,OArGkCjvB,EAAAy2B,EAAA72B,GAM9B7S,OAAAC,eAAWypC,EAAAxoC,UAAA,kBAAX,WACI,OAAOS,KAAK0Z,iBAGhB,SAAsB9a,GAAtB,IAAAsG,EAAAlF,KACQA,KAAK0Z,cAAgB9a,IAIzBoB,KAAK0Z,YAAc9a,EAEnBgB,EAAA6H,MAAMgN,aAAa,WACfvP,EAAKqM,uDAmBHw2B,EAAAxoC,UAAAgS,iBAAV,WASI,IARA,IAmCI/M,EAnCAO,EAAQ,EACRC,EAAS,EACT8P,EAAe,EACfkzB,KAEAjzB,EAAsBnV,EAAAwH,OAAO4N,OAAOhV,KAAK+R,KAAMkD,oBAAmB,IAGpD7C,EAAA,EAAAC,EAAArS,KAAKoR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAC9B,IADKgB,EAAKf,EAAAD,IACCxK,KAAX,CAIAkN,IACA1B,EAAMxL,KAAKqN,oBAAmB,GAC9B7B,EAAMxL,KAAK2hB,iBAAiB1F,cAAc9O,EAAqBnV,EAAAyV,IAAIjO,OAAO,IAE1E,IAAI8N,EAAc9B,EAAMxL,KAAKwhB,kBAAkBlU,YAC3CE,EAAaxV,EAAAsH,QAAQw9B,gBAAgBxvB,EAAYE,WAAYxV,EAAAyV,IAAIjO,OAAO,IAC5E4gC,EAAY9/B,KAAKkN,GAEbpV,KAAK0Z,YACL1U,GAAUoQ,EAAW/O,EAErBtB,GAASqQ,EAAWhP,GAIxBpG,KAAK0Z,YACL1U,IAAW8P,EAAe,GAAK9U,KAAKwU,OAAS,EAE7CzP,IAAU+P,EAAe,GAAK9U,KAAKwU,OAAS,EAM5ChQ,EADAxE,KAAK0Z,aACK1U,GAEAD,EAId,IADA,IAAI8C,EAAQ,EACMkO,EAAA,EAAAC,EAAAhW,KAAKoR,UAAL2E,EAAAC,EAAAtF,OAAAqF,IAAgB,CAA7B,IAAI3C,EACL,IADKA,EAAK4C,EAAAD,IACCnO,KAAX,CAGAkN,IACIM,EAAa4yB,EAAYngC,KAEzB7H,KAAK0Z,aACLtG,EAAM5M,SAASH,EAAI7B,EAAS4Q,EAAW/O,EACvC+M,EAAM5M,SAASJ,EAAI,EACnB5B,GAAyB,EAAf4Q,EAAW/O,IAErB+M,EAAM5M,SAASJ,EAAI5B,EAAS4Q,EAAWhP,EACvCgN,EAAM5M,SAASH,EAAI,EACnB7B,GAAyB,EAAf4Q,EAAWhP,GAGzB5B,GAAWsQ,EAAe,EAAI9U,KAAKwU,OAAS,KAGxDuzB,EArGA,CAAkC7zB,EAAAjD,aAArBhU,EAAA8qC,0JCNbnnB,CAAAnjB,EAAA,oFCAA,IAAAmC,EAAAnC,EAAA,GACAyW,EAAAzW,EAAA,GAOAwqC,EAAA,WAqCI,SAAAA,EAAmBxhC,GAAnB,IAAAvB,EAAAlF,KA3BOA,KAAAkN,oBAEAlN,KAAAoN,oBAKApN,KAAA2lC,+BAAiC,IAAI/lC,EAAAkE,WAIrC9D,KAAA+lC,oBAiBH/lC,KAAKkoC,OAASzhC,GAAS7G,EAAAoqB,OAAOme,iBAC9BnoC,KAAKooC,sBAAwBpoC,KAAKkoC,OAAOG,oBAAoB/iC,IAAI,WAC7DJ,EAAKkjC,sBAAwB,KAC7BljC,EAAKojC,cAAgB,KACrBpjC,EAAK0I,YAGT5N,KAAKsoC,cAAgB,IAAI1oC,EAAA2oC,qBAAqBvoC,KAAKkoC,QACnDloC,KAAKsoC,cAAcE,4BAA6B,EAChDxoC,KAAKsoC,cAAcG,0BAA4B,SAAC7gC,GAC5C,OAAOA,GAAQA,EAAKmW,UAAYnW,EAAKmW,SAASf,OAIlDhd,KAAK0G,eAAiB,IAAIwN,EAAAjD,YAAY,iBACtCjR,KAAK0G,eAAe9B,MAAQ5E,KAC5B,IAAI8R,EAAoB9R,KAAKsoC,cAAcx2B,kBAG3C9R,KAAK0oC,oBAAsB1oC,KAAKsoC,cAAcvkC,uBAAuBuB,IAAI,SAACyG,GACtE7G,EAAKyjC,kBAAkB58B,GAAW,KAGtC/L,KAAK0sB,iBAAmB5a,EAAkB6a,oBAAoBrnB,IAAI,SAAC8oB,EAAIC,GACnEnpB,EAAK8oB,WAAWI,KAIpBpuB,KAAKsoC,cAAcx2B,kBAAkB82B,WAAY,EACjD5oC,KAAKsoC,cAAcx2B,kBAAkB+2B,0BAA2B,EAChE,IAAIjpC,EAAAkpC,iBAAiB,OAAQlpC,EAAAsH,QAAQ6hC,KAAM/oC,KAAKsoC,cAAcx2B,mBAgJtE,OA5LIzT,OAAAC,eAAW2pC,EAAA1oC,UAAA,aAAX,WACI,OAAOS,KAAKkoC,wCAIhB7pC,OAAAC,eAAW2pC,EAAA1oC,UAAA,oBAAX,WACI,OAAOS,KAAKsoC,+CAyCRL,EAAA1oC,UAAAopC,kBAAR,SAA0B58B,EAAmBi9B,GACzC,IAAI/7B,EAAsBjN,KAAKkN,iBAAiBnB,GAC5CkB,IACAA,EAAoBV,cAAcU,UAC3BjN,KAAKkN,iBAAiBnB,IAG7Bi9B,GACIhpC,KAAKoN,iBAAiBrB,KACtB/L,KAAKoN,iBAAiBrB,GAAWyS,wBAC1Bxe,KAAKoN,iBAAiBrB,IAIrC/L,KAAK2lC,+BAA+Bj7B,gBAAgB,OAGhDu9B,EAAA1oC,UAAAyuB,WAAR,SAAmBI,GACf,IAAKpuB,KAAKsoC,gBAAkBtoC,KAAKsoC,cAAcx2B,kBAAkB0c,aAC7D,OAAO,EAGX,IAAIiB,EAA8BrB,EAAQ,MAEtCriB,EAAY0jB,EAAa1jB,WAAa,EACtCC,EAAcyjB,EAAaZ,OAE3Boa,EAAc7a,EAAGa,SACrB,IAAKga,IAAgBA,EAAY/Z,IAE7B,OADAlvB,KAAK2oC,kBAAkB58B,EAAWqiB,EAAGtiB,OAASlM,EAAAmN,kBAAkBO,YACzD,EAGX,IAAIoE,EAAsBu3B,EAAY9Z,WAAoB,SA2B1D,OA1BI8Z,EAAYxqB,aACZze,KAAK2lC,+BAA+Bj7B,gBAAgBu+B,EAAYxqB,aAG/D/M,EAAQxF,oBAAoBkiB,EAAGtiB,KAAMm9B,EAAYxqB,YAAc1S,EAAWC,IAEvEoiB,EAAGtiB,OAASlM,EAAAmN,kBAAkBC,cAC1BhN,KAAKkN,iBAAiBnB,IACtB/L,KAAKkN,iBAAiBnB,GAAWQ,cAAcvM,KAAKkN,iBAAiBnB,WAGlE/L,KAAKkN,iBAAiBnB,IAIjCqiB,EAAGtiB,OAASlM,EAAAmN,kBAAkBO,YAC1BtN,KAAKoN,iBAAiBqiB,EAAa1jB,aACnC/L,KAAKoN,iBAAiBqiB,EAAa1jB,WAAWyS,wBACvCxe,KAAKoN,iBAAiBqiB,EAAa1jB,YAGb,UAA7B0jB,EAAayZ,aACblpC,KAAK2oC,kBAAkB58B,GAAW,KAInC,GAMX1N,OAAAC,eAAW2pC,EAAA1oC,UAAA,qBAAX,WACI,OAAOS,KAAK0G,gDAQTuhC,EAAA1oC,UAAAkS,gBAAP,SAAuBC,GACnB,OAAO1R,KAAK0G,eAAe+K,gBAAgBC,IAQxCu2B,EAAA1oC,UAAAoS,WAAP,SAAkBD,GAEd,OADA1R,KAAK0G,eAAeiL,WAAWD,GACxB1R,MAQJioC,EAAA1oC,UAAAuO,cAAP,SAAqB4D,GAEjB,OADA1R,KAAK0G,eAAeoH,cAAc4D,GAC3B1R,MAMJioC,EAAA1oC,UAAAqO,QAAP,WAGI,IAAK,IAAIu7B,KAFTnpC,KAAK0G,eAAekH,UAEK5N,KAAK+lC,iBACrB/lC,KAAK+lC,iBAAiBvmC,eAAe2pC,IAI1CnpC,KAAK+lC,iBAAiBoD,GAAcv7B,UAGxC5N,KAAK+lC,oBAED/lC,KAAK0oC,qBAAuB1oC,KAAKsoC,gBACjCtoC,KAAKsoC,cAAcvkC,uBAAuBqB,OAAOpF,KAAK0oC,qBACtD1oC,KAAK0oC,oBAAsB,MAG/B1oC,KAAK2lC,+BAA+B93B,QAEpC,IAAIiE,EAAoB9R,KAAKsoC,cAAgBtoC,KAAKsoC,cAAcx2B,kBAAoB,KAEhFA,GACI9R,KAAK0sB,mBACL5a,EAAkB6a,oBAAoBvnB,OAAOpF,KAAK0sB,kBAClD1sB,KAAK0sB,iBAAmB,MAG5B1sB,KAAKkoC,QACDloC,KAAKooC,wBACLpoC,KAAKkoC,OAAOG,oBAAoBjjC,OAAOpF,KAAKooC,uBAC5CpoC,KAAKooC,sBAAwB,MAIjCpoC,KAAKsoC,eACLtoC,KAAKsoC,cAAc16B,WAG/Bq6B,EApNA,GAAahrC,EAAAgrC","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nclass GUIImage extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = GUIImage.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = new Image();\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case GUIImage.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case GUIImage.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    private static _STRETCH_NONE = 0;\r\n    private static _STRETCH_FILL = 1;\r\n    private static _STRETCH_UNIFORM = 2;\r\n    private static _STRETCH_EXTEND = 3;\r\n\r\n    /** STRETCH_NONE */\r\n    public static get STRETCH_NONE(): number {\r\n        return GUIImage._STRETCH_NONE;\r\n    }\r\n\r\n    /** STRETCH_FILL */\r\n    public static get STRETCH_FILL(): number {\r\n        return GUIImage._STRETCH_FILL;\r\n    }\r\n\r\n    /** STRETCH_UNIFORM */\r\n    public static get STRETCH_UNIFORM(): number {\r\n        return GUIImage._STRETCH_UNIFORM;\r\n    }\r\n\r\n    /** STRETCH_EXTEND */\r\n    public static get STRETCH_EXTEND(): number {\r\n        return GUIImage._STRETCH_EXTEND;\r\n    }\r\n}\r\n\r\nexport { GUIImage as Image };\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._focusedBackground;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._background;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        material.emissiveTexture = result;\r\n        material.opacityTexture = result;\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.15)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = new Array<String>();\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._background;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}   \r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectedInputText: Nullable<InputText>;\r\n    private _onFocusObserver: Nullable<Observer<InputText>>;\r\n    private _onBlurObserver: Nullable<Observer<InputText>>;\r\n    private _onKeyPressObserver: Nullable<Observer<string>>;\r\n\r\n    /** Gets the input text control attached with the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._connectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        this.isVisible = false;\r\n        this._connectedInputText = input;\r\n\r\n        // Events hooking\r\n        this._onFocusObserver = input.onFocusObservable.add(() => {\r\n            this.isVisible = true;\r\n        });\r\n\r\n        this._onBlurObserver = input.onBlurObservable.add(() => {\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n            if (!this._connectedInputText) {\r\n                return;\r\n            }\r\n            switch (key) {\r\n                case \"\\u21E7\":\r\n                    this.shiftState++;\r\n                    if (this.shiftState > 2) {\r\n                        this.shiftState = 0;\r\n                    }\r\n                    this.applyShiftState(this.shiftState);\r\n                    return;\r\n                case \"\\u2190\":\r\n                    this._connectedInputText.processKey(8);\r\n                    return;\r\n                case \"\\u21B5\":\r\n                    this._connectedInputText.processKey(13);\r\n                    return;\r\n            }\r\n            this._connectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n            if (this.shiftState === 1) {\r\n                this.shiftState = 0;\r\n                this.applyShiftState(this.shiftState);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from an input text control\r\n     */\r\n    public disconnect(): void {\r\n        if (!this._connectedInputText) {\r\n            return;\r\n        }\r\n\r\n        this._connectedInputText.onFocusObservable.remove(this._onFocusObserver);\r\n        this._connectedInputText.onBlurObservable.remove(this._onBlurObserver);\r\n        this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n\r\n        this._connectedInputText = null;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard();\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            context.strokeStyle = this._minorLineColor;\r\n            context.lineWidth = this._minorLineTickness;        \r\n\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n\r\n            for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                const cellX = left + x * this.cellWidth;\r\n\r\n                context.beginPath();\r\n                context.moveTo(cellX, this._currentMeasure.top);\r\n                context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                \r\n                context.stroke();                \r\n            }\r\n\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                const cellY = top + y * this.cellHeight;\r\n\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, cellY);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                context.stroke();\r\n            }\r\n\r\n            // Major lines\r\n            context.strokeStyle = this._majorLineColor;\r\n            context.lineWidth = this._majorLineTickness;        \r\n\r\n            for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                let cellX = left + x * this.cellWidth;\r\n\r\n                context.beginPath();    \r\n                context.moveTo(cellX, this._currentMeasure.top);\r\n                context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                let cellY = top + y * this.cellHeight;\r\n                context.moveTo(this._currentMeasure.left, cellY);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                context.closePath();\r\n                context.stroke();\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}