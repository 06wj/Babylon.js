{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/2D/adtInstrumentation.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_tempCurrentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_transform","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","invalidateRect","right","bottom","host","useInvalidateRectOptimization","rectanglePoints","BABYLON","Polygon","Rectangle","min","Number","MAX_VALUE","max","transformCoordinates","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","isEqualsTo","copyFrom","rebuildCount","_processMeasures","_evaluateClippingState","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","clip","_render","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","Warn","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","_populateNinePatchSlicesFromImage","onImageLoadedObservable","_extractNinePatchSliceDataFromImage","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_WorkingCanvas","canvas","drawImage","imageData","data","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","STRETCH_NINE_PATCH","_renderNinePatch","_renderCornerPatch","targetX","targetY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","targetCenterWidth","sliceLeft","targetTopHeight","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","_useInvalidateRectOptimization","_clearRectangle","_invalidatedRectangle","_clearMeasure","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","clearMinX","clearMinY","clearMaxX","clearMaxY","minX","minY","maxX","maxY","floor","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","measure","clearRect","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","availableWidth","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputText","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","focusedColor","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","grid_1","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","AdvancedDynamicTextureInstrumentation","_captureRenderTime","_renderTime","PerfCounter","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    protected _wasDirty = false;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    public _tempCurrentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _intersectsRect(rect: Measure) {\r\n        if (this._currentMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected invalidateRect(left: number, top: number, right: number, bottom: number) {\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Compute AABB of transformed container box (eg. to handle rotation and scaling)\r\n            var rectanglePoints = BABYLON.Polygon.Rectangle(left, top, right, bottom);\r\n            var min = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n            var max = new Vector2(0, 0);\r\n            for (var i = 0; i < 4; i++) {\r\n                this._transformMatrix.transformCoordinates(rectanglePoints[i].x, rectanglePoints[i].y, rectanglePoints[i]);\r\n                min.x = Math.min(min.x, rectanglePoints[i].x);\r\n                min.y = Math.min(min.y, rectanglePoints[i].y);\r\n                max.x = Math.max(max.x, rectanglePoints[i].x);\r\n                max.y = Math.max(max.y, rectanglePoints[i].y);\r\n            }\r\n\r\n            this.host.invalidateRect(\r\n                min.x,\r\n                min.y,\r\n                max.x,\r\n                max.y,\r\n                left,\r\n                top,\r\n                right,\r\n                bottom\r\n            );\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context?: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._tempCurrentMeasure.copyFrom(this._currentMeasure);\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            }\r\n            while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                BABYLON.Tools.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect(\r\n                Math.min(this._currentMeasure.left, this._tempCurrentMeasure.left),\r\n                Math.min(this._currentMeasure.top, this._tempCurrentMeasure.top),\r\n                Math.max(this._currentMeasure.left + this._currentMeasure.width, this._tempCurrentMeasure.left + this._tempCurrentMeasure.width),\r\n                Math.max(this._currentMeasure.top + this._currentMeasure.height, this._tempCurrentMeasure.top + this._tempCurrentMeasure.height)\r\n            );\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(parentMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(parentMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(parentMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _clip(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            var right = Math.min(invalidatedRectangle.left + invalidatedRectangle.width, this._currentMeasure.left + this._currentMeasure.width);\r\n            var bottom = Math.min(invalidatedRectangle.top + invalidatedRectangle.height, this._currentMeasure.top + this._currentMeasure.height);\r\n            Control._ClipMeasure.left = Math.max(invalidatedRectangle.left, this._currentMeasure.left);\r\n            Control._ClipMeasure.top = Math.max(invalidatedRectangle.top, this._currentMeasure.top);\r\n            Control._ClipMeasure.width = right - Control._ClipMeasure.left;\r\n            Control._ClipMeasure.height = bottom - Control._ClipMeasure.top;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty) {\r\n            this._tempCurrentMeasure.copyFrom(this._currentMeasure);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect(\r\n                Math.min(this._currentMeasure.left, this._tempCurrentMeasure.left),\r\n                Math.min(this._currentMeasure.top, this._tempCurrentMeasure.top),\r\n                Math.max(this._currentMeasure.left + this._currentMeasure.width, this._tempCurrentMeasure.left + this._tempCurrentMeasure.width) - 1,\r\n                Math.max(this._currentMeasure.top + this._currentMeasure.height, this._tempCurrentMeasure.top + this._tempCurrentMeasure.height) - 1\r\n            );\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    // continue;\r\n                }\r\n            }\r\n            child._render(context, invalidatedRectangle);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { Tools } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage) {\r\n                    Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._width.isPercentage) {\r\n                    Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private static _WorkingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!Image._WorkingCanvas) {\r\n            Image._WorkingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = Image._WorkingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        context.drawImage(this._domImage, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft + 1;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft + 1;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop + 1,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight + 1);\r\n\r\n        // Borders\r\n        context.drawImage(this._domImage, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\nimport { Container } from \"./controls/container\";\nimport { Control } from \"./controls/control\";\nimport { Style } from \"./style\";\nimport { Measure } from \"./measure\";\n/**\n* Interface used to define a control that can receive focus\n*/\nexport interface IFocusableControl {\n    /**\n     * Function called when the control receives the focus\n     */\n    onFocus(): void;\n    /**\n     * Function called when the control loses the focus\n     */\n    onBlur(): void;\n    /**\n     * Function called to let the control handle keyboard events\n     * @param evt defines the current keyboard event\n     */\n    processKeyboard(evt: KeyboardEvent): void;\n    /**\n    * Function called to get the list of controls that should not steal the focus from this control\n    * @returns an array of controls\n    */\n    keepsFocusWith(): Nullable<Control[]>;\n}\n/**\n* Class used to create texture to support 2D GUI elements\n* @see http://doc.babylonjs.com/how_to/gui\n*/\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    private _isDirty = false;\n    private _renderObserver: Nullable<Observer<Camera>>;\n    private _resizeObserver: Nullable<Observer<Engine>>;\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\n    private _background: string;\n    /** @hidden */\n    public _rootContainer = new Container(\"root\");\n    /** @hidden */\n    public _lastPickedControl: Control;\n    /** @hidden */\n    public _lastControlOver: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _lastControlDown: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _capturingControl: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _shouldBlockPointer: boolean;\n    /** @hidden */\n    public _layerToDispose: Nullable<Layer>;\n    /** @hidden */\n    public _linkedControls = new Array<Control>();\n    private _isFullscreen = false;\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\n    private _idealWidth = 0;\n    private _idealHeight = 0;\n    private _useSmallestIdeal: boolean = false;\n    private _renderAtIdealSize = false;\n    private _focusedControl: Nullable<IFocusableControl>;\n    private _blockNextFocusCheck = false;\n    private _renderScale = 1;\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\n    /**\n    * Define type to string to ensure compatibility across browsers\n    * Safari doesn't support DataTransfer constructor\n    */\n    private _clipboardData: string = \"\";\n    /**\n    * Observable event triggered each time an clipboard event is received from the rendering canvas\n    */\n    public onClipboardObservable = new Observable<ClipboardInfo>();\n    /**\n    * Observable event triggered each time a pointer down is intercepted by a control\n    */\n    public onControlPickedObservable = new Observable<Control>();\n    /**\n    * Observable event triggered before layout is evaluated\n    */\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the layout was evaluated\n    */\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered before the texture is rendered\n    */\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the texture was rendered\n    */\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Gets or sets a boolean defining if alpha is stored as premultiplied\n    */\n    public premulAlpha = false;\n    /**\n    * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n    * Useful when you want more antialiasing\n    */\n    public get renderScale(): number {\n        return this._renderScale;\n    }\n    public set renderScale(value: number) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n    * Gets or sets the ideal width used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealWidth(): number {\n        return this._idealWidth;\n    }\n    public set idealWidth(value: number) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets the ideal height used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealHeight(): number {\n        return this._idealHeight;\n    }\n    public set idealHeight(value: number) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get useSmallestIdeal(): boolean {\n        return this._useSmallestIdeal;\n    }\n    public set useSmallestIdeal(value: boolean) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if adaptive scaling must be used\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get renderAtIdealSize(): boolean {\n        return this._renderAtIdealSize;\n    }\n    public set renderAtIdealSize(value: boolean) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n    /**\n    * Gets the underlying layer used to render the texture when in fullscreen mode\n    */\n    public get layer(): Nullable<Layer> {\n        return this._layerToDispose;\n    }\n    /**\n    * Gets the root container control\n    */\n    public get rootContainer(): Container {\n        return this._rootContainer;\n    }\n    /**\n    * Returns an array containing the root container.\n    * This is mostly used to let the Inspector introspects the ADT\n    * @returns an array containing the rootContainer\n    */\n    public getChildren(): Array<Container> {\n        return [this._rootContainer];\n    }\n    /**\n    * Will return all controls that are inside this texture\n    * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n    * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n    * @return all child controls\n    */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n    * Gets or sets the current focused control\n    */\n    public get focusedControl(): Nullable<IFocusableControl> {\n        return this._focusedControl;\n    }\n    public set focusedControl(control: Nullable<IFocusableControl>) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n    * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n    */\n    public get isForeground(): boolean {\n        if (!this.layer) {\n            return true;\n        }\n        return (!this.layer.isBackground);\n    }\n    public set isForeground(value: boolean) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n    * Gets or set information about clipboardData\n    */\n    public get clipboardData(): string {\n        return this._clipboardData;\n    }\n    public set clipboardData(value: string) {\n        this._clipboardData = value;\n    }\n    /**\n   * Creates a new AdvancedDynamicTexture\n   * @param name defines the name of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n   * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n   */\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"AdvancedDynamicTexture\"\n    */\n    public getClassName(): string {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n    * Function used to execute a function on all controls\n    * @param func defines the function to execute\n    * @param container defines the container where controls belong. If null the root container will be used\n    */\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (var child of container.children) {\n            if ((<any>child).children) {\n                this.executeOnAllControls(func, (<Container>child));\n                continue;\n            }\n            func(child);\n        }\n    }\n\n    private _useInvalidateRectOptimization = true;\n\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    public get useInvalidateRectOptimization(): boolean {\n        return this._useInvalidateRectOptimization;\n    }\n\n    public set useInvalidateRectOptimization(value: boolean) {\n        this._useInvalidateRectOptimization = value;\n    }\n\n    private _clearRectangle: Nullable<Measure> = null;\n    private _invalidatedRectangle: Nullable<Measure> = null;\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param clearMinX left most position of the rectangle to clear in the texture\n     * @param clearMinY top most position of the rectangle to clear in the texture\n     * @param clearMaxX right most position of the rectangle to clear in the texture\n     * @param clearMaxY bottom most position of the rectangle to clear in the texture\n     * @param minX left most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param minY top most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param maxX right most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param maxY bottom most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     */\n    public invalidateRect(clearMinX: number, clearMinY: number, clearMaxX: number, clearMaxY: number, minX: number, minY: number, maxX: number, maxY: number) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._clearRectangle || !this._invalidatedRectangle) {\n            this._clearRectangle = new Measure(clearMinX, clearMinY, clearMaxX - clearMinX + 1, clearMaxY - clearMinY + 1);\n            this._invalidatedRectangle = new Measure(minX, minY, maxX - minX + 1, maxY - minY + 1);\n        } else {\n            // Compute intersection\n            var maxX = Math.ceil(Math.max(this._clearRectangle.left + this._clearRectangle.width - 1, clearMaxX));\n            var maxY = Math.ceil(Math.max(this._clearRectangle.top + this._clearRectangle.height - 1, clearMaxY));\n            this._clearRectangle.left = Math.floor(Math.min(this._clearRectangle.left, clearMinX));\n            this._clearRectangle.top = Math.floor(Math.min(this._clearRectangle.top, clearMinY));\n            this._clearRectangle.width = maxX - this._clearRectangle.left + 1;\n            this._clearRectangle.height = maxY - this._clearRectangle.top + 1;\n\n            maxX = Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, maxX);\n            maxY = Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, maxY);\n            this._invalidatedRectangle.left = Math.min(this._invalidatedRectangle.left, minX);\n            this._invalidatedRectangle.top = Math.min(this._invalidatedRectangle.top, minY);\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n    * Marks the texture as dirty forcing a complete update\n    */\n    public markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n    * Helper function used to create a new style\n    * @returns a new style\n    * @see http://doc.babylonjs.com/how_to/gui#styles\n    */\n    public createStyle(): Style {\n        return new Style(this);\n    }\n    /**\n    * Adds a new control to the root container\n    * @param control defines the control to add\n    * @returns the current texture\n    */\n    public addControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n    * Removes a control from the root container\n    * @param control defines the control to remove\n    * @returns the current texture\n    */\n    public removeControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n    * Release all resources\n    */\n    public dispose(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootCanvas = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._pointerMoveObserver) {\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        super.dispose();\n    }\n    private _onResize(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            } else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1, 0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @hidden */\n    public _getGlobalViewport(scene: Scene): Viewport {\n        var engine = scene.getEngine();\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position\n    */\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector2.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector2(projectedPosition.x, projectedPosition.y);\n    }\n    private _checkUpdate(camera: Camera): void {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            var globalViewport = this._getGlobalViewport(scene);\n            for (var control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                var mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                var position = mesh.getBoundingInfo().boundingSphere.center;\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                // Account for RenderScale.\n                projectedPosition.scaleInPlace(this.renderScale);\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render();\n        this.update(true, this.premulAlpha);\n    }\n    private _clearMeasure = new Measure(0, 0, 0, 0);\n    private _render(): void {\n        var textureSize = this.getSize();\n        var renderWidth = textureSize.width;\n        var renderHeight = textureSize.height;\n\n        var context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n\n        // Clear\n        if (this._clearRectangle) {\n            this._clearMeasure.copyFrom(this._clearRectangle);\n        } else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._clearRectangle = null;\n        this._invalidatedRectangle = null;\n    }\n    /** @hidden */\n    public _changeCursor(cursor: string) {\n        if (this._rootCanvas) {\n            this._rootCanvas.style.cursor = cursor;\n        }\n    }\n    /** @hidden */\n    public _registerLastControlDown(control: Control, pointerId: number) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        if (this._isFullscreen) {\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let viewport = camera!.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\n            return;\n        }\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\n            this._changeCursor(\"\");\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n        this._manageFocus();\n    }\n    /** @hidden */\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\n        for (var pointerId in list) {\n            if (!list.hasOwnProperty(pointerId)) {\n                continue;\n            }\n            var lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /** @hidden */\n    public _cleanControlAfterRemoval(control: Control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /** Attach to all scene events required to support pointer events */\n    public attach(): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            if (!scene) {\n                return;\n            }\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            let engine = scene.getEngine();\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\n            this._shouldBlockPointer = false;\n            // Do picking modifies _shouldBlockPointer\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer) {\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\n            }\n        });\n        this._attachToOnPointerOut(scene);\n    }\n    /** @hidden */\n    private onClipboardCopy = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardCut = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardPaste = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /**\n    * Register the clipboard Events onto the canvas\n    */\n    public registerClipboardEvents(): void {\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    public unRegisterClipboardEvents(): void {\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\n        self.removeEventListener(\"cut\", this.onClipboardCut);\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\n    }\n    /**\n    * Connect the texture to a hosting mesh to enable interactions\n    * @param mesh defines the mesh to attach to\n    * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n    */\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                var uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    let size = this.getSize();\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\n                }\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (var control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachToOnPointerOut(scene);\n    }\n    /**\n    * Move the focus to a specific control\n    * @param control defines the control which will receive the focus\n    */\n    public moveFocusToControl(control: IFocusableControl): void {\n        this.focusedControl = control;\n        this._lastPickedControl = <any>control;\n        this._blockNextFocusCheck = true;\n    }\n    private _manageFocus(): void {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = <any>this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    private _attachToOnPointerOut(scene: Scene): void {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    // Statics\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = result;\n            material.emissiveTexture = result;\n            result.hasAlpha = true;\n        } else {\n            material.emissiveTexture = result;\n            material.opacityTexture = result;\n        }\n        mesh.material = material;\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n    * Creates a new AdvancedDynamicTexture in fullscreen mode.\n    * In this mode the texture will rely on a layer for its rendering.\n    * This allows it to be treated like any other layer.\n    * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n    * LayerMask is set through advancedTexture.layer.layerMask\n    * @param name defines name for the texture\n    * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n    * @param scene defines the hsoting scene\n    * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n    * @returns a new AdvancedDynamicTexture\n    */\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        // Attach\n        result.attach();\n        return result;\n    }\n}","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._childControls = [];\r\n    }\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./adtInstrumentation\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._RGBtoHSV(this._value, this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    private _RGBtoHSV(color: Color3, result: Color3) {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h = 0;\n        var s = 0;\n        var v = max;\n\n        var dm = max - min;\n\n        if (max !== 0) {\n            s = dm / max;\n        }\n\n        if (max != min) {\n            if (max == r) {\n                h = (g - b) / dm;\n                if (g < b) {\n                    h += 6;\n                }\n            } else if (max == g) {\n                h = (b - r) / dm + 2;\n            } else if (max == b) {\n                h = (r - g) / dm + 4;\n            }\n            h *= 60;\n        }\n\n        result.r = h;\n        result.g = s;\n        result.b = v;\n    }\n\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\n        var chroma = value * saturation;\n        var h = hue / 60;\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\n        var r = 0;\n        var g = 0;\n        var b = 0;\n\n        if (h >= 0 && h <= 1) {\n            r = chroma;\n            g = x;\n        } else if (h >= 1 && h <= 2) {\n            r = x;\n            g = chroma;\n        } else if (h >= 2 && h <= 3) {\n            g = chroma;\n            b = x;\n        } else if (h >= 3 && h <= 4) {\n            g = x;\n            b = chroma;\n        } else if (h >= 4 && h <= 5) {\n            r = x;\n            b = chroma;\n        } else if (h >= 5 && h <= 6) {\n            r = chroma;\n            b = x;\n        }\n\n        var m = value - chroma;\n        result.set((r + m), (g + m), (b + m));\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\nimport { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = this._horizontalBar.value * this._endLeft + \"px\";\r\n        const newTop = this._verticalBar.value * this._endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","import { IDisposable, PerfCounter, Nullable, Observer } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}