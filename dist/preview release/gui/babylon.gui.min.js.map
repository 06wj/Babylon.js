{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/charting/index.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/charting/dataSeries.ts","webpack://BABYLON.GUI/./src/3D/charting/chart.ts","webpack://BABYLON.GUI/./src/3D/charting/barGraph.ts","webpack://BABYLON.GUI/./src/3D/charting/mapGraph.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","parent","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","GUIImage","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","Image","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","_STRETCH_NONE","_STRETCH_FILL","_STRETCH_UNIFORM","_STRETCH_EXTEND","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","attach","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","material","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Color3","Red","Black","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","AdvancedDynamicTexture","Texture","TRILINEAR_SAMPLINGMODE","rootContainer","scaleX","scaleY","premulAlpha","_applyFacade","facadeTexture","emissiveTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","StandardMaterial","getScene","specularColor","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","onFocus","navigator","userAgent","prompt","focusedControl","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","processKeyboard","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","getProjectedPosition","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","Number","_canvas","yValue","style_1","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_texture","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","event","skipOnPointerObservable","hasAlpha","_resizeObserver","getEngine","onResizeObservable","_onResize","isReady","_layerToDispose","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","worldMatrix","renderScale","layerMask","isDisposed","isDirty","_render","update","clearRect","measure","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","backFaceCulling","diffuseColor","diffuseTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","undefined","BABYLON","g","Function","eval","e","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","onValueChangedObservable","_pointerIsDown","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","_1","RadioButton","group","childRadio","AddRadioButtonWithHeader","radio","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_createKey","propertySet","background","paddingRight","paddingTop","paddingBottom","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","j","button_tblock","toUpperCase","toLowerCase","_connectedInputText","connect","input","_onFocusObserver","_onBlurObserver","_onKeyPressObserver","disconnect","CreateDefaultLayout","returnValue","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","rotation","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","isHorizontal","controlFirst","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","fontSize","_backPlate","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","a","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","DataSeries","getFilteredData","filters","filteredData","element","isValid","filter","filterValue","getDimensionValues","entry","CreateFakeData","series","label","dimensions","Year","Country","CreateFakeSpatialData","latitude","longitude","_2D_1","materials_1","Chart","LastCreatedScene","_labelMeshes","_blockRefresh","_elementWidth","_displayLabels","onRefreshObservable","onElementCreatedObservable","onElementEnterObservable","onElementOutObservable","_rootNode","_scene","_lastElementOver","_onElementEnterObserver","_activeBar","_hoverLabel","_addLabel","updateHoverLabel","_onElementOutObserver","_removeLabel","glowHover","refresh","_dataSource","_dataFilters","_defaultMaterial","_labelDimension","_glowLayer","GlowLayer","customEmissiveColorSelector","chartColor","_createDefaultMaterial","includeBackground","labelCreationFunction","labelMesh","plane","Mesh","CreatePlane","billboardMode","BILLBOARDMODE_ALL","adt","rectangle","_removeLabels","_clean","getDescendants","BarGraph","_maxBarHeight","_displayBackground","_backgroundResolution","_backgroundTickCount","_createBarMesh","box","setPivotMatrix","Translation","MIN_VALUE","createMesh","_barMeshes","_backgroundMesh","_backgroundADT","displayGrid","displayMajorLines","minorLineColor","minorLineTickness","tickIndex","ticklabel","maxBarHeight","barMesh","currentScalingYState","easing","CircleEase","Animation","CreateAndStartAnimation","labelDimension","displayLabels","MapGraph","mapUrl","_maxCylinderHeight","_worldMapSize","_cylinderTesselation","_xOffset","_yOffset","meshLabel","worldMapUrl","_mercatorMaterial","_worldMapPickedPointObserver","albedoTexture","LINEAR_LINEAR_MIPLINEAR","_createCylinderMesh","cylinder","CreateCylinder","_cylinderMeshes","worldMaptextureSize","worldMapWidth","worldMapHeight","_worldMap","CreateGround","cylinderMesh","latRad","mercN","log","tan","GUI3DManager","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nclass GUIImage extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = GUIImage.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = new Image();\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case GUIImage.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case GUIImage.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    private static _STRETCH_NONE = 0;\r\n    private static _STRETCH_FILL = 1;\r\n    private static _STRETCH_UNIFORM = 2;\r\n    private static _STRETCH_EXTEND = 3;\r\n\r\n    /** STRETCH_NONE */\r\n    public static get STRETCH_NONE(): number {\r\n        return GUIImage._STRETCH_NONE;\r\n    }\r\n\r\n    /** STRETCH_FILL */\r\n    public static get STRETCH_FILL(): number {\r\n        return GUIImage._STRETCH_FILL;\r\n    }\r\n\r\n    /** STRETCH_UNIFORM */\r\n    public static get STRETCH_UNIFORM(): number {\r\n        return GUIImage._STRETCH_UNIFORM;\r\n    }\r\n\r\n    /** STRETCH_EXTEND */\r\n    public static get STRETCH_EXTEND(): number {\r\n        return GUIImage._STRETCH_EXTEND;\r\n    }\r\n}\r\n\r\nexport { GUIImage as Image };\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./fluentMaterial\";","export * from \"./dataSeries\";\r\nexport * from \"./chart\";\r\nexport * from \"./barGraph\";\r\nexport * from \"./mapGraph\";","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._focusedBackground;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._background;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._background;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectedInputText: Nullable<InputText>;\r\n    private _onFocusObserver: Nullable<Observer<InputText>>;\r\n    private _onBlurObserver: Nullable<Observer<InputText>>;\r\n    private _onKeyPressObserver: Nullable<Observer<string>>;\r\n\r\n    /** Gets the input text control attached with the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._connectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        this.isVisible = false;\r\n        this._connectedInputText = input;\r\n\r\n        // Events hooking\r\n        this._onFocusObserver = input.onFocusObservable.add(() => {\r\n            this.isVisible = true;\r\n        });\r\n\r\n        this._onBlurObserver = input.onBlurObservable.add(() => {\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n            if (!this._connectedInputText) {\r\n                return;\r\n            }\r\n            switch (key) {\r\n                case \"\\u21E7\":\r\n                    this.shiftState++;\r\n                    if (this.shiftState > 2) {\r\n                        this.shiftState = 0;\r\n                    }\r\n                    this.applyShiftState(this.shiftState);\r\n                    return;\r\n                case \"\\u2190\":\r\n                    this._connectedInputText.processKey(8);\r\n                    return;\r\n                case \"\\u21B5\":\r\n                    this._connectedInputText.processKey(13);\r\n                    return;\r\n            }\r\n            this._connectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n            if (this.shiftState === 1) {\r\n                this.shiftState = 0;\r\n                this.applyShiftState(this.shiftState);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from an input text control\r\n     */\r\n    public disconnect(): void {\r\n        if (!this._connectedInputText) {\r\n            return;\r\n        }\r\n\r\n        this._connectedInputText.onFocusObservable.remove(this._onFocusObserver);\r\n        this._connectedInputText.onBlurObservable.remove(this._onBlurObserver);\r\n        this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n\r\n        this._connectedInputText = null;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard();\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\nexport * from \"./charting\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","import { Color3 } from \"babylonjs\";\r\n\r\n/** \r\n * Class used to store data to display \r\n * @see http://doc.babylonjs.com/how_to/chart3d\r\n */\r\nexport class DataSeries {\r\n    /** Gets or sets the label of the series */\r\n    public label: string;\r\n\r\n    /** Gets or sets the color associated with the series */\r\n    public color: Color3;\r\n\r\n    /** Gets or sets the list of dimensions (used to filter data) */\r\n    public dimensions: Array<string>;\r\n\r\n    /** Gets or sets the list of values (data to display) */\r\n    public data: Array<any>;  \r\n\r\n    /**\r\n     * Apply a list of filters to the data and return a list\r\n     * @param filters defines the filters to apply\r\n     * @returns an array containing the filtered data\r\n     */\r\n    public getFilteredData(filters: {[key: string]: string}): Array<any> {\r\n        let filteredData = new Array<any>();\r\n\r\n        this.data.forEach(element => {\r\n            let isValid = false;\r\n            for (var filter in filters) {\r\n                if (!filters.hasOwnProperty(filter)) {\r\n                    continue;\r\n                }\r\n\r\n                var filterValue = filters[filter];\r\n                isValid = (element[filter] === filterValue);\r\n\r\n                if (!isValid) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isValid) {\r\n                filteredData.push(element);\r\n            }\r\n        });\r\n\r\n        return filteredData;\r\n    }\r\n\r\n    /**\r\n     * Get the different values of a dimension\r\n     * @param key defines the dimension name\r\n     * @returns An array of values\r\n     */\r\n    public getDimensionValues(key: string): Array<any> {\r\n        var result = new Array<any>();\r\n\r\n        this.data.forEach((entry) => {\r\n            var value = entry[key];\r\n            if (result.indexOf(value) === -1) {\r\n                result.push(value);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new DataSeries containing testing values\r\n     * @returns the new DataSeries\r\n     */\r\n    public static CreateFakeData(): DataSeries {\r\n        var series = new DataSeries();\r\n        series.label = \"Product #1\";\r\n        series.color = new Color3(1.0, 0, 0);\r\n\r\n        series.dimensions = [\"Year\", \"Country\"];\r\n\r\n        series.data = [\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"France\",\r\n                \"value\": 10\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"USA\",\r\n                \"value\": 200\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"India\",\r\n                \"value\": 400\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"UK\",\r\n                \"value\": 180\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 400\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 24\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"China\",\r\n                \"value\": 540\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 150\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"France\",\r\n                \"value\": 12\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"USA\",\r\n                \"value\": 120\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"India\",\r\n                \"value\": 480\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"UK\",\r\n                \"value\": 10\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 80\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 230\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"China\",\r\n                \"value\": 490\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 120\r\n            }\r\n        ];\r\n        \r\n        return series;\r\n    }\r\n\r\n    /**\r\n     * Create a new DataSeries containing testing spatial values\r\n     * @returns the new DataSeries\r\n     */\r\n    public static CreateFakeSpatialData(): DataSeries {\r\n        var series = new DataSeries();\r\n        series.label = \"Spatial Data\";\r\n        series.color = new Color3(0, 1.0, 0);\r\n\r\n        series.dimensions = [\"Year\", \"Country\"];\r\n\r\n        series.data = [\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"France\",\r\n                \"value\": 10,\r\n                \"latitude\": 46.63728,\r\n                \"longitude\": 2.338262\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"USA\",\r\n                \"value\": 200,\r\n                \"latitude\": 39.83333,\r\n                \"longitude\": -98.58334\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"India\",\r\n                \"value\": 400,\r\n                \"latitude\": 23.40601,\r\n                \"longitude\": 79.45809\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"UK\",\r\n                \"value\": 180,\r\n                \"latitude\": 54.56089,\r\n                \"longitude\": -2.212512\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 400,\r\n                \"latitude\": 51.20247,\r\n                \"longitude\": 10.3822\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 24,\r\n                \"latitude\": -25.58524,\r\n                \"longitude\": 134.5041\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"China\",\r\n                \"value\": 540,\r\n                \"latitude\": 36.55309,\r\n                \"longitude\": 103.9754\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 150,\r\n                \"latitude\": 36.28165,\r\n                \"longitude\": 139.0773\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"France\",\r\n                \"value\": 12,\r\n                \"latitude\": 46.63728,\r\n                \"longitude\": 2.338262\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"USA\",\r\n                \"value\": 120,\r\n                \"latitude\": 39.83333,\r\n                \"longitude\": -98.58334\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"India\",\r\n                \"value\": 480,\r\n                \"latitude\": 23.40601,\r\n                \"longitude\": 79.45809\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"UK\",\r\n                \"value\": 10,\r\n                \"latitude\": 54.56089,\r\n                \"longitude\": -2.212512\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 80,\r\n                \"latitude\": 51.20247,\r\n                \"longitude\": 10.3822\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 230,\r\n                \"latitude\": -25.58524,\r\n                \"longitude\": 134.5041\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"China\",\r\n                \"value\": 490,\r\n                \"latitude\": 36.55309,\r\n                \"longitude\": 103.9754\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 120,\r\n                \"latitude\": 36.28165,\r\n                \"longitude\": 139.0773\r\n            }\r\n        ];\r\n        \r\n        return series;\r\n    }\r\n}","import { Nullable, TransformNode, Scene, Vector3, Engine, Observer, PointerInfo, Observable, Mesh, AbstractMesh, GlowLayer, Material } from \"babylonjs\";\r\nimport { DataSeries } from \".\";\r\nimport { AdvancedDynamicTexture, TextBlock, Rectangle, TextWrapping } from \"../../2D\";\r\nimport { FluentMaterial } from \"../materials\";\r\n\r\n/** \r\n * Base class for all chart controls\r\n * @see http://doc.babylonjs.com/how_to/chart3d#charts\r\n */\r\nexport abstract class Chart {\r\n    protected _dataSource: Nullable<DataSeries>;\r\n    protected _rootNode: TransformNode;\r\n    protected _dataFilters: {[key: string]: string};\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    protected _scene: Scene;\r\n    private _lastElementOver: Nullable<AbstractMesh>;\r\n    private _labelMeshes = new Array<Mesh>();\r\n    protected _blockRefresh = false;    \r\n    protected _elementWidth = 2;    \r\n    private _pickedPointObserver: Nullable<Observer<Vector3>>;      \r\n    protected _defaultMaterial: Nullable<Material>; \r\n    private _labelDimension: string;\r\n    private _displayLabels = true;\r\n    private _activeBar: Nullable<Mesh>;\r\n\r\n    private _glowLayer: Nullable<GlowLayer>;\r\n    private _onElementEnterObserver: Nullable<Observer<AbstractMesh>>;\r\n    private _onElementOutObserver: Nullable<Observer<AbstractMesh>>;\r\n    \r\n    private _hoverLabel: Nullable<Mesh>;\r\n\r\n    /** Observable raised when a refresh was done */\r\n    public onRefreshObservable  = new Observable<Chart>();\r\n\r\n    /** Observable raised when a new element is created */\r\n    public onElementCreatedObservable  = new Observable<Mesh>();\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when the pointer enters an element of the chart\r\n    */\r\n    public onElementEnterObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when the pointer leaves an element of the chart\r\n     */\r\n    public onElementOutObservable = new Observable<AbstractMesh>();\r\n\r\n    /** User defined callback used to create labels */\r\n    public labelCreationFunction: Nullable<(label: string, width: number, includeBackground: boolean) => Mesh>;\r\n\r\n    /** User defined callback used to apply specific setup to hover labels */\r\n    public updateHoverLabel: Nullable<(meshLabel: Mesh) => void>;\r\n\r\n    /** Gets or sets the width of each element */\r\n    public get elementWidth(): number {\r\n        return this._elementWidth;\r\n    }\r\n\r\n    public set elementWidth(value: number) {\r\n        if (this._elementWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._elementWidth = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    /** Gets or sets the rotation of the entire chart */\r\n    public set rotation(value: Vector3) {\r\n        this._rootNode.rotation = value;\r\n    }\r\n\r\n    public get rotation(): Vector3 {\r\n        return this._rootNode.rotation;\r\n    }\r\n\r\n    /** Gets or sets the position of the entire chart */\r\n    public set position(value: Vector3) {\r\n        this._rootNode.position = value;\r\n    }\r\n\r\n    public get position(): Vector3 {\r\n        return this._rootNode.position;\r\n    }\r\n\r\n    /** Gets or sets the scaling of the entire chart */\r\n    public set scaling(value: Vector3) {\r\n        this._rootNode.scaling = value;\r\n    }\r\n\r\n    public get scaling(): Vector3 {\r\n        return this._rootNode.scaling;\r\n    }\r\n\r\n    /** Gets or sets the data source used by the graph */\r\n    public get dataSource(): Nullable<DataSeries> {\r\n        return this._dataSource;\r\n    }\r\n\r\n    public set dataSource(value: Nullable<DataSeries>) {\r\n        if (this._dataSource === value) {\r\n            return;\r\n        }\r\n\r\n        this._dataSource = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets the filters applied to data source */\r\n    public get dataFilters(): {[key: string]: string} {\r\n        return this._dataFilters;\r\n    }\r\n\r\n    public set dataFilters(filters: {[key: string]: string}) {\r\n        this._dataFilters = filters;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets the root node associated with this graph */\r\n    public get rootNode(): TransformNode {\r\n        return this._rootNode;\r\n    }\r\n\r\n    /** Gets or sets a value indicating if refresh function should be executed (useful when multiple changes will happen and you want to run refresh only at the end) */\r\n    public get blockRefresh(): boolean {\r\n        return this._blockRefresh;\r\n    }\r\n\r\n    public set blockRefresh(value: boolean) {\r\n        if (this._blockRefresh === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockRefresh = value;\r\n\r\n        if (value) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the material used by element meshes */\r\n    public get defaultMaterial(): Nullable<Material> {\r\n        return this._defaultMaterial;\r\n    }\r\n\r\n    public set defaultMaterial(value: Nullable<Material>) {\r\n        if (this._defaultMaterial === value) {\r\n            return;\r\n        }\r\n\r\n        this._defaultMaterial = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if labels must be displayed */\r\n    public get displayLabels(): boolean {\r\n        return this._displayLabels;\r\n    }\r\n\r\n    public set displayLabels(value: boolean) {\r\n        if (this._displayLabels === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayLabels = value;\r\n\r\n        this.refresh();\r\n    }       \r\n    \r\n    /** Gets or sets the dimension used for the labels */\r\n    public get labelDimension(): string {\r\n        return this._labelDimension;\r\n    }\r\n\r\n    public set labelDimension(value: string) {\r\n        if (this._labelDimension === value) {\r\n            return;\r\n        }\r\n\r\n        this._labelDimension = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    /** Gets or sets a boolean indicating if glow should be used to highlight element hovering */\r\n    public get glowHover(): boolean {\r\n        return this._glowLayer !== undefined && this._glowLayer !== null;\r\n    }\r\n\r\n    public set glowHover(value: boolean) {\r\n        if (this.glowHover === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._glowLayer) {\r\n            this._glowLayer.dispose();\r\n            this._glowLayer = null;\r\n            return;\r\n        }\r\n\r\n        this._glowLayer = new GlowLayer(\"glow\", this._scene);\r\n\r\n        this._glowLayer.customEmissiveColorSelector = (mesh, subMesh, material, result) => {\r\n            if (mesh === this._activeBar) {\r\n                let chartColor = this._dataSource!.color.scale(0.75);\r\n                result.set(chartColor.r, chartColor.g, chartColor.b, 1.0);\r\n            } else {\r\n                result.set(0, 0, 0, 0);\r\n            }\r\n        }     \r\n    }\r\n\r\n    /** Gets or sets the name of the graph */\r\n    public name: string; \r\n\r\n    /**\r\n     * Creates a new Chart\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        this.name = name;\r\n        this._rootNode = new TransformNode(name, scene);\r\n\r\n        this._scene = scene!;\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pi, state) => {\r\n            if (!pi.pickInfo || !pi.pickInfo.hit) {\r\n                if (this._lastElementOver) {\r\n                    this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                    this._lastElementOver = null;\r\n                }\r\n\r\n                this.onPickedPointChangedObservable.notifyObservers(null);\r\n                return;\r\n            }\r\n\r\n            let metadata = pi.pickInfo.pickedMesh!.metadata;\r\n            if (metadata && metadata.value) {\r\n                if (this._lastElementOver !== pi.pickInfo.pickedMesh) {\r\n                    if (this._lastElementOver) {\r\n                        this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                        this._lastElementOver = null;\r\n                    }\r\n                    this._lastElementOver = pi.pickInfo.pickedMesh;\r\n                    this.onElementEnterObservable.notifyObservers(this._lastElementOver!);\r\n                }\r\n            } else {\r\n                if (this._lastElementOver) {\r\n                    this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                    this._lastElementOver = null;\r\n                }\r\n            }\r\n\r\n            this.onPickedPointChangedObservable.notifyObservers(pi.pickInfo.pickedPoint);\r\n        });\r\n\r\n        this._onElementEnterObserver = this.onElementEnterObservable.add(mesh => {\r\n            this._activeBar = <Mesh>mesh;\r\n\r\n            this._hoverLabel = this._addLabel(this._activeBar.metadata.value.toString(), this._elementWidth);\r\n\r\n            this._hoverLabel.position = this._activeBar.position.clone();\r\n            this._hoverLabel.position.y = this._activeBar.scaling.y + 1.0;\r\n            this._hoverLabel.scaling.x = this._elementWidth;     \r\n            \r\n            if (this.updateHoverLabel) {\r\n                this.updateHoverLabel(this._hoverLabel);\r\n            }\r\n        });\r\n\r\n        this._onElementOutObserver = this.onElementOutObservable.add(mesh => {\r\n            this._activeBar = null;\r\n\r\n            if (this._hoverLabel) {\r\n                this._removeLabel(this._hoverLabel);\r\n                this._hoverLabel = null;\r\n            }\r\n        });\r\n\r\n\r\n        this.glowHover = true;\r\n    }\r\n\r\n    protected _createDefaultMaterial(scene: Scene): Material {\r\n        var result = new FluentMaterial(\"fluent\", scene);\r\n        result.albedoColor = this._dataSource!.color.scale(0.5);\r\n        result.innerGlowColorIntensity = 0.6;\r\n        result.renderHoverLight = true;\r\n        result.hoverRadius = 5;\r\n\r\n        this._pickedPointObserver = this.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                result.hoverPosition = pickedPoint;\r\n                result.hoverColor.a = 1.0;\r\n            } else {\r\n                result.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Function called by the chart objects when they need a label. Could be user defined if you set this.labelCreationFunction to a custom callback\r\n     * @param label defines the text of the label\r\n     * @param width defines the expected width (height is supposed to be 1)\r\n     * @param includeBackground defines if a background rectangle must be added (default is true)\r\n     * @returns a mesh used to host the label\r\n     */\r\n    protected _addLabel(label: string, width: number, includeBackground = true): Mesh {\r\n        if (this.labelCreationFunction) {\r\n            let labelMesh = this.labelCreationFunction(label, width, includeBackground);\r\n            labelMesh.parent = this._rootNode;\r\n\r\n            this._labelMeshes.push(labelMesh);\r\n\r\n            return labelMesh;\r\n        }\r\n\r\n        let plane = Mesh.CreatePlane(label, 1, this._scene);\r\n\r\n        this._labelMeshes.push(plane);\r\n\r\n        plane.parent = this._rootNode;\r\n        plane.billboardMode = Mesh.BILLBOARDMODE_ALL;\r\n        plane.scaling.x = width;\r\n\r\n        let resolution = 256;\r\n        let adt = AdvancedDynamicTexture.CreateForMesh(plane, resolution, resolution / width, false, true);\r\n        let textBlock = new TextBlock(label, label);\r\n        textBlock.color = \"White\";\r\n        textBlock.textWrapping = TextWrapping.Ellipsis;\r\n        textBlock.fontWeight = \"Bold\";\r\n        textBlock.fontSize = 50;\r\n\r\n        if (includeBackground) {\r\n            let rectangle = new Rectangle(label + \"Border\");\r\n            rectangle.thickness = 4;\r\n            rectangle.color = \"White\";\r\n            rectangle.background = \"Black\";\r\n            rectangle.addControl(textBlock);\r\n            adt.addControl(rectangle);\r\n        } else {\r\n            adt.addControl(textBlock);\r\n        }\r\n\r\n        return plane;\r\n    }\r\n\r\n    /**\r\n     * Remove specific label mesh\r\n     * @param label defines the label mesh to remove\r\n     */\r\n    protected _removeLabel(label: Mesh): void {\r\n        let index = this._labelMeshes.indexOf(label);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._labelMeshes.splice(index, 1);\r\n        label.dispose(false, true);\r\n    }\r\n\r\n    /** Remove all created labels */\r\n    protected _removeLabels(): void {\r\n        this._labelMeshes.forEach(label => {\r\n            label.dispose(false, true);\r\n        });\r\n\r\n        this._labelMeshes = [];\r\n    }\r\n\r\n    /** \r\n     * Force the chart to redraw itself \r\n     * @returns the current chart\r\n    */\r\n    public abstract refresh(): Chart;\r\n\r\n    /** Release all associated resources */\r\n    public dispose() {\r\n        this.onElementCreatedObservable.clear();\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onElementEnterObservable.clear();\r\n        this.onElementOutObservable.clear();\r\n\r\n        this.labelCreationFunction = null;\r\n\r\n        if (this._onElementEnterObserver) {\r\n            this.onElementEnterObservable.remove(this._onElementEnterObserver);\r\n            this._onElementEnterObserver = null;\r\n        }\r\n\r\n        if (this._onElementOutObserver) {\r\n            this.onElementOutObservable.remove(this._onElementOutObserver);\r\n            this._onElementOutObserver = null;\r\n        }         \r\n\r\n        if (this._pointerObserver) {\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n            this._pointerObserver = null;\r\n        }\r\n\r\n        this.glowHover = false;\r\n\r\n        if (this._pickedPointObserver) {\r\n            this.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n            this._pickedPointObserver = null;\r\n        }\r\n\r\n        this._rootNode.dispose();\r\n    }\r\n\r\n    protected _clean(): void {\r\n        // Cleanup\r\n        var descendants = this._rootNode.getDescendants();\r\n        descendants.forEach(n => n.dispose());\r\n    }\r\n}","import { Nullable, Scene, Mesh, StandardMaterial, Animation, Engine, Matrix } from \"babylonjs\";\r\nimport { Chart } from \".\";\r\nimport { AdvancedDynamicTexture, DisplayGrid } from \"../../2D\";\r\n\r\n/** \r\n * Class used to render bar graphs \r\n * @see http://doc.babylonjs.com/how_to/chart3d#bargraph\r\n */\r\nexport class BarGraph extends Chart {\r\n    private _margin = 1;\r\n    private _maxBarHeight = 10;\r\n    private _barMeshes: Nullable<Array<Mesh>>;\r\n    private _backgroundMesh: Nullable<Mesh>;\r\n    private _backgroundADT : Nullable<AdvancedDynamicTexture>;\r\n    \r\n    private _displayBackground = true;\r\n    private _backgroundResolution = 512;\r\n    private _backgroundTickCount = 5;\r\n\r\n    /** Gets or sets a boolean indicating if the background must be displayed */\r\n    public get displayBackground(): boolean {\r\n        return this._displayBackground;\r\n    }\r\n\r\n    public set displayBackground(value: boolean) {\r\n        if (this._displayBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayBackground = value;\r\n\r\n        this.refresh();\r\n    }     \r\n\r\n    /** Gets or sets the margin between bars */\r\n    public get margin(): number {\r\n        return this._margin;\r\n    }\r\n\r\n    public set margin(value: number) {\r\n        if (this._margin === value) {\r\n            return;\r\n        }\r\n\r\n        this._margin = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets the maximum height of a bar */\r\n    public get maxBarHeight(): number {\r\n        return this._maxBarHeight;\r\n    }\r\n\r\n    public set maxBarHeight(value: number) {\r\n        if (this._maxBarHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._maxBarHeight = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BarGraph\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Children class can override this function to provide a new mesh (as long as it stays inside a 1x1x1 box)\r\n     * @param name defines the mesh name\r\n     * @param scene defines the hosting scene\r\n     * @returns a new mesh used to represent the current bar\r\n     */\r\n    protected _createBarMesh(name: string, scene: Scene): Mesh {\r\n        var box = Mesh.CreateBox(name, 1, scene);\r\n        box.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n        return box;\r\n    }\r\n\r\n    /** \r\n     * Force the graph to redraw itself \r\n     * @returns the current BarGraph\r\n    */\r\n    public refresh(): BarGraph {\r\n        if (this._blockRefresh) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._dataSource) {\r\n            this._clean();\r\n            return this;\r\n        }\r\n\r\n        const scene = this._rootNode.getScene();\r\n\r\n        // Default material\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = this._createDefaultMaterial(scene);\r\n        }\r\n\r\n        // Scan data\r\n        let min = 0;\r\n        let max = Number.MIN_VALUE;\r\n\r\n        const data = this._dataFilters ? this._dataSource.getFilteredData(this._dataFilters) : this._dataSource.data;\r\n\r\n        // Check the limit of the entire series\r\n        this._dataSource.data.forEach(entry => {\r\n            if (min > entry.value) {\r\n                min = entry.value;\r\n            }\r\n\r\n            if (max < entry.value) {\r\n                max = entry.value;\r\n            }\r\n        });\r\n\r\n        let ratio = this._maxBarHeight / (max - min);\r\n\r\n        let createMesh = false;\r\n        let left = -(data.length / 2) * (this._elementWidth + this.margin) + 1.5 * this._margin;\r\n\r\n        // Do we need to create new graph or animate the current one\r\n        if (!this._barMeshes || this._barMeshes.length !== data.length) {\r\n            this._clean();\r\n            createMesh = true;\r\n            this._barMeshes = [];\r\n        }        \r\n\r\n        this._removeLabels();\r\n\r\n        if (this._backgroundMesh) {\r\n            this._backgroundMesh.dispose(false, true);\r\n            this._backgroundMesh = null;\r\n        }\r\n\r\n        if (this._displayBackground) {\r\n            // Axis\r\n            this._backgroundMesh = BABYLON.Mesh.CreatePlane(\"background\", 1, scene);\r\n            this._backgroundMesh.parent = this._rootNode;            \r\n            this._backgroundMesh.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n            this._backgroundADT = AdvancedDynamicTexture.CreateForMesh(this._backgroundMesh, this._backgroundResolution, this._backgroundResolution, false);\r\n\r\n            let displayGrid = new DisplayGrid();\r\n            displayGrid.displayMajorLines = false;\r\n            displayGrid.minorLineColor = \"White\";\r\n            displayGrid.minorLineTickness = 2;\r\n            displayGrid.cellWidth = this._backgroundResolution / data.length;\r\n            displayGrid.cellHeight = this._backgroundResolution / this._backgroundTickCount;\r\n\r\n            this._backgroundADT.addControl(displayGrid);\r\n\r\n            (<StandardMaterial>this._backgroundMesh.material!).opacityTexture = null;\r\n\r\n            this._backgroundMesh.position.z = this._elementWidth;\r\n            this._backgroundMesh.scaling.x = (this._elementWidth + this.margin) * data.length;\r\n            this._backgroundMesh.scaling.y = this._maxBarHeight; \r\n\r\n            for (var tickIndex = 0; tickIndex <= this._backgroundTickCount; tickIndex++) {\r\n                var label = (max / this._backgroundTickCount) * tickIndex + \"\";\r\n                var ticklabel = this._addLabel(label, this._elementWidth, false);\r\n                ticklabel.position.x = left - this._elementWidth;\r\n                ticklabel.position.y = (this.maxBarHeight * tickIndex) / this._backgroundTickCount;\r\n                ticklabel.position.z = this._elementWidth;\r\n            }\r\n        }\r\n\r\n        // We will generate one bar per entry\r\n        let index = 0;\r\n        data.forEach(entry => {\r\n\r\n            var barMesh: Mesh;\r\n            if (createMesh) {\r\n                barMesh = this._createBarMesh(this.name + \"_box_\" + index++, scene);\r\n                barMesh.enablePointerMoveEvents = true;\r\n                this._barMeshes!.push(barMesh);\r\n            } else {\r\n                barMesh = this._barMeshes![index++];\r\n            }\r\n\r\n            barMesh.metadata = entry;\r\n            barMesh.parent = this._rootNode;\r\n            barMesh.position.x = left;\r\n            let currentScalingYState = barMesh.scaling.y;\r\n            barMesh.scaling.set(this._elementWidth, 0, this._elementWidth);\r\n\r\n            var easing = new BABYLON.CircleEase();\r\n            Animation.CreateAndStartAnimation(\"entryScale\", barMesh, \"scaling.y\", 30, 30, currentScalingYState, entry.value * ratio, 0, easing);\r\n\r\n            barMesh.material = this._defaultMaterial;\r\n\r\n            this.onElementCreatedObservable.notifyObservers(barMesh);\r\n\r\n            left += this._elementWidth + this.margin;\r\n\r\n            // Label\r\n            if (!this.labelDimension || !this.displayLabels) {\r\n                return;\r\n            }\r\n\r\n            let label = this._addLabel(entry[this.labelDimension], this._elementWidth);\r\n            label.position = barMesh.position.clone();\r\n            label.position.z -= this._elementWidth;\r\n        });\r\n\r\n        this.onRefreshObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _clean(): void {\r\n        super._clean();\r\n        this._barMeshes = null;\r\n        this._backgroundMesh = null;\r\n\r\n        if (this._backgroundADT) {\r\n            this._backgroundADT.dispose();\r\n            this._backgroundADT = null;\r\n        }\r\n    }\r\n}","import { Chart } from \".\";\r\nimport { Engine, Scene, Nullable, Mesh, Animation, Texture, Matrix, Observer, Vector3, Material } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials\";\r\n\r\n/** \r\n * Class used to render bar graphs \r\n * @see http://doc.babylonjs.com/how_to/chart3d#mapgraph\r\n */\r\nexport class MapGraph extends Chart {\r\n\r\n    private _cylinderMeshes: Nullable<Array<Mesh>>;\r\n    private _maxCylinderHeight = 10;\r\n    private _worldMap: Nullable<Mesh>;\r\n    private _mercatorMaterial: Nullable<FluentMaterial>;\r\n    private _worldMapSize = 40;   \r\n    private _cylinderTesselation = 16;\r\n    private _xOffset = 0;\r\n    private _yOffset = 0;\r\n    private _worldMapPickedPointObserver: Nullable<Observer<Vector3>>;  \r\n\r\n    /** Gets or sets the offset (in world unit) on X axis to apply to all elements */\r\n    public get xOffset(): number {\r\n        return this._xOffset;\r\n    }\r\n\r\n    public set xOffset(value: number) {\r\n        if (this._xOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._xOffset = value;\r\n\r\n        this.refresh();\r\n    }    \r\n    \r\n    /** Gets or sets the offset (in world unit) on Y axis to apply to all elements */\r\n    public get yOffset(): number {\r\n        return this._yOffset;\r\n    }\r\n\r\n    public set yOffset(value: number) {\r\n        if (this._yOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._yOffset = value;\r\n\r\n        this.refresh();\r\n    }       \r\n\r\n    /** Gets or sets the tesselation used to build the cylinders */\r\n    public get cylinderTesselation(): number {\r\n        return this._cylinderTesselation;\r\n    }\r\n\r\n    public set cylinderTesselation(value: number) {\r\n        if (this._cylinderTesselation === value) {\r\n            return;\r\n        }\r\n\r\n        this._cylinderTesselation = value;\r\n        this._clean();\r\n\r\n        this.refresh();\r\n    }        \r\n\r\n    \r\n    /** Gets or sets the size of the world map (this will define the width) */\r\n    public get worldMapSize(): number {\r\n        return this._worldMapSize;\r\n    }\r\n\r\n    public set worldMapSize(value: number) {\r\n        if (this._worldMapSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._worldMapSize = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    public updateHoverLabel = (meshLabel: Mesh) => {\r\n        if (!this.labelDimension || !this.displayLabels) {\r\n            return;\r\n        }\r\n\r\n        meshLabel.position.y += 1.5;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the world map\r\n     */\r\n    public get worldMapMaterial(): Nullable<Material> {\r\n        return this._mercatorMaterial;\r\n    }\r\n\r\n    /** Sets the texture url to use for the world map */\r\n    public set worldMapUrl(value: string) {\r\n        const scene = this._scene;\r\n        if (!this._mercatorMaterial) {\r\n            this._mercatorMaterial = new FluentMaterial(\"WorldMap\", scene!);\r\n    \r\n            this._mercatorMaterial.backFaceCulling = false;\r\n    \r\n            this._mercatorMaterial.renderHoverLight = true;\r\n            this._mercatorMaterial.hoverRadius = 3;\r\n    \r\n            this._worldMapPickedPointObserver = this.onPickedPointChangedObservable.add(pickedPoint => {\r\n                if (pickedPoint) {\r\n                    this._mercatorMaterial!.hoverPosition = pickedPoint;\r\n                    this._mercatorMaterial!.hoverColor.a = 1.0;\r\n                } else {\r\n                    this._mercatorMaterial!.hoverColor.a = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._mercatorMaterial.albedoTexture) {\r\n            this._mercatorMaterial.albedoTexture.dispose();\r\n        }\r\n\r\n        const texture = new Texture(value, scene, false, true, Texture.LINEAR_LINEAR_MIPLINEAR, () => {\r\n            this.refresh();\r\n        });\r\n        this._mercatorMaterial.albedoTexture = texture;\r\n    }\r\n    \r\n    /**\r\n     * Creates a new MapGraph\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, mapUrl: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        super(name, scene);\r\n\r\n        this.worldMapUrl = mapUrl;\r\n    }\r\n\r\n    protected _createCylinderMesh(name: string, scene: Scene): Mesh {\r\n        var cylinder = Mesh.CreateCylinder(name, 1, 1, 1, this._cylinderTesselation, 1, scene);\r\n        cylinder.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n        return cylinder;\r\n    }\r\n\r\n    public refresh(): MapGraph {\r\n        if (this._blockRefresh || !this._mercatorMaterial || !this._mercatorMaterial.albedoTexture!.isReady()) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._dataSource) {\r\n            this._clean();\r\n            return this;\r\n        }\r\n\r\n        const scene = this._rootNode.getScene();\r\n        const data = this._dataFilters ? this._dataSource.getFilteredData(this._dataFilters) : this._dataSource.data;\r\n        let createMesh = false;\r\n\r\n        // Do we need to create new graph or animate the current one\r\n        if (!this._cylinderMeshes || this._cylinderMeshes.length !== data.length) {\r\n            this._clean();\r\n            createMesh = true;\r\n            this._cylinderMeshes = [];\r\n        }      \r\n\r\n        // Scan data\r\n        let min = 0;\r\n        let max = Number.MIN_VALUE;\r\n\r\n        // Check the limit of the entire series\r\n        this._dataSource.data.forEach(entry => {\r\n            if (min > entry.value) {\r\n                min = entry.value;\r\n            }\r\n\r\n            if (max < entry.value) {\r\n                max = entry.value;\r\n            }\r\n        });\r\n\r\n        let ratio = this._maxCylinderHeight / (max - min);     \r\n\r\n        this._removeLabels();\r\n        \r\n        const worldMaptextureSize = this._mercatorMaterial.albedoTexture!.getSize();\r\n        const worldMapWidth = this._worldMapSize;\r\n        const worldMapHeight = worldMapWidth * worldMaptextureSize.height / worldMaptextureSize.width;\r\n\r\n        if (this._worldMap) {\r\n            this._worldMap.dispose();\r\n        }\r\n\r\n        this._worldMap = Mesh.CreateGround(\"WorldMap\", worldMapWidth, worldMapHeight, 1, scene);\r\n        this._worldMap.parent = this._rootNode;\r\n        this._worldMap.material = this._mercatorMaterial;\r\n        this._worldMap.enablePointerMoveEvents = true;\r\n\r\n        // Default material\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = this._createDefaultMaterial(scene);\r\n        }        \r\n        \r\n        // We will generate one cylinder per entry\r\n        let index = 0;\r\n        data.forEach(entry => {\r\n\r\n            var cylinderMesh: Mesh;\r\n            if (createMesh) {\r\n                cylinderMesh = this._createCylinderMesh(this.name + \"_cylinder_\" + index++, scene);\r\n                cylinderMesh.enablePointerMoveEvents = true;\r\n                this._cylinderMeshes!.push(cylinderMesh);\r\n            } else {\r\n                cylinderMesh = this._cylinderMeshes![index++];\r\n            }\r\n\r\n            cylinderMesh.material = this._defaultMaterial;\r\n            cylinderMesh.metadata = entry;\r\n            cylinderMesh.parent = this._rootNode;\r\n            let currentScalingYState = cylinderMesh.scaling.y;\r\n            cylinderMesh.scaling.set(this._elementWidth / 2, 0, this._elementWidth / 2);\r\n\r\n            // Lat/long convertion\r\n            const latitude: number = entry.latitude;\r\n            const longitude: number = entry.longitude;\r\n            const x = (longitude + 180) * (worldMapWidth / 360) - worldMapWidth / 2;\r\n            const latRad = latitude * Math.PI / 180;\r\n            const mercN = Math.log(Math.tan(Math.PI / 4 + latRad / 2));\r\n            const z = worldMapWidth * mercN / (2 * Math.PI);\r\n            cylinderMesh.position.set(x + this._xOffset, 0.01, z + this._yOffset);\r\n\r\n            var easing = new BABYLON.CircleEase();\r\n            Animation.CreateAndStartAnimation(\"entryScale\", cylinderMesh, \"scaling.y\", 30, 30, currentScalingYState, entry.value * ratio, 0, easing);\r\n\r\n            this.onElementCreatedObservable.notifyObservers(cylinderMesh);\r\n\r\n            // Label\r\n            if (!this.labelDimension || !this.displayLabels) {\r\n                return;\r\n            }\r\n\r\n            let label = this._addLabel(entry[this.labelDimension], this._elementWidth);\r\n            label.position = cylinderMesh.position.clone();\r\n            Animation.CreateAndStartAnimation(\"labelScale\", label, \"position.y\", 30, 30, currentScalingYState + 1.0, entry.value * ratio + 1.0, 0, easing);\r\n        });\r\n\r\n        this.onRefreshObservable.notifyObservers(this);\r\n    \r\n        return this;\r\n    }\r\n\r\n    protected _clean(): void {\r\n        super._clean();\r\n        this._worldMap = null;\r\n        this._cylinderMeshes = null;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        if (this._worldMapPickedPointObserver) {\r\n            this.onPickedPointChangedObservable.remove(this._worldMapPickedPointObserver);\r\n            this._worldMapPickedPointObserver = null;    \r\n        }\r\n    }\r\n}","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}