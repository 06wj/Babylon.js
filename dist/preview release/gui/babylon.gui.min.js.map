{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/legacy.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","parent","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_b","_c","_mapGridNode","_finalProcessing","other","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","slice","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","pointerEnterAnimation","_currentMaterial","emissiveColor","Color3","Red","pointerOutAnimation","Black","pointerDownAnimation","scaling","pointerUpAnimation","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","AdvancedDynamicTexture","Texture","TRILINEAR_SAMPLINGMODE","rootContainer","scaleX","scaleY","premulAlpha","_applyFacade","facadeTexture","emissiveTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","_affectMaterial","material","StandardMaterial","getScene","specularColor","AbstractButton3D","vector3WithInfo_1","_behaviors","_node","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","attach","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","Vector3WithInfo","forcePointerUp","pickedPoint","GUIImage","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","Image","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","_STRETCH_NONE","_STRETCH_FILL","_STRETCH_UNIFORM","_STRETCH_EXTEND","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","engine","getEngine","isDirty","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","isReady","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","getBoundingInfo","multiplyToRef","setVector3","setDirectColor4","_afterBind","getActiveTextures","hasTexture","texture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","PushMaterial","Style","style_1","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_texture","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","boundingSphere","center","getWorldMatrix","_render","update","clearRect","measure","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","backFaceCulling","diffuseColor","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","xValue","Number","_canvas","yValue","InputText","_placeholderText","_focusedBackground","_placeholderColor","_thickness","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","color","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","strokeRect","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","Rectangle","_cornerRadius","_drawRoundedRect","fill","stroke","radius","moveTo","lineTo","quadraticCurveTo","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","__export","GUI3DManager","onPickedPointChangedObservable","_sharedMaterials","_scene","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName","StackPanel3D","isVertical","extendSizes","TransformNormal","volumeBasedPanel_1","SpherePanel","arguments","_radius","nodePosition","newPos","_sphericalMapping","orientation","lookAt","BABYLON","Axis","Y","Space","LOCAL","xAngle","yAngle","RotationYawPitchRollToRef","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","a","b","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","j","combinedRadius","distance","normalize","sqrt","addInPlace","subtractInPlace","PlanePanel","MeshButton3D","_currentMesh","getChildMeshes","forEach","fShader","vShader","Effect","ShadersStore","button3D_1","fluentMaterial_1","stackPanel_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","panel","image","paddingTop","paddingBottom","fontSize","_backPlate","_textPlate","_createBackMaterial","_pickedPointObserver","_createFrontMaterial","_createPlateMaterial","CylinderPanel","_cylindricalMapping","options","isHorizontal","controlFirst","header","paddingRight","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_createKey","propertySet","background","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","_connectedInputText","connect","input","_onFocusObserver","_onBlurObserver","_onKeyPressObserver","disconnect","CreateDefaultLayout","returnValue","RadioButton","_isChecked","_checkSizeRatio","group","onIsCheckedChangedObservable","undefined","childRadio","isChecked","actualWidth","actualHeight","offsetWidth","offseHeight","multiLinePoint_1","MultiLine","_lineWidth","_dash","_points","getAt","items","map","item","point","setLineDash","first","_minX","_minY","_maxX","_maxY","Line","_x1","_y1","_x2","_y2","_connectedControl","_connectedControlDirtyObserver","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","InputPassword","txt","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","Ellipse","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","g","_updateSquareProps","squareSize","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Checkbox","Function","eval","e","GUI","globalObject","global"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 51);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nclass GUIImage extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = GUIImage.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = new Image();\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case GUIImage.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case GUIImage.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    private static _STRETCH_NONE = 0;\r\n    private static _STRETCH_FILL = 1;\r\n    private static _STRETCH_UNIFORM = 2;\r\n    private static _STRETCH_EXTEND = 3;\r\n\r\n    /** STRETCH_NONE */\r\n    public static get STRETCH_NONE(): number {\r\n        return GUIImage._STRETCH_NONE;\r\n    }\r\n\r\n    /** STRETCH_FILL */\r\n    public static get STRETCH_FILL(): number {\r\n        return GUIImage._STRETCH_FILL;\r\n    }\r\n\r\n    /** STRETCH_UNIFORM */\r\n    public static get STRETCH_UNIFORM(): number {\r\n        return GUIImage._STRETCH_UNIFORM;\r\n    }\r\n\r\n    /** STRETCH_EXTEND */\r\n    public static get STRETCH_EXTEND(): number {\r\n        return GUIImage._STRETCH_EXTEND;\r\n    }\r\n}\r\n\r\nexport { GUIImage as Image };\r\n","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.15)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = new Array<String>();\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        material.emissiveTexture = result;\r\n        material.opacityTexture = result;\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._focusedBackground;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._background;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","export * from \"./2D\";\r\nexport * from \"./3D\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectedInputText: Nullable<InputText>;\r\n    private _onFocusObserver: Nullable<Observer<InputText>>;\r\n    private _onBlurObserver: Nullable<Observer<InputText>>;\r\n    private _onKeyPressObserver: Nullable<Observer<string>>;\r\n\r\n    /** Gets the input text control attached with the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._connectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        this.isVisible = false;\r\n        this._connectedInputText = input;\r\n\r\n        // Events hooking\r\n        this._onFocusObserver = input.onFocusObservable.add(() => {\r\n            this.isVisible = true;\r\n        });\r\n\r\n        this._onBlurObserver = input.onBlurObservable.add(() => {\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n            if (!this._connectedInputText) {\r\n                return;\r\n            }\r\n            switch (key) {\r\n                case \"\\u21E7\":\r\n                    this.shiftState++;\r\n                    if (this.shiftState > 2) {\r\n                        this.shiftState = 0;\r\n                    }\r\n                    this.applyShiftState(this.shiftState);\r\n                    return;\r\n                case \"\\u2190\":\r\n                    this._connectedInputText.processKey(8);\r\n                    return;\r\n                case \"\\u21B5\":\r\n                    this._connectedInputText.processKey(13);\r\n                    return;\r\n            }\r\n            this._connectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n            if (this.shiftState === 1) {\r\n                this.shiftState = 0;\r\n                this.applyShiftState(this.shiftState);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from an input text control\r\n     */\r\n    public disconnect(): void {\r\n        if (!this._connectedInputText) {\r\n            return;\r\n        }\r\n\r\n        this._connectedInputText.onFocusObservable.remove(this._onFocusObserver);\r\n        this._connectedInputText.onBlurObservable.remove(this._onBlurObserver);\r\n        this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n\r\n        this._connectedInputText = null;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard();\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._background;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n}   \r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\n\r\nexport * from \"./statics\";","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";"],"sourceRoot":""}