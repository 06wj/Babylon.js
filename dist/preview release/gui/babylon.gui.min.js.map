{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_fontOffset","offset","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","_processMeasures","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","clip","_render","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","_rebuildLayout","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","rebuildCount","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","BABYLON","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","drawImage","hRatio","vRatio","ratio","centerX","centerY","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","availableWidth","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","grid_1","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBorderColor","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._processMeasures(parentMeasure, context);\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        this._draw(context);\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            child._render(context);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._isDirty = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._isDirty = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        } else if (!this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height + child.paddingTopInPixels;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width + child.paddingLeftInPixels;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._layout(measure, context);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        this._rootContainer._render(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left = (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var left = this._currentMeasure.left;\r\n        var top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h,\r\n            this._squareLeft,\r\n            this._squareTop,\r\n            this._squareSize,\r\n            this._squareSize,\r\n            context);\r\n\r\n        var cx = this._squareLeft + this._squareSize * this._s;\r\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n        var dist = radius - wheelThickness * .5;\r\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size &&\r\n            y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = x - centerX;\r\n        var dy = y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(x, y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture, Measure } from \"2D\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBorderColor: string;\r\n    private _barBackground: string ;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barBorderColor(): string {\r\n        return this._barBorderColor;\r\n    }\r\n\r\n    public set barBorderColor(color: string) {\r\n        if (this._barBorderColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBorderColor = color;\r\n        this._horizontalBar.borderColor = color;\r\n        this._verticalBar.borderColor = color;\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver  = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n        }\r\n        else {\r\n            context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width , this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}