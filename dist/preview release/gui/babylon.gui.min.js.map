{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","rectangle_1","textBlock_1","image_1","Button","thickness","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","scaleX","scaleY","pointerUpAnimation","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","Image","stretch","STRETCH_UNIFORM","CreateImageOnlyButton","STRETCH_FILL","CreateSimpleButton","CreateImageWithCenterTextButton","url","_loaded","_stretch","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","getScene","_onPointerDblTapObserver","onPointerObservable","onFocus","navigator","userAgent","prompt","focusedControl","registerClipboardEvents","clipboardInfo","ClipboardEventTypes","COPY","_onCopyText","event","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","BABYLON","POINTERDOUBLETAP","_processDblClick","_selectAllText","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","processKeyboard","ev","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","premulAlpha","onClipboardCopy","ClipboardInfo","onClipboardCut","onClipboardPaste","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","self","addEventListener","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","friendlyControls","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","Vector3WithInfo","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","inputText_1","button_1","grid_1","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","ShowPickerDialog","advancedTexture","options","pickerWidth","pickerHeight","lastColor","swatchLimit","swatchSize","numSwatchesPerLine","currentColor","swatchNumber","swatchDrawer","picker","rValInt","gValInt","bValInt","rValDec","gValDec","bValDec","hexVal","newSwatch","lastVal","activeField","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","buttonFontSize","lightStrokeColor","inputFieldLabels","swatchDrawerOpen","editSwatchMode","savedColors","UpdateValues","pickedColor","toHexString","background","floor","minusPound","UpdateInt","field","channel","newValue","test","isNaN","newSwatchRGB","FromHexString","UpdateFloat","DisableButton","CreateSwatch","icon","swatch","DeleteSwatch","SaveColor","butSave","log","adjustedNumberButtons","buttonIterations","dialogueContainer","AddSwatchControl","butEdit","fontSize","ClosePicker","pickerPanel","topRow","pickerBody","pickerBodyRight","pickerSwatchesButtons","pickerSwatches","pickerColorValues","newText","currentSwatch","swatchOutline","currentText","butOK","butCancel","rgbValuesQuadrant","labelText","hexValueQuadrant","val","newHexValue","checkHex","leadingZero","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","addChild","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n             switch (clipboardInfo.type){\n                 case ClipboardEventTypes.COPY:\n                         this._onCopyText(clipboardInfo.event);\n                         this.onTextCopyObservable.notifyObservers(this);\n                         break;\n                 case ClipboardEventTypes.CUT:\n                         this._onCutText(clipboardInfo.event);\n                         this.onTextCutObservable.notifyObservers(this);\n                         break;\n                 case ClipboardEventTypes.PASTE:\n                         this._onPasteText(clipboardInfo.event);\n                         this.onTextPasteObservable.notifyObservers(this);\n                         break;\n                 default: return;\n              }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset =  this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0  && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left =  (this._text[this._startHighlightIndex - 1 ].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch {} //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n\n                 //show the highlighted text\n                if (this._isTextHighlightOn) {\n                    clearTimeout(this._blinkTimeout);\n                    let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                    let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                    this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                    //for transparancy\n                    context.globalAlpha = this._highligherOpacity;\n                    context.fillStyle = this._textHighlightColor;\n                    context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                    context.globalAlpha = 1.0;\n                }\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n     /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                    return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n     /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n   /**\r\n    * Register the clipboard Events onto the canvas\r\n    */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\",  this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { InputText } from \"./inputText\";\r\nimport { Rectangle } from \"./rectangle\";\r\nimport { Button } from \"./button\";\r\nimport { Grid } from \"./grid\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { TextBlock } from \".\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\r\n     * @param options \r\n     */\r\n\r\n    public static ShowPickerDialog(advancedTexture: AdvancedDynamicTexture, \r\n        options: {\r\n            pickerWidth?: string, \r\n            pickerHeight?: string, \r\n            lastColor?: string, \r\n            swatchLimit?: number, \r\n            swatchSize?: number, \r\n            numSwatchesPerLine?: number, \r\n            savedColors?:Array<string>}\r\n        ) {\r\n\r\n        // Default options\r\n        options.pickerWidth = options.pickerWidth || \"640px\";\r\n        options.pickerHeight = options.pickerHeight || \"400px\";\r\n        options.lastColor = options.lastColor || \"#000000\";\r\n        options.swatchLimit = options.swatchLimit || 20;\r\n        options.swatchSize = options.swatchSize || 40;\r\n        options.numSwatchesPerLine = options.numSwatchesPerLine || 10;  \r\n\r\n        // Button Colors\r\n        var buttonBackgroundColor = \"#535353\";\r\n        var buttonBackgroundHoverColor = \"#414141\";\r\n        var buttonBackgroundClickColor = \"515151\";\r\n        var buttonDisabledColor = \"#555555\";\r\n        var buttonDisabledBackgroundColor = \"#454545\";\r\n        var buttonFontSize = 16;\r\n\r\n        // Stroke Colors\r\n        var darkStrokeColor = \"#404040\";\r\n        var lightStrokeColor = \"#c0c0c0\";\r\n        var inputFieldLabels = [\"R\", \"G\", \"B\"];\r\n        var inputTextBackgroundColor = \"#454545\";\r\n        var inputTextColor = \"#f0f0f0\";\r\n\r\n        // This is the current color as set by either the picker or by entering a value\r\n        var currentColor;\r\n\r\n        // This int is used for naming swatches and serves as the index for calling them from the list\r\n        var swatchNumber: number;\r\n\r\n        // Menu Panel options. We need to know if the swatchDrawer is null so we can create it the first time.\r\n        var swatchDrawerOpen: boolean = false;\r\n        var swatchDrawer: Grid;\r\n        var editSwatchMode = false;\r\n\r\n        // Color InputText fields that will be updated upon value change\r\n        var picker: ColorPicker;\r\n        var rValInt: InputText;\r\n        var gValInt: InputText;\r\n        var bValInt: InputText;\r\n        var rValDec: InputText;\r\n        var gValDec: InputText;\r\n        var bValDec: InputText;\r\n        var hexVal: InputText;\r\n        var newSwatch: Rectangle;\r\n        var lastVal: string;\r\n        var activeField: string;\r\n\r\n        // Drawer height calculations\r\n        if (options.savedColors) {\r\n            var rowCount = Math.ceil(options.savedColors.length/options.numSwatchesPerLine);\r\n        }\r\n\r\n        /** \r\n        * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\r\n        * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\r\n        * are will receive no update. This is to prevent the input from the user being overwritten.\r\n        */\r\n        function UpdateValues(value: Color3) {\r\n            var pickedColor = value.toHexString(); \r\n            newSwatch.background = pickedColor;\r\n            if (rValInt.name != activeField) {\r\n                rValInt.text = Math.floor(value.r * 255).toString();\r\n            }\r\n            if (gValInt.name != activeField) {\r\n                gValInt.text = Math.floor(value.g * 255).toString();\r\n            }\r\n            if (bValInt.name != activeField) {\r\n                bValInt.text = Math.floor(value.b * 255).toString();\r\n            }\r\n            if (rValDec.name != activeField) {\r\n                rValDec.text = value.r.toString();\r\n            }\r\n            if (gValDec.name != activeField) {\r\n                gValDec.text = value.g.toString();\r\n            }\r\n            if (bValDec.name != activeField) {\r\n                bValDec.text = value.b.toString();\r\n            }\r\n            if (hexVal.name != activeField) {\r\n                var minusPound = pickedColor.split(\"#\");\r\n                hexVal.text = minusPound[1];  \r\n            }\r\n            if (picker.name != activeField) {\r\n                picker.value = value;\r\n            }\r\n        }\r\n\r\n        // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not. \r\n        function UpdateInt(field: InputText, channel: string) { \r\n            var newValue = field.text;\r\n            var checkVal = /[^0-9]/g.test(newValue);\r\n            if (checkVal) {\r\n                field.text = lastVal;\r\n            }\r\n            else {\r\n                if (newValue != \"\") {\r\n                    if (Math.floor(parseInt(newValue)) < 0) {\r\n                        newValue = \"0\";\r\n                    }\r\n                    else if (Math.floor(parseInt(newValue)) > 255) {\r\n                        newValue = \"255\";\r\n                    }\r\n                    else if (isNaN(parseInt(newValue))) {\r\n                        newValue = \"0\";\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n            }\r\n            if (newValue != \"\") {\r\n                newValue = parseInt(newValue).toString();\r\n                field.text = newValue;\r\n                var newSwatchRGB = BABYLON.Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\"){\r\n                        UpdateValues(new BABYLON.Color3((parseInt(newValue)) / 255, newSwatchRGB.g, newSwatchRGB.b));    \r\n                    }\r\n                    else if (channel == \"g\") {\r\n                        UpdateValues(new BABYLON.Color3(newSwatchRGB.r, (parseInt(newValue)) / 255, newSwatchRGB.b));    \r\n                    }\r\n                    else {\r\n                        UpdateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, (parseInt(newValue)) / 255));    \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not. \r\n        function UpdateFloat(field: InputText, channel: string) { \r\n            var newValue = field.text;\r\n            var checkVal = /[^0-9\\.]/g.test(newValue);\r\n            if (checkVal) {\r\n                field.text = lastVal;\r\n            }\r\n            else {\r\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                    if (parseFloat(newValue) < 0.0) {\r\n                        newValue = \"0.0\";\r\n                    }\r\n                    else if (parseFloat(newValue) > 1.0) {\r\n                        newValue = \"1.0\";\r\n                    }\r\n                    else if (isNaN(parseFloat(newValue))) {\r\n                        newValue = \"0.0\";\r\n                    }\r\n                    if (activeField == field.name) {\r\n                        lastVal = newValue;\r\n                    }\r\n                }\r\n            }\r\n            if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\r\n                newValue = parseFloat(newValue).toString();\r\n                field.text = newValue;    \r\n                var newSwatchRGB = BABYLON.Color3.FromHexString(newSwatch.background);\r\n                if (activeField == field.name) {\r\n                    if (channel == \"r\"){\r\n                        UpdateValues(new BABYLON.Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b));    \r\n                    }\r\n                    else if (channel == \"g\") {\r\n                        UpdateValues(new BABYLON.Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b));    \r\n                    }\r\n                    else {\r\n                        UpdateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)));    \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Called when the user hits the limit of saved colors in the drawer. \r\n        function DisableButton(button: Button) {\r\n            button.color = buttonDisabledColor;\r\n            button.background = buttonDisabledBackgroundColor;\r\n        }\r\n\r\n        // Removes the current index from the savedColors array. Drawer can then be regenerated. \r\n        function DeleteSwatch(index: number) {\r\n            if (options.savedColors) {\r\n                options.savedColors.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        // Creates and styles an individual swatch when SaveColor is called. \r\n        function CreateSwatch() {\r\n            if (options.savedColors) {\r\n                if (editSwatchMode) {\r\n                    var icon: string = \"b\";\r\n                }\r\n                else {\r\n                    var icon: string = \"\";\r\n                }\r\n                var swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\r\n                swatch.height = swatch.width = (options.swatchSize!).toString() + \"px\";\r\n                swatch.background = options.savedColors[swatchNumber];\r\n                swatch.thickness = 2;\r\n                swatch.metadata = swatchNumber;\r\n                swatch.pointerDownAnimation = () => {\r\n                    swatch.thickness = 4;\r\n                };\r\n                swatch.pointerUpAnimation = () => {\r\n                    swatch.thickness = 3;\r\n                };\r\n                swatch.pointerEnterAnimation = () => {\r\n                    swatch.thickness = 3;\r\n                };\r\n                swatch.pointerOutAnimation = () => {\r\n                    swatch.thickness = 2;\r\n                };\r\n                swatch.onPointerClickObservable.add(() => { \r\n                    if (editSwatchMode) {\r\n                        if (options.savedColors) {\r\n                            UpdateValues(BABYLON.Color3.FromHexString(options.savedColors[swatch.metadata]));\r\n                        }\r\n                    }\r\n                    else {\r\n                        DeleteSwatch(swatch.metadata);\r\n                        SaveColor(\"\", butSave);\r\n                    } \r\n                });\r\n                console.log(\"swatch name: \" + swatch.name);\r\n                return swatch;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        /** \r\n         * When Save Color button is pressed this function will first create a swatch drawer if one is not already \r\n         * made. Then all controls are removed from the drawer and we step through the savedColors array and \r\n         * creates one swatch per color. It will also set the height of the drawer control based on how many \r\n         * saved colors there are and how many can be stored on one row. \r\n         */\r\n        function SaveColor(color: string, button: Button) {\r\n            if (options.savedColors) {\r\n                if (!swatchDrawerOpen) {\r\n                    swatchDrawer = new Grid();\r\n                    swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n                    swatchDrawer.background = buttonBackgroundColor;\r\n                    swatchDrawer.width = options.pickerWidth!;\r\n                    swatchDrawer.height = (options.swatchSize! * 1.5).toString() + \"px\";\r\n                    swatchDrawer.top = Math.floor(options.swatchSize! / 4).toString() + \"px\";\r\n                    swatchDrawer.addRowDefinition(1.0, false);\r\n                    for (var i = 0; i < options.numSwatchesPerLine!; i++) {\r\n                        swatchDrawer.addColumnDefinition(1 / options.numSwatchesPerLine!, false);            \r\n                    }  \r\n                }\r\n                if (color != null) {\r\n                    options.savedColors.push(color);\r\n                }\r\n                swatchNumber = 0;\r\n                swatchDrawer.clearControls();\r\n                for (var y = 0; y < rowCount; y++) {\r\n                    if (swatchDrawer.rowCount < rowCount) {\r\n                        swatchDrawer.addRowDefinition(1 / rowCount, false);\r\n                    }\r\n                    for (var i = 0; i < rowCount; i++) {\r\n                        swatchDrawer.setRowDefinition(i, 1 / rowCount, false);\r\n                    }\r\n                    swatchDrawer.height = ((options.swatchSize! + Math.floor(options.swatchSize! / 2)) * rowCount).toString() + \"px\";\r\n                    \r\n                    // Determine number of buttons to create per row based on the button limit per row and number of saved colors\r\n                    var  adjustedNumberButtons = options.savedColors.length - (y * options.numSwatchesPerLine!);\r\n                    var buttonIterations = Math.min(Math.max(adjustedNumberButtons, 0), options.numSwatchesPerLine!);\r\n                    for (var x = 0; x < buttonIterations; x++) {\r\n                        if (x > options.numSwatchesPerLine!) {\r\n                            continue;\r\n                        }\r\n                        var swatch = CreateSwatch();\r\n                        if (swatch) {\r\n                            swatchDrawer.addControl(swatch, y, x);\r\n                            swatchNumber++;    \r\n                        }\r\n                    }   \r\n                }\r\n                if (options.savedColors.length >= options.swatchLimit!) {\r\n                    DisableButton(button);\r\n                }\r\n                dialogueContainer.addControl(swatchDrawer, 1, 0);\r\n            }\r\n\r\n        }\r\n\r\n        function AddSwatchControl() {\r\n\r\n            // Add Edit button to the picker panel\r\n            var butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit Swatches\");\r\n            butEdit.width = \"140px\";\r\n            butEdit.height = \"35px\";\r\n            butEdit.top = \"-10px\";\r\n            butEdit.left = \"10px\";\r\n            butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n            butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            butEdit.thickness = 2;\r\n            butEdit.color = lightStrokeColor;\r\n            butEdit.fontSize = buttonFontSize;\r\n            butEdit.background = buttonBackgroundColor;\r\n            butEdit.onPointerEnterObservable.add(() => { \r\n                butEdit.background = buttonBackgroundHoverColor; \r\n            });\r\n            butEdit.onPointerOutObservable.add(() => { \r\n                butEdit.background = buttonBackgroundColor; \r\n            });\r\n            butEdit.pointerDownAnimation = () => {\r\n                butEdit.background = buttonBackgroundClickColor;\r\n            };\r\n            butEdit.pointerUpAnimation = () => {\r\n                butEdit.background = buttonBackgroundHoverColor;\r\n            };\r\n            butEdit.onPointerClickObservable.add(() => { \r\n                ClosePicker(newSwatch.background); \r\n            });\r\n            pickerPanel.addControl(butEdit, 1, 0);\r\n            \r\n        }\r\n\r\n        // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\r\n        function ClosePicker(color: string) {\r\n            options.lastColor = color;\r\n            advancedTexture.removeControl(dialogueContainer);\r\n        }\r\n\r\n        // Dialogue menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\r\n        var dialogueContainer = new Grid();\r\n        dialogueContainer.name = \"Dialogue Container\";\r\n        dialogueContainer.width = options.pickerWidth;\r\n        if (options.savedColors) {\r\n            dialogueContainer.height = (parseInt(options.pickerHeight) + options.swatchSize + Math.floor(options.swatchSize / 4) + (rowCount! * Math.floor(options.swatchSize / 2))).toString() + \"px\";\r\n            var topRow = parseInt(options.pickerHeight) / parseInt(dialogueContainer.height);\r\n            dialogueContainer.addRowDefinition(topRow, false);\r\n            dialogueContainer.addRowDefinition(1.0 - topRow, false);\r\n           }\r\n        else {\r\n            dialogueContainer.height = parseInt(options.pickerHeight);\r\n            dialogueContainer.addRowDefinition(1.0, false);\r\n        }\r\n        advancedTexture.addControl(dialogueContainer);\r\n\r\n        // Picker container\r\n        var pickerPanel = new Grid();\r\n        pickerPanel.name = \"Picker Panel\";\r\n        // pickerPanel.width = pickerWidth;\r\n        pickerPanel.height = options.pickerHeight;\r\n        pickerPanel.addRowDefinition(35, true);\r\n        pickerPanel.addRowDefinition(1.0, false);\r\n        dialogueContainer.addControl(pickerPanel, 0, 0);\r\n\r\n        // Picker container head\r\n        var header = new Rectangle();\r\n        header.name = \"Dialogue Header Bar\";\r\n        header.background = \"#cccccc\";\r\n        header.thickness = 0;\r\n        pickerPanel.addControl(header, 0, 0);\r\n\r\n        // Picker container body\r\n        var pickerBody = new Grid();\r\n        pickerBody.name = \"Dialogue Body\";\r\n        pickerBody.background = buttonBackgroundColor;\r\n        pickerBody.addRowDefinition(1.0, false);\r\n        pickerBody.addColumnDefinition(280, true);\r\n        pickerBody.addColumnDefinition(1.0, false);\r\n        pickerPanel.addControl(pickerBody, 1, 0);\r\n\r\n        //  Picker control\r\n        picker = new ColorPicker();\r\n        picker.name = \"GUI Color Picker\";\r\n        picker.height = \"250px\";\r\n        picker.width = \"250px\";\r\n        picker.top = \"45px\";\r\n        picker.left = \"8px\";\r\n        picker.value = Color3.FromHexString(options.lastColor);\r\n        picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        picker.onPointerDownObservable.add(() => {\r\n            activeField = picker.name!;\r\n        });\r\n        picker.onValueChangedObservable.add(function(value) { // value is a color3\r\n            if (activeField == picker.name) {\r\n                UpdateValues(value);\r\n            }\r\n        });\r\n        pickerBody.addControl(picker, 0, 0);\r\n\r\n        // Picker body right quarant\r\n        var pickerBodyRight = new Grid();\r\n        pickerBodyRight.name = \"Dialogue Right Half\";\r\n        pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        pickerBodyRight.addRowDefinition(185, true);\r\n        pickerBodyRight.addRowDefinition(1.0, false);\r\n        pickerBody.addControl(pickerBodyRight, 1, 1);\r\n\r\n        // Picker container swatches and buttons\r\n        var pickerSwatchesButtons = new Grid();\r\n        pickerSwatchesButtons.name = \"Swatches and Buttons\";\r\n        pickerSwatchesButtons.addRowDefinition(1.0, false);\r\n        pickerSwatchesButtons.addColumnDefinition(150, true);\r\n        pickerSwatchesButtons.addColumnDefinition(1.0, false);\r\n        pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\r\n\r\n        // Picker Swatches quadrant\r\n        var pickerSwatches = new Grid();\r\n        pickerSwatches.name = \"New and Current Swatches\";\r\n        pickerSwatches.top = \"5px\";\r\n        pickerSwatches.addRowDefinition(0.5, false);\r\n        pickerSwatches.addRowDefinition(60, true);\r\n        pickerSwatches.addRowDefinition(60, true);\r\n        pickerSwatches.addRowDefinition(0.5, false);\r\n        pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\r\n\r\n        // Picker color values input\r\n        var pickerColorValues = new Grid();\r\n        pickerColorValues.addRowDefinition(10, true);\r\n        pickerColorValues.addRowDefinition(115, true);\r\n        pickerColorValues.addRowDefinition(35, true);\r\n        pickerBodyRight.addControl(pickerColorValues, 1, 0);\r\n\r\n        // New color swatch and old color swatch\r\n        var newText = new TextBlock();\r\n        newText.text = \"new\";\r\n        newText.color = lightStrokeColor;\r\n        newText.fontSize = 16;\r\n        pickerSwatches.addControl(newText, 0, 0);    \r\n\r\n        newSwatch = new Rectangle();\r\n        newSwatch.background = options.lastColor;\r\n        newSwatch.width = \"100px\";\r\n        newSwatch.height = \"60px\";\r\n        newSwatch.thickness = 0;\r\n        pickerSwatches.addControl(newSwatch, 1, 0);\r\n\r\n        var currentSwatch = Button.CreateSimpleButton(\"currentSwatch\", \"\");\r\n        currentSwatch.background = options.lastColor;\r\n        currentSwatch.width = \"100px\";\r\n        currentSwatch.height = \"60px\";\r\n        currentSwatch.thickness = 0;\r\n        currentSwatch.onPointerClickObservable.add(() => { \r\n            var revertColor = Color3.FromHexString(currentSwatch.background);\r\n            UpdateValues(revertColor); \r\n        });\r\n        currentSwatch.pointerDownAnimation = () => {};\r\n        currentSwatch.pointerUpAnimation = () => {};\r\n        currentSwatch.pointerEnterAnimation = () => {};\r\n        currentSwatch.pointerOutAnimation = () => {};\r\n        pickerSwatches.addControl(currentSwatch, 2, 0);\r\n\r\n        var swatchOutline = new Rectangle();\r\n        swatchOutline.width = \"100px\";\r\n        swatchOutline.height = \"120px\";\r\n        swatchOutline.top = \"5px\";\r\n        swatchOutline.thickness = 2;\r\n        swatchOutline.color = darkStrokeColor;\r\n        swatchOutline.isHitTestVisible = false;\r\n        pickerSwatchesButtons.addControl(swatchOutline, 0, 0);\r\n\r\n        var currentText = new TextBlock();\r\n        currentText.text = \"current\";\r\n        currentText.color = lightStrokeColor;\r\n        currentText.fontSize = 16;\r\n        pickerSwatches.addControl(currentText, 3, 0);   \r\n        \r\n        // Panel Buttons\r\n        var butOK = Button.CreateSimpleButton(\"butOK\", \"OK\");\r\n        butOK.width = \"140px\";\r\n        butOK.height = \"35px\";\r\n        butOK.top = \"29px\";\r\n        butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        butOK.thickness = 2;\r\n        butOK.color = lightStrokeColor;\r\n        butOK.fontSize = buttonFontSize;\r\n        butOK.background = buttonBackgroundColor;\r\n        butOK.onPointerEnterObservable.add(() => { butOK.background = buttonBackgroundHoverColor; });\r\n        butOK.onPointerOutObservable.add(() => { butOK.background = buttonBackgroundColor; });\r\n        butOK.pointerDownAnimation = () => {\r\n            butOK.background = buttonBackgroundClickColor;\r\n        };\r\n        butOK.pointerUpAnimation = () => {\r\n            butOK.background = buttonBackgroundHoverColor;\r\n        };\r\n        butOK.onPointerClickObservable.add(() => { \r\n            ClosePicker(newSwatch.background); \r\n        });\r\n        pickerSwatchesButtons.addControl(butOK, 0, 1);     \r\n    \r\n        var butCancel = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\r\n        butCancel.width = \"140px\";\r\n        butCancel.height = \"35px\";\r\n        butCancel.top = \"77px\";\r\n        butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        butCancel.thickness = 2;\r\n        butCancel.color = lightStrokeColor;\r\n        butCancel.fontSize = buttonFontSize;\r\n        butCancel.background = buttonBackgroundColor;\r\n        butCancel.onPointerEnterObservable.add(() => { butCancel.background = buttonBackgroundHoverColor; });\r\n        butCancel.onPointerOutObservable.add(() => { butCancel.background = buttonBackgroundColor; });\r\n        butCancel.pointerDownAnimation = () => {\r\n            butCancel.background = buttonBackgroundClickColor;\r\n        };\r\n        butCancel.pointerUpAnimation = () => {\r\n            butCancel.background = buttonBackgroundHoverColor;\r\n        };\r\n        butCancel.onPointerClickObservable.add(() => { \r\n            ClosePicker(currentSwatch.background); \r\n        });\r\n        pickerSwatchesButtons.addControl(butCancel, 0, 1);     \r\n    \r\n        if (options.savedColors) {\r\n            var butSave = Button.CreateSimpleButton(\"butSave\", \"Save Swatch\");\r\n            butSave.width = \"140px\";\r\n            butSave.height = \"35px\";\r\n            butSave.top = \"127px\";\r\n            butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            butSave.thickness = 2;\r\n            butSave.fontSize = buttonFontSize;\r\n            if (options.savedColors.length < options.swatchLimit) {\r\n                butSave.color = lightStrokeColor;\r\n                butSave.background = buttonBackgroundColor;\r\n            }\r\n            else {\r\n                DisableButton(butSave);\r\n            }\r\n            butSave.onPointerEnterObservable.add(() => {\r\n                if (options.savedColors) {\r\n                    if (options.savedColors.length < options.swatchLimit!) {\r\n                        butSave.background = buttonBackgroundHoverColor; \r\n                    }\r\n                }\r\n            });\r\n            butSave.onPointerOutObservable.add(() => {\r\n                if (options.savedColors) {\r\n                    if (options.savedColors.length < options.swatchLimit!) {\r\n                        butSave.background = buttonBackgroundColor; \r\n                    }\r\n                }\r\n            });\r\n            butSave.pointerDownAnimation = () => {\r\n                if (options.savedColors) {\r\n                    if (options.savedColors.length < options.swatchLimit!) {\r\n                        butSave.background = buttonBackgroundClickColor;\r\n                    }\r\n                }\r\n            };\r\n            butSave.pointerUpAnimation = () => {\r\n                if (options.savedColors) {\r\n                    if (options.savedColors.length < options.swatchLimit!) {\r\n                        butSave.background = buttonBackgroundHoverColor;\r\n                    }\r\n                }\r\n            };\r\n            butSave.onPointerClickObservable.add(() => {\r\n                if (options.savedColors) {\r\n                    if (options.savedColors.length == 0) {\r\n                        AddSwatchControl();\r\n                    }\r\n                    if (options.savedColors.length < options.swatchLimit!) {\r\n                        SaveColor(newSwatch.background, butSave); \r\n                    }     \r\n                } \r\n            });\r\n            if (options.savedColors.length > 0) {\r\n                AddSwatchControl();\r\n            }\r\n            pickerSwatchesButtons.addControl(butSave, 0, 1);         \r\n        }\r\n      \r\n        // RGB values text boxes\r\n        currentColor = Color3.FromHexString(options.lastColor);\r\n        var rgbValuesQuadrant = new Grid();\r\n        rgbValuesQuadrant.width = \"300px\";\r\n        rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        rgbValuesQuadrant.addRowDefinition(1/3, false);\r\n        rgbValuesQuadrant.addRowDefinition(1/3, false);\r\n        rgbValuesQuadrant.addRowDefinition(1/3, false);\r\n        rgbValuesQuadrant.addColumnDefinition(0.1, false);\r\n        rgbValuesQuadrant.addColumnDefinition(0.2, false);\r\n        rgbValuesQuadrant.addColumnDefinition(0.7, false);\r\n        pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\r\n\r\n        for (var i = 0; i < inputFieldLabels.length; i++) {\r\n            var labelText = new TextBlock();\r\n            labelText.text = inputFieldLabels[i];\r\n            labelText.color = lightStrokeColor;\r\n            labelText.fontSize = 16;\r\n            rgbValuesQuadrant.addControl(labelText, i, 0);\r\n        }\r\n\r\n        // Input fields for RGB values\r\n        rValInt = new InputText();\r\n        rValInt.width = \"50px\";\r\n        rValInt.height = \"27px\";\r\n        rValInt.name = \"rIntField\"\r\n        rValInt.fontSize = buttonFontSize;\r\n        rValInt.text = (currentColor.r * 255).toString();\r\n        rValInt.color = inputTextColor;\r\n        rValInt.background = inputTextBackgroundColor;\r\n        rValInt.onFocusObservable.add(() => {\r\n            activeField = rValInt.name!;\r\n            lastVal = rValInt.text;\r\n        });\r\n        rValInt.onBlurObservable.add(() => {\r\n            activeField = \"\";\r\n        });\r\n        rValInt.onTextChangedObservable.add(() => {\r\n            UpdateInt(rValInt, \"r\");\r\n        });\r\n        rgbValuesQuadrant.addControl(rValInt, 0, 1);\r\n\r\n        gValInt = new InputText();\r\n        gValInt.width = \"50px\";\r\n        gValInt.height = \"27px\";\r\n        gValInt.name = \"gIntField\"\r\n        gValInt.fontSize = buttonFontSize;\r\n        gValInt.text = (currentColor.g * 255).toString();\r\n        gValInt.color = inputTextColor;\r\n        gValInt.background = inputTextBackgroundColor;\r\n        gValInt.onFocusObservable.add(() => {\r\n            activeField = gValInt.name!;\r\n            lastVal = gValInt.text;\r\n        });\r\n        gValInt.onBlurObservable.add(() => {\r\n            activeField = \"\";\r\n        });\r\n        gValInt.onTextChangedObservable.add(() => {\r\n            UpdateInt(gValInt, \"g\");\r\n        });\r\n        rgbValuesQuadrant.addControl(gValInt, 1, 1);\r\n\r\n        bValInt = new InputText();\r\n        bValInt.width = \"50px\";\r\n        bValInt.height = \"27px\";\r\n        bValInt.name = \"bIntField\"\r\n        bValInt.fontSize = buttonFontSize;\r\n        bValInt.text = (currentColor.b * 255).toString();\r\n        bValInt.color = inputTextColor;\r\n        bValInt.background = inputTextBackgroundColor;\r\n        bValInt.onFocusObservable.add(() => {\r\n            activeField = bValInt.name!;\r\n            lastVal = bValInt.text;\r\n        });\r\n        bValInt.onBlurObservable.add(() => {\r\n            activeField = \"\";\r\n        });\r\n        bValInt.onTextChangedObservable.add(() => {\r\n            UpdateInt(bValInt, \"b\");\r\n        });\r\n        rgbValuesQuadrant.addControl(bValInt, 2, 1);\r\n\r\n        rValDec = new InputText();\r\n        rValDec.width = \"200px\";\r\n        rValDec.height = \"27px\";\r\n        rValDec.name = \"rDecField\"\r\n        rValDec.fontSize = buttonFontSize;\r\n        rValDec.text = currentColor.r.toString();\r\n        rValDec.color = inputTextColor;\r\n        rValDec.background = inputTextBackgroundColor;\r\n        rValDec.onFocusObservable.add(() => {\r\n            activeField = rValDec.name!;\r\n            lastVal = rValDec.text;\r\n        });\r\n        rValDec.onBlurObservable.add(() => {\r\n            if (parseFloat(rValDec.text) == 0) {\r\n                rValDec.text = \"0\";\r\n                UpdateFloat(rValDec, \"r\");\r\n            }\r\n            activeField = \"\";\r\n        });\r\n        rValDec.onTextChangedObservable.add(() => {\r\n            UpdateFloat(rValDec, \"r\");\r\n        });\r\n        rgbValuesQuadrant.addControl(rValDec, 0, 2);\r\n\r\n        gValDec = new InputText();\r\n        gValDec.width = \"200px\";\r\n        gValDec.height = \"27px\";\r\n        gValDec.name = \"gDecField\"\r\n        gValDec.fontSize = buttonFontSize;\r\n        gValDec.text = currentColor.g.toString();\r\n        gValDec.color = inputTextColor;\r\n        gValDec.background = inputTextBackgroundColor;\r\n        gValDec.onFocusObservable.add(() => {\r\n            activeField = gValDec.name!;\r\n            lastVal = gValDec.text;\r\n        });\r\n        gValDec.onBlurObservable.add(() => {\r\n            if (parseFloat(gValDec.text) == 0) {\r\n                gValDec.text = \"0\";\r\n                UpdateFloat(gValDec, \"g\");\r\n            }\r\n            activeField = \"\";\r\n        });\r\n        gValDec.onTextChangedObservable.add(() => {\r\n            UpdateFloat(gValDec, \"g\");\r\n        });\r\n        rgbValuesQuadrant.addControl(gValDec, 1, 2);\r\n\r\n        bValDec = new InputText();\r\n        bValDec.width = \"200px\";\r\n        bValDec.height = \"27px\";\r\n        bValDec.name = \"bDecField\";\r\n        bValDec.fontSize = buttonFontSize;\r\n        bValDec.text = currentColor.b.toString();\r\n        bValDec.color = inputTextColor;\r\n        bValDec.background = inputTextBackgroundColor;\r\n        bValDec.onFocusObservable.add(() => {\r\n            activeField = bValDec.name!;\r\n            lastVal = bValDec.text;\r\n        });\r\n        bValDec.onBlurObservable.add(() => {\r\n            if (parseFloat(bValDec.text) == 0) {\r\n                bValDec.text = \"0\";\r\n                UpdateFloat(bValDec, \"b\");\r\n            }\r\n            activeField = \"\";\r\n        });\r\n        bValDec.onTextChangedObservable.add(() => {\r\n            UpdateFloat(bValDec, \"b\");\r\n        });\r\n        rgbValuesQuadrant.addControl(bValDec, 2, 2);\r\n\r\n        // Hex value input\r\n        var hexValueQuadrant = new Grid();\r\n        hexValueQuadrant.width = \"300px\";\r\n        hexValueQuadrant.addRowDefinition(1.0, false);\r\n        hexValueQuadrant.addColumnDefinition(0.1, false);\r\n        hexValueQuadrant.addColumnDefinition(0.9, false);\r\n        pickerColorValues.addControl(hexValueQuadrant, 2, 0);\r\n\r\n        var labelText = new TextBlock();\r\n        labelText.text = \"#\";\r\n        labelText.color = lightStrokeColor;\r\n        labelText.fontSize = buttonFontSize;\r\n        hexValueQuadrant.addControl(labelText, 0, 0);\r\n\r\n        hexVal = new InputText();\r\n        hexVal.width = \"260px\";\r\n        hexVal.height = \"27px\";\r\n        hexVal.name = \"hexField\"\r\n        hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        hexVal.left = \"5px\";\r\n        hexVal.fontSize = buttonFontSize;\r\n        var minusPound = options.lastColor.split(\"#\");\r\n        hexVal.text = minusPound[1];\r\n        hexVal.color = inputTextColor;\r\n        hexVal.background = inputTextBackgroundColor;\r\n        hexVal.onFocusObservable.add(() => {\r\n            activeField = hexVal.name!;\r\n            lastVal = hexVal.text;\r\n        });\r\n        hexVal.onBlurObservable.add(() => {\r\n            activeField = \"\";\r\n            if (hexVal.text.length == 3) {\r\n                var val = hexVal.text.split(\"\");\r\n                hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n            }\r\n        });\r\n        hexVal.onTextChangedObservable.add(() => {\r\n            var newHexValue = hexVal.text;\r\n            var checkHex = /[^0-9A-F]/i.test(newHexValue);\r\n            if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\r\n                hexVal.text = lastVal;\r\n            }\r\n            else {\r\n                if (hexVal.text.length < 6) {\r\n                    var leadingZero = 6 - hexVal.text.length;\r\n                    for (var i = 0; i < leadingZero; i++) {\r\n                        newHexValue = \"0\" + newHexValue;\r\n                    }\r\n                }\r\n                if (hexVal.text.length == 3) {\r\n                    var val = hexVal.text.split(\"\");\r\n                    newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\r\n                }\r\n                lastVal = hexVal.text;\r\n                newHexValue = \"#\" + newHexValue;\r\n                if (activeField == hexVal.name) {\r\n                    UpdateValues(Color3.FromHexString(newHexValue)); \r\n                }\r\n            }\r\n        });\r\n        hexValueQuadrant.addControl(hexVal, 0, 1);\r\n\r\n        if (options.savedColors && options.savedColors.length > 0) {\r\n            SaveColor(\"\", butSave!); \r\n        }\r\n\r\n        return options.lastColor;\r\n    \r\n\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}