{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_fontOffset","offset","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_needRedraw","item","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","BABYLON","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n            this._renderHighlight(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n                    child._renderHighlight(context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                if (this.width !== computedWidth + \"px\") {\r\n                    this.width = computedWidth + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                if (this.height !== computedHeight + \"px\") {\r\n                    this.height = computedHeight + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /** @hidden */\r\n    public _needRedraw = false;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n\r\n        if (this._needRedraw) { // We need to redraw as some elements dynamically adapt to their content\r\n            this._needRedraw = false;\r\n            this._render();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left = (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n\n                //show the highlighted text\n                if (this._isTextHighlightOn) {\n                    clearTimeout(this._blinkTimeout);\n                    let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                    let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                    this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                    //for transparancy\n                    context.globalAlpha = this._highligherOpacity;\n                    context.fillStyle = this._textHighlightColor;\n                    context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                    context.globalAlpha = 1.0;\n                }\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size &&\r\n            y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = x - centerX;\r\n        var dy = y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(x, y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}