{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_getTypeName","getClassName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","strokeStyle","lineWidth","_renderHighlightSpecific","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_needRedraw","restore","item","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_onFocusSelectAll","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","BABYLON","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","rWord","right","search","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.onBeforeDrawObservable.hasObservers()) {\r\n                this.onBeforeDrawObservable.notifyObservers(this);\r\n            }\r\n\r\n            this._localDraw(context);\r\n            this._renderHighlight(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    child._draw(this._measureForChildren, context);\r\n                    child._renderHighlight(context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                if (this.width !== computedWidth + \"px\") {\r\n                    this.width = computedWidth + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                if (this.height !== computedHeight + \"px\") {\r\n                    this.height = computedHeight + \"px\";\r\n                    this._host._needRedraw = true;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /** @hidden */\r\n    public _needRedraw = false;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n\r\n        if (this._needRedraw) { // We need to redraw as some elements dynamically adapt to their content\r\n            this._needRedraw = false;\r\n            this._render();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _onFocusSelectAll = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._endHighlightIndex;\n                    }\n                    (this._startHighlightIndex < 0) ? 0 : --this._startHighlightIndex;\n                }\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                if (evt && evt.shiftKey) {\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                        this._endHighlightIndex = this._startHighlightIndex;\n                    }\n                    (this._endHighlightIndex > this._text.length) ? this._text.length - 1 : ++this._endHighlightIndex;\n                }\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n        this._isTextHighlightOn = false;\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        for (let rWord = /\\w+/g, left = 1, right = 1; this._startHighlightIndex > 0 && this._endHighlightIndex < this._text.length && (left || right);) {\n            right = (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            left = (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        }\n        this.onTextHighlightObservable.notifyObservers(this);\n        this._isTextHighlightOn = true;\n        this._blinkIsEven = false;\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = false;\n        this._isTextHighlightOn = true;\n\n        //if already highlighted pass\n        if (this._highlightedText) {\n            return;\n        }\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = 0;\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n\n                //show the highlighted text\n                if (this._isTextHighlightOn) {\n                    clearTimeout(this._blinkTimeout);\n                    let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                    let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                    this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                    //for transparancy\n                    context.globalAlpha = this._highligherOpacity;\n                    context.fillStyle = this._textHighlightColor;\n                    context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width, this._fontOffset.height);\n                    context.globalAlpha = 1.0;\n                }\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size &&\r\n            y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = x - centerX;\r\n        var dy = y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(x, y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    protected _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}