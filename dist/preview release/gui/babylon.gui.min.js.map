{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../tools/gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","rebuildCount","_processMeasures","BABYLON","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","clip","_render","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","scaleX","scaleY","pointerUpAnimation","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","Image","stretch","STRETCH_UNIFORM","CreateImageOnlyButton","STRETCH_FILL","CreateSimpleButton","CreateImageWithCenterTextButton","url","_loaded","_stretch","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","drawImage","hRatio","vRatio","ratio","centerX","centerY","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","navigator","userAgent","prompt","focusedControl","registerClipboardEvents","clipboardInfo","ClipboardEventTypes","COPY","_onCopyText","event","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onControlPickedObservable","premulAlpha","onClipboardCopy","ClipboardInfo","onClipboardCut","onClipboardPaste","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","self","addEventListener","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","friendlyControls","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","Vector3WithInfo","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","inputText_1","button_1","grid_1","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","Promise","resolve","reject","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","closeIconColor","buttonFontSize","butEdit","buttonWidth","buttonHeight","currentColor","swatchNumber","swatchDrawer","picker","rValInt","gValInt","bValInt","rValDec","gValDec","bValDec","hexVal","newSwatch","lastVal","activeField","drawerMaxRows","rawSwatchSize","gutterSize","floor","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","luminanceLimitColor","FromHexString","luminanceLimit","iconColorDark","iconColorLight","inputFieldLabels","editSwatchMode","updateValues","inputField","pickedColor","toHexString","background","minusPound","updateInt","field","channel","newValue","test","isNaN","newSwatchRGB","updateFloat","createSwatch","savedColors","icon","swatch","swatchColor","swatchLuminence","fontSize","metadata_1","setEditButtonVisibility","deleteSwatch","updateSwatches","butSave","editSwatches","gutterCount","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","disableButton","enableButton","pickerGrid","disabled","closePicker","dialogContainer","topRow","initialRows","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","textVerticalAlignment","currentSwatch","dialogBody","dialogBodyCols","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","swatchOutline","currentText","buttonGrid","butOK","butCancel","pickerColorValues","rgbValuesQuadrant","labelText","hexValueQuadrant","val","newHexValue","checkHex","leadingZero","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","addChild","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        let rebuildCount = 0;\r\n        do {\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Control uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        this._draw(context);\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            child._render(context);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        } else if (!this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackHeight += child._currentMeasure.height + child.paddingTopInPixels;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                stackWidth += child._currentMeasure.width + child.paddingLeftInPixels;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        if (this._isFocused) {\n            context.save();\n        }\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._layout(measure, context);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        this._rootContainer._render(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\nimport { InputText } from \"./inputText\";\nimport { Rectangle } from \"./rectangle\";\nimport { Button } from \"./button\";\nimport { Grid } from \"./grid\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { TextBlock } from \".\";\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._RGBtoHSV(this._value, this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    private _RGBtoHSV(color: Color3, result: Color3) {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h = 0;\n        var s = 0;\n        var v = max;\n\n        var dm = max - min;\n\n        if (max !== 0) {\n            s = dm / max;\n        }\n\n        if (max != min) {\n            if (max == r) {\n                h = (g - b) / dm;\n                if (g < b) {\n                    h += 6;\n                }\n            } else if (max == g) {\n                h = (b - r) / dm + 2;\n            } else if (max == b) {\n                h = (r - g) / dm + 4;\n            }\n            h *= 60;\n        }\n\n        result.r = h;\n        result.g = s;\n        result.b = v;\n    }\n\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\n        var chroma = value * saturation;\n        var h = hue / 60;\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\n        var r = 0;\n        var g = 0;\n        var b = 0;\n\n        if (h >= 0 && h <= 1) {\n            r = chroma;\n            g = x;\n        } else if (h >= 1 && h <= 2) {\n            r = x;\n            g = chroma;\n        } else if (h >= 2 && h <= 3) {\n            g = chroma;\n            b = x;\n        } else if (h >= 3 && h <= 4) {\n            g = x;\n            b = chroma;\n        } else if (h >= 4 && h <= 5) {\n            r = x;\n            b = chroma;\n        } else if (h >= 5 && h <= 6) {\n            r = chroma;\n            b = x;\n        }\n\n        var m = value - chroma;\n        result.set((r + m), (g + m), (b + m));\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    /**\n     * This function expands the color picker by creating a color picker dialog with manual\n     * color value input and the ability to save colors into an array to be used later in\n     * subsequent launches of the dialogue.\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\n     * @returns picked color as a hex string and the saved colors array as hex strings.\n     */\n\n    public static ShowPickerDialogAsync(advancedTexture: AdvancedDynamicTexture,\n        options: {\n            pickerWidth?: string,\n            pickerHeight?: string,\n            headerHeight?: string,\n            lastColor?: string,\n            swatchLimit?: number,\n            numSwatchesPerLine?: number,\n            savedColors?: Array<string>}\n    ): Promise<{\n        savedColors?: string[],\n        pickedColor: string\n    }> {\n\n        return new Promise((resolve, reject) => {\n            // Default options\n            options.pickerWidth = options.pickerWidth || \"640px\";\n            options.pickerHeight = options.pickerHeight || \"400px\";\n            options.headerHeight = options.headerHeight || \"35px\";\n            options.lastColor = options.lastColor || \"#000000\";\n            options.swatchLimit = options.swatchLimit || 20;\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\n\n            // Window size settings\n            var drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\n            var rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\n            var gutterSize: number = Math.floor(rawSwatchSize * 0.25);\n            var colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\n            var swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\n            var drawerMaxSize: number = (swatchSize * drawerMaxRows) + (gutterSize * (drawerMaxRows + 1));\n            var containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\n\n            // Button Colors\n            var buttonColor: string = \"#c0c0c0\";\n            var buttonBackgroundColor: string = \"#535353\";\n            var buttonBackgroundHoverColor: string = \"#414141\";\n            var buttonBackgroundClickColor: string = \"515151\";\n            var buttonDisabledColor: string = \"#555555\";\n            var buttonDisabledBackgroundColor: string = \"#454545\";\n            var currentSwatchesOutlineColor: string = \"#404040\";\n            var luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\n            var luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\n            var iconColorDark: string = \"#aaaaaa\";\n            var iconColorLight: string = \"#ffffff\";\n            var closeIconColor: Color3;\n\n            // Button settings\n            var buttonFontSize: number;\n            var butEdit: Button;\n            var buttonWidth: string;\n            var buttonHeight: string;\n\n            // Input Text Colors\n            var inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\n            var inputTextBackgroundColor: string = \"#454545\";\n            var inputTextColor: string = \"#f0f0f0\";\n\n            // This is the current color as set by either the picker or by entering a value\n            var currentColor: Color3;\n\n            // This int is used for naming swatches and serves as the index for calling them from the list\n            var swatchNumber: number;\n\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\n            var swatchDrawer: Grid;\n            var editSwatchMode: boolean = false;\n\n            // Color InputText fields that will be updated upon value change\n            var picker: ColorPicker;\n            var rValInt: InputText;\n            var gValInt: InputText;\n            var bValInt: InputText;\n            var rValDec: InputText;\n            var gValDec: InputText;\n            var bValDec: InputText;\n            var hexVal: InputText;\n            var newSwatch: Rectangle;\n            var lastVal: string;\n            var activeField: string;\n\n            /**\n            * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\n            * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\n            * are will receive no update. This is to prevent the input from the user being overwritten.\n            */\n            function updateValues(value: Color3, inputField: string) {\n                activeField = inputField;\n                var pickedColor: string = value.toHexString();\n                newSwatch.background = pickedColor;\n                if (rValInt.name != activeField) {\n                    rValInt.text = Math.floor(value.r * 255).toString();\n                }\n                if (gValInt.name != activeField) {\n                    gValInt.text = Math.floor(value.g * 255).toString();\n                }\n                if (bValInt.name != activeField) {\n                    bValInt.text = Math.floor(value.b * 255).toString();\n                }\n                if (rValDec.name != activeField) {\n                    rValDec.text = value.r.toString();\n                }\n                if (gValDec.name != activeField) {\n                    gValDec.text = value.g.toString();\n                }\n                if (bValDec.name != activeField) {\n                    bValDec.text = value.b.toString();\n                }\n                if (hexVal.name != activeField) {\n                    var minusPound: string[] = pickedColor.split(\"#\");\n                    hexVal.text = minusPound[1];\n                }\n                if (picker.name != activeField) {\n                   picker.value = value;\n                }\n            }\n\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateInt(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\") {\n                        if (Math.floor(parseInt(newValue)) < 0) {\n                            newValue = \"0\";\n                        }\n                        else if (Math.floor(parseInt(newValue)) > 255) {\n                            newValue = \"255\";\n                        }\n                        else if (isNaN(parseInt(newValue))) {\n                            newValue = \"0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\") {\n                    newValue = parseInt(newValue).toString();\n                    field.text = newValue;\n                    var newSwatchRGB: Color3 = BABYLON.Color3.FromHexString(newSwatch.background);\n                    if (activeField == field.name) {\n                        if (channel == \"r\") {\n                            updateValues(new BABYLON.Color3((parseInt(newValue)) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\n                        }\n                        else if (channel == \"g\") {\n                            updateValues(new BABYLON.Color3(newSwatchRGB.r, (parseInt(newValue)) / 255, newSwatchRGB.b), field.name);\n                        }\n                        else {\n                            updateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, (parseInt(newValue)) / 255), field.name);\n                        }\n                    }\n                }\n            }\n\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateFloat(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9\\.]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                        if (parseFloat(newValue) < 0.0) {\n                            newValue = \"0.0\";\n                        }\n                        else if (parseFloat(newValue) > 1.0) {\n                            newValue = \"1.0\";\n                        }\n                        else if (isNaN(parseFloat(newValue))) {\n                            newValue = \"0.0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n            }\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                    newValue = parseFloat(newValue).toString();\n                    field.text = newValue;\n                }\n                else {\n                    newValue = \"0.0\";\n                }\n                var newSwatchRGB = BABYLON.Color3.FromHexString(newSwatch.background);\n                if (activeField == field.name) {\n                    if (channel == \"r\") {\n                        updateValues(new BABYLON.Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\n                    }\n                    else if (channel == \"g\") {\n                        updateValues(new BABYLON.Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\n                    }\n                    else {\n                        updateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\n                    }\n                }\n\n            }\n\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\n            function deleteSwatch(index: number) {\n                if (options.savedColors) {\n                    options.savedColors.splice(index, 1);\n                }\n                if (options.savedColors && options.savedColors.length == 0) {\n                    setEditButtonVisibility(false);\n                    editSwatchMode = false;\n                }\n            }\n\n            // Creates and styles an individual swatch when updateSwatches is called.\n            function createSwatch() {\n                if (options.savedColors && options.savedColors[swatchNumber]) {\n                    if (editSwatchMode) {\n                        var icon: string = \"b\";\n                    }\n                    else {\n                        var icon: string = \"\";\n                    }\n                    var swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\n                    swatch.fontFamily = \"BabylonJSglyphs\";\n                    var swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\n                    var swatchLuminence: number =  swatchColor.r + swatchColor.g + swatchColor.b;\n\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\n                    if (swatchLuminence > luminanceLimit) {\n                        swatch.color = iconColorDark;\n                    }\n                    else {\n                        swatch.color = iconColorLight;\n                    }\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                    swatch.height = swatch.width = (swatchSize).toString() + \"px\";\n                    swatch.background = options.savedColors[swatchNumber];\n                    swatch.thickness = 2;\n                    let metadata = swatchNumber;\n                    swatch.pointerDownAnimation = () => {\n                        swatch.thickness = 4;\n                    };\n                    swatch.pointerUpAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerEnterAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerOutAnimation = () => {\n                        swatch.thickness = 2;\n                    };\n                    swatch.onPointerClickObservable.add(() => {\n                        if (!editSwatchMode) {\n                            if (options.savedColors) {\n                                updateValues(BABYLON.Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\n                            }\n                        }\n                        else {\n                            deleteSwatch(metadata);\n                            updateSwatches(\"\", butSave);\n                        }\n                    });\n                    return swatch;\n                }\n                else {\n                    return null;\n                }\n            }\n\n            // Mode switch to render button text and close symbols on swatch controls\n            function editSwatches(mode?: boolean) {\n                if (mode !== undefined) {\n                    editSwatchMode = mode;\n                }\n                if (editSwatchMode) {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"b\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Done\";\n                    }\n                }\n                else {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Edit\";\n                    }\n                }\n            }\n\n            /**\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\n             * saved colors there are and how many can be stored per row.\n             */\n            function updateSwatches(color: string, button: Button) {\n                if (options.savedColors) {\n\n                    if (color != \"\") {\n                        options.savedColors.push(color);\n                    }\n                    swatchNumber = 0;\n                    swatchDrawer.clearControls();\n                    var rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\n                    if (rowCount == 0) {\n                        var gutterCount: number = 0;\n                    }\n                    else {\n                        var gutterCount: number = rowCount + 1;\n                    }\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\n                        var currentRows: number = swatchDrawer.rowCount;\n                        for (var i = 0; i < currentRows; i++) {\n                            swatchDrawer.removeRowDefinition(0);\n                        }\n                        for (var i = 0; i < rowCount + gutterCount; i++) {\n                            if (i % 2) {\n                                swatchDrawer.addRowDefinition(swatchSize, true);\n                            }\n                            else {\n                                swatchDrawer.addRowDefinition(gutterSize, true);\n                            }\n                        }\n                    }\n                    swatchDrawer.height = ((swatchSize * rowCount) + (gutterCount * gutterSize)).toString() + \"px\";\n\n                    for (var y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\n\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\n                            var totalButtonsThisRow = options.numSwatchesPerLine!;\n                        }\n                        else {\n                            var totalButtonsThisRow = options.savedColors.length - ((thisRow - 1) * options.numSwatchesPerLine!);\n                        }\n                        var buttonIterations: number = (Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!));\n                        for (var x = 0, w = 1; x < buttonIterations; x++) {\n                            if (x > options.numSwatchesPerLine!) {\n                                continue;\n                            }\n                            var swatch: Button | null = createSwatch();\n                            if (swatch != null) {\n                                swatchDrawer.addControl(swatch, y, w);\n                                w += 2;\n                                swatchNumber++;\n                            }\n                            else {\n                                continue;\n                            }\n                        }\n                    }\n                    if (options.savedColors.length >= options.swatchLimit!) {\n                        disableButton(button, true);\n                    }\n                    else {\n                        disableButton(button, false);\n                    }\n                }\n            }\n\n            // Shows or hides edit swatches button depending on if there are saved swatches\n            function setEditButtonVisibility(enableButton: boolean) {\n                if (enableButton) {\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\n                    butEdit.width = buttonWidth;\n                    butEdit.height = buttonHeight;\n                    butEdit.left = (Math.floor(parseInt(buttonWidth) * 0.1)).toString() + \"px\";\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n                    butEdit.thickness = 2;\n                    butEdit.color = buttonColor;\n                    butEdit.fontSize = buttonFontSize;\n                    butEdit.background = buttonBackgroundColor;\n                    butEdit.onPointerEnterObservable.add(() => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    });\n                    butEdit.onPointerOutObservable.add(() => {\n                        butEdit.background = buttonBackgroundColor;\n                    });\n                    butEdit.pointerDownAnimation = () => {\n                        butEdit.background = buttonBackgroundClickColor;\n                    };\n                    butEdit.pointerUpAnimation = () => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    };\n                    butEdit.onPointerClickObservable.add(() => {\n                        if (editSwatchMode) {\n                            editSwatchMode = false;\n                        }\n                        else {\n                            editSwatchMode = true;\n                        }\n                        editSwatches();\n                    });\n                    pickerGrid.addControl(butEdit, 1, 0);\n                }\n                else {\n                    pickerGrid.removeControl(butEdit);\n                }\n            }\n\n            // Called when the user hits the limit of saved colors in the drawer.\n            function disableButton(button: Button, disabled: boolean) {\n                if (disabled) {\n                    button.color = buttonDisabledColor;\n                    button.background = buttonDisabledBackgroundColor;\n                }\n                else {\n                    button.color = buttonColor;\n                    button.background = buttonBackgroundColor;\n                }\n            }\n\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\n            function closePicker(color: string) {\n                if (options.savedColors && options.savedColors.length > 0) {\n                    resolve({\n                        savedColors: options.savedColors,\n                        pickedColor: color\n                    });\n                }\n                else {\n                    resolve({\n                        pickedColor: color\n                    });\n                }\n                advancedTexture.removeControl(dialogContainer);\n            }\n\n            // Dialogue menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\n            var dialogContainer: Grid = new Grid();\n            dialogContainer.name = \"Dialog Container\";\n            dialogContainer.width = options.pickerWidth;\n            if (options.savedColors) {\n                dialogContainer.height = containerSize;\n                var topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\n                dialogContainer.addRowDefinition(topRow, false);\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\n            }\n            else {\n                dialogContainer.height = options.pickerHeight;\n                dialogContainer.addRowDefinition(1.0, false);\n            }\n            advancedTexture.addControl(dialogContainer);\n\n            // Swatch drawer which contains all saved color buttons\n            if (options.savedColors) {\n                swatchDrawer = new Grid();\n                swatchDrawer.name = \"Swatch Drawer\";\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n                swatchDrawer.background = buttonBackgroundColor;\n                swatchDrawer.width = options.pickerWidth!;\n                var initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\n                if (initialRows == 0) {\n                    var gutterCount: number = 0;\n                }\n                else {\n                    var gutterCount: number = initialRows + 1;\n                }\n                swatchDrawer.height = ((swatchSize * initialRows) + (gutterCount * gutterSize)).toString() + \"px\";\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\n                for (var i = 0; i < (Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2) + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addRowDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addRowDefinition(gutterSize, true);\n                    }\n                }\n                for (var i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\n                    }\n                }\n                dialogContainer.addControl(swatchDrawer, 1, 0);\n            }\n\n            // Picker container\n            var pickerPanel: Grid = new Grid();\n            pickerPanel.name = \"Picker Panel\";\n            pickerPanel.height = options.pickerHeight;\n            var panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\n            var pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\n            dialogContainer.addControl(pickerPanel, 0, 0);\n\n            // Picker container header\n            var header: Rectangle = new Rectangle();\n            header.name = \"Dialogue Header Bar\";\n            header.background = \"#cccccc\";\n            header.thickness = 0;\n            pickerPanel.addControl(header, 0, 0);\n\n            // Header close button\n            var closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\n            closeButton.fontFamily = \"BabylonJSglyphs\";\n            var headerColor3: Color3 = Color3.FromHexString(header.background);\n            closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\n            closeButton.color = closeIconColor.toHexString();\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\n            closeButton.height = closeButton.width = options.headerHeight;\n            closeButton.background = header.background;\n            closeButton.thickness = 0;\n            closeButton.pointerDownAnimation = () => {\n            };\n            closeButton.pointerUpAnimation = () => {\n                closeButton.background = header.background;\n            };\n            closeButton.pointerEnterAnimation = () => {\n                closeButton.color = header.background;\n                closeButton.background = \"red\";\n            };\n            closeButton.pointerOutAnimation = () => {\n                closeButton.color = closeIconColor.toHexString();\n                closeButton.background = header.background;\n            };\n            closeButton.onPointerClickObservable.add(() => {\n                closePicker(currentSwatch.background);\n            });\n            pickerPanel.addControl(closeButton, 0, 0);\n\n            // Dialog container body\n            var dialogBody: Grid = new Grid();\n            dialogBody.name = \"Dialogue Body\";\n            dialogBody.background = buttonBackgroundColor;\n            var dialogBodyCols: number[] = [0.4375, 0.5625];\n            dialogBody.addRowDefinition(1.0, false);\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\n            pickerPanel.addControl(dialogBody, 1, 0);\n\n            // Picker grid\n            var pickerGrid: Grid = new Grid();\n            pickerGrid.name = \"Picker Grid\";\n            pickerGrid.addRowDefinition(0.85, false);\n            pickerGrid.addRowDefinition(0.15, false);\n            dialogBody.addControl(pickerGrid, 0, 0);\n\n            //  Picker control\n            picker = new ColorPicker();\n            picker.name = \"GUI Color Picker\";\n            if (options.pickerHeight < options.pickerWidth) {\n                picker.width = 0.89;\n            }\n            else {\n                picker.height = 0.89;\n            }\n            picker.value = Color3.FromHexString(options.lastColor);\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            picker.onPointerDownObservable.add(() => {\n                activeField = picker.name!;\n                lastVal = \"\";\n                editSwatches(false);\n            });\n            picker.onValueChangedObservable.add(function(value) { // value is a color3\n                if (activeField == picker.name) {\n                    updateValues(value, picker.name);\n                }\n            });\n            pickerGrid.addControl(picker, 0, 0);\n\n            // Picker body right quarant\n            var pickerBodyRight: Grid = new Grid();\n            pickerBodyRight.name = \"Dialogue Right Half\";\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            var pickerBodyRightRows: number[] = [0.514, 0.486];\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\n            dialogBody.addControl(pickerBodyRight, 1, 1);\n\n            // Picker container swatches and buttons\n            var pickerSwatchesButtons: Grid = new Grid();\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\n            var pickerButtonsCol: number[] = [0.417, 0.583];\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\n\n            // Picker Swatches quadrant\n            var pickerSwatches: Grid = new Grid();\n            pickerSwatches.name = \"New and Current Swatches\";\n            var pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\n\n            // Active swatches\n            var activeSwatches: Grid = new Grid();\n            activeSwatches.name = \"Active Swatches\";\n            activeSwatches.width = 0.67;\n            activeSwatches.addRowDefinition(0.5, false);\n            activeSwatches.addRowDefinition(0.5, false);\n            pickerSwatches.addControl(activeSwatches, 2, 0);\n\n            var labelWidth: number = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11));\n            var labelHeight: number = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5));\n\n            if (options.pickerWidth > options.pickerHeight) {\n                var labelTextSize: number = labelHeight;\n            }\n            else {\n                var labelTextSize: number = labelWidth;\n            }\n            // New color swatch and previous color button\n            var newText: TextBlock = new TextBlock();\n            newText.text = \"new\";\n            newText.name = \"New Color Label\";\n            newText.color = buttonColor;\n            newText.fontSize = labelTextSize;\n            pickerSwatches.addControl(newText, 1, 0);\n\n            newSwatch = new Rectangle();\n            newSwatch.name = \"New Color Swatch\";\n            newSwatch.background = options.lastColor;\n            newSwatch.thickness = 0;\n            activeSwatches.addControl(newSwatch, 0, 0);\n\n            var currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\n            currentSwatch.background = options.lastColor;\n            currentSwatch.thickness = 0;\n            currentSwatch.onPointerClickObservable.add(() => {\n                var revertColor = Color3.FromHexString(currentSwatch.background);\n                updateValues(revertColor, currentSwatch.name!);\n                editSwatches(false);\n            });\n            currentSwatch.pointerDownAnimation = () => {};\n            currentSwatch.pointerUpAnimation = () => {};\n            currentSwatch.pointerEnterAnimation = () => {};\n            currentSwatch.pointerOutAnimation = () => {};\n            activeSwatches.addControl(currentSwatch, 1, 0);\n\n            var swatchOutline: Rectangle = new Rectangle();\n            swatchOutline.name = \"Swatch Outline\";\n            swatchOutline.width = 0.67;\n            swatchOutline.thickness = 2;\n            swatchOutline.color = currentSwatchesOutlineColor;\n            swatchOutline.isHitTestVisible = false;\n            pickerSwatches.addControl(swatchOutline, 2, 0);\n\n            var currentText: TextBlock = new TextBlock();\n            currentText.name = \"Current Color Label\";\n            currentText.text = \"current\";\n            currentText.color = buttonColor;\n            currentText.fontSize = labelTextSize;\n            pickerSwatches.addControl(currentText, 3, 0);\n\n            // Buttons grid\n            var buttonGrid: Grid = new Grid();\n            buttonGrid.name = \"Button Grid\";\n            buttonGrid.height = 0.8;\n            var buttonGridRows: number = 1 / 3;\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\n\n            // Determine pixel width and height for all buttons from overall panel dimensions\n            buttonWidth = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67)).toString() + \"px\";\n            buttonHeight = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7)).toString() + \"px\";\n\n            // Determine button type size\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\n            }\n            else {\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\n            }\n\n            // Panel Buttons\n            var butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\n            butOK.width = buttonWidth;\n            butOK.height = buttonHeight;\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butOK.thickness = 2;\n            butOK.color = buttonColor;\n            butOK.fontSize = buttonFontSize;\n            butOK.background = buttonBackgroundColor;\n            butOK.onPointerEnterObservable.add(() => { butOK.background = buttonBackgroundHoverColor; });\n            butOK.onPointerOutObservable.add(() => { butOK.background = buttonBackgroundColor; });\n            butOK.pointerDownAnimation = () => {\n                butOK.background = buttonBackgroundClickColor;\n            };\n            butOK.pointerUpAnimation = () => {\n                butOK.background = buttonBackgroundHoverColor;\n            };\n            butOK.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(newSwatch.background);\n            });\n            buttonGrid.addControl(butOK, 0, 0);\n\n            var butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\n            butCancel.width = buttonWidth;\n            butCancel.height = buttonHeight;\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butCancel.thickness = 2;\n            butCancel.color = buttonColor;\n            butCancel.fontSize = buttonFontSize;\n            butCancel.background = buttonBackgroundColor;\n            butCancel.onPointerEnterObservable.add(() => { butCancel.background = buttonBackgroundHoverColor; });\n            butCancel.onPointerOutObservable.add(() => { butCancel.background = buttonBackgroundColor; });\n            butCancel.pointerDownAnimation = () => {\n                butCancel.background = buttonBackgroundClickColor;\n            };\n            butCancel.pointerUpAnimation = () => {\n                butCancel.background = buttonBackgroundHoverColor;\n            };\n            butCancel.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(currentSwatch.background);\n            });\n            buttonGrid.addControl(butCancel, 1, 0);\n\n            if (options.savedColors) {\n                var butSave: Button = Button.CreateSimpleButton(\"butSave\", \"Save\");\n                butSave.width = buttonWidth;\n                butSave.height = buttonHeight;\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                butSave.thickness = 2;\n                butSave.fontSize = buttonFontSize;\n                if (options.savedColors.length < options.swatchLimit!) {\n                    butSave.color = buttonColor;\n                    butSave.background = buttonBackgroundColor;\n                }\n                else {\n                    disableButton(butSave, true);\n                }\n                butSave.onPointerEnterObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                });\n                butSave.onPointerOutObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundColor;\n                        }\n                    }\n                });\n                butSave.pointerDownAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundClickColor;\n                        }\n                    }\n                };\n                butSave.pointerUpAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                };\n                butSave.onPointerClickObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length == 0) {\n                            setEditButtonVisibility(true);\n                        }\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            updateSwatches(newSwatch.background, butSave);\n                        }\n                        editSwatches(false);\n                    }\n                });\n                if (options.savedColors.length > 0) {\n                    setEditButtonVisibility(true);\n                }\n                buttonGrid.addControl(butSave, 2, 0);\n            }\n\n            // Picker color values input\n            var pickerColorValues: Grid = new Grid();\n            pickerColorValues.name = \"Dialog Lower Right\";\n            pickerColorValues.addRowDefinition(0.02, false);\n            pickerColorValues.addRowDefinition(0.63, false);\n            pickerColorValues.addRowDefinition(0.21, false);\n            pickerColorValues.addRowDefinition(0.14, false);\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\n\n            // RGB values text boxes\n            currentColor = Color3.FromHexString(options.lastColor);\n            var rgbValuesQuadrant: Grid = new Grid();\n            rgbValuesQuadrant.name = \"RGB Values\";\n            rgbValuesQuadrant.width = 0.82;\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\n\n            for (var i = 0; i < inputFieldLabels.length; i++) {\n                var labelText: TextBlock = new TextBlock();\n                labelText.text = inputFieldLabels[i];\n                labelText.color = buttonColor;\n                labelText.fontSize = buttonFontSize;\n                rgbValuesQuadrant.addControl(labelText, i, 0);\n            }\n\n            // Input fields for RGB values\n            rValInt = new InputText();\n            rValInt.width = 0.83;\n            rValInt.height = 0.72;\n            rValInt.name = \"rIntField\";\n            rValInt.fontSize = buttonFontSize;\n            rValInt.text = (currentColor.r * 255).toString();\n            rValInt.color = inputTextColor;\n            rValInt.background = inputTextBackgroundColor;\n            rValInt.onFocusObservable.add(() => {\n                activeField = rValInt.name!;\n                lastVal = rValInt.text;\n                editSwatches(false);\n            });\n            rValInt.onBlurObservable.add(() => {\n                if (rValInt.text == \"\") {\n                    rValInt.text = \"0\";\n                }\n                updateInt(rValInt, \"r\");\n                if (activeField == rValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            rValInt.onTextChangedObservable.add(() => {\n                if (activeField == rValInt.name) {\n                    updateInt(rValInt, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\n\n            gValInt = new InputText();\n            gValInt.width = 0.83;\n            gValInt.height = 0.72;\n            gValInt.name = \"gIntField\";\n            gValInt.fontSize = buttonFontSize;\n            gValInt.text = (currentColor.g * 255).toString();\n            gValInt.color = inputTextColor;\n            gValInt.background = inputTextBackgroundColor;\n            gValInt.onFocusObservable.add(() => {\n                activeField = gValInt.name!;\n                lastVal = gValInt.text;\n                editSwatches(false);\n            });\n            gValInt.onBlurObservable.add(() => {\n                if (gValInt.text == \"\") {\n                    gValInt.text = \"0\";\n                }\n                updateInt(gValInt, \"g\");\n                if (activeField == gValInt.name) {\n                    activeField = \"\";\n                }\n           });\n            gValInt.onTextChangedObservable.add(() => {\n                if (activeField == gValInt.name) {\n                    updateInt(gValInt, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\n\n            bValInt = new InputText();\n            bValInt.width = 0.83;\n            bValInt.height = 0.72;\n            bValInt.name = \"bIntField\";\n            bValInt.fontSize = buttonFontSize;\n            bValInt.text = (currentColor.b * 255).toString();\n            bValInt.color = inputTextColor;\n            bValInt.background = inputTextBackgroundColor;\n            bValInt.onFocusObservable.add(() => {\n                activeField = bValInt.name!;\n                lastVal = bValInt.text;\n                editSwatches(false);\n            });\n            bValInt.onBlurObservable.add(() => {\n                if (bValInt.text == \"\") {\n                    bValInt.text = \"0\";\n                }\n                updateInt(bValInt, \"b\");\n                if (activeField == bValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            bValInt.onTextChangedObservable.add(() => {\n                if (activeField == bValInt.name) {\n                    updateInt(bValInt, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\n\n            rValDec = new InputText();\n            rValDec.width = 0.95;\n            rValDec.height = 0.72;\n            rValDec.name = \"rDecField\";\n            rValDec.fontSize = buttonFontSize;\n            rValDec.text = currentColor.r.toString();\n            rValDec.color = inputTextColor;\n            rValDec.background = inputTextBackgroundColor;\n            rValDec.onFocusObservable.add(() => {\n                activeField = rValDec.name!;\n                lastVal = rValDec.text;\n                editSwatches(false);\n            });\n            rValDec.onBlurObservable.add(() => {\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\n                    rValDec.text = \"0\";\n                    updateFloat(rValDec, \"r\");\n                }\n                if (activeField == rValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            rValDec.onTextChangedObservable.add(() => {\n                if (activeField == rValDec.name) {\n                    updateFloat(rValDec, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\n\n            gValDec = new InputText();\n            gValDec.width = 0.95;\n            gValDec.height = 0.72;\n            gValDec.name = \"gDecField\";\n            gValDec.fontSize = buttonFontSize;\n            gValDec.text = currentColor.g.toString();\n            gValDec.color = inputTextColor;\n            gValDec.background = inputTextBackgroundColor;\n            gValDec.onFocusObservable.add(() => {\n                activeField = gValDec.name!;\n                lastVal = gValDec.text;\n                editSwatches(false);\n            });\n            gValDec.onBlurObservable.add(() => {\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\n                    gValDec.text = \"0\";\n                    updateFloat(gValDec, \"g\");\n                }\n                if (activeField == gValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            gValDec.onTextChangedObservable.add(() => {\n                if (activeField == gValDec.name) {\n                    updateFloat(gValDec, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\n\n            bValDec = new InputText();\n            bValDec.width = 0.95;\n            bValDec.height = 0.72;\n            bValDec.name = \"bDecField\";\n            bValDec.fontSize = buttonFontSize;\n            bValDec.text = currentColor.b.toString();\n            bValDec.color = inputTextColor;\n            bValDec.background = inputTextBackgroundColor;\n            bValDec.onFocusObservable.add(() => {\n                activeField = bValDec.name!;\n                lastVal = bValDec.text;\n                editSwatches(false);\n            });\n            bValDec.onBlurObservable.add(() => {\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\n                    bValDec.text = \"0\";\n                    updateFloat(bValDec, \"b\");\n                }\n                if (activeField == bValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            bValDec.onTextChangedObservable.add(() => {\n                if (activeField == bValDec.name) {\n                    updateFloat(bValDec, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\n\n            // Hex value input\n            var hexValueQuadrant: Grid = new Grid();\n            hexValueQuadrant.name = \"Hex Value\";\n            hexValueQuadrant.width = 0.82;\n            hexValueQuadrant.addRowDefinition(1.0, false);\n            hexValueQuadrant.addColumnDefinition(0.1, false);\n            hexValueQuadrant.addColumnDefinition(0.9, false);\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\n\n            var labelText: TextBlock = new TextBlock();\n            labelText.text = \"#\";\n            labelText.color = buttonColor;\n            labelText.fontSize = buttonFontSize;\n            hexValueQuadrant.addControl(labelText, 0, 0);\n\n            hexVal = new InputText();\n            hexVal.width = 0.96;\n            hexVal.height = 0.72;\n            hexVal.name = \"hexField\";\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            hexVal.fontSize = buttonFontSize;\n            var minusPound = options.lastColor.split(\"#\");\n            hexVal.text = minusPound[1];\n            hexVal.color = inputTextColor;\n            hexVal.background = inputTextBackgroundColor;\n            hexVal.onFocusObservable.add(() => {\n                activeField = hexVal.name!;\n                lastVal = hexVal.text;\n                editSwatches(false);\n            });\n            hexVal.onBlurObservable.add(() => {\n                if (hexVal.text.length == 3) {\n                    var val = hexVal.text.split(\"\");\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                }\n                if (hexVal.text == \"\") {\n                    hexVal.text = \"000000\";\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\n                }\n                if (activeField == hexVal.name) {\n                    activeField = \"\";\n                }\n            });\n            hexVal.onTextChangedObservable.add(() => {\n                var newHexValue: string = hexVal.text;\n                var checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\n                    hexVal.text = lastVal;\n                }\n                else {\n                    if (hexVal.text.length < 6) {\n                        var leadingZero: Number = 6 - hexVal.text.length;\n                        for (var i = 0; i < leadingZero; i++) {\n                            newHexValue = \"0\" + newHexValue;\n                        }\n                    }\n                    if (hexVal.text.length == 3) {\n                        var val: string[] = hexVal.text.split(\"\");\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                    }\n                    newHexValue = \"#\" + newHexValue;\n                    if (activeField == hexVal.name) {\n                        lastVal = hexVal.text;\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\n                    }\n                }\n            });\n            hexValueQuadrant.addControl(hexVal, 0, 1);\n\n            if (options.savedColors && options.savedColors.length > 0) {\n                updateSwatches(\"\", butSave!);\n            }\n        });\n    }\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture, Measure } from \"2D\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}