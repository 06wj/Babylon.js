{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","uniqueId","getScene","getUniqueId","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","rebuildCount","_processMeasures","BABYLON","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","beginPath","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","clip","_render","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_UNIFORM","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","drawImage","hRatio","vRatio","ratio","centerX","centerY","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onClipboardObservable","onControlPickedObservable","premulAlpha","onClipboardCopy","evt","ev","ClipboardInfo","ClipboardEventTypes","COPY","preventDefault","onClipboardCut","CUT","onClipboardPaste","PASTE","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","clearRect","measure","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","registerClipboardEvents","self","addEventListener","unRegisterClipboardEvents","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","availableWidth","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","flag","valueAsString","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","_onClipboardObserver","_onPointerDblTapObserver","navigator","userAgent","prompt","clipboardInfo","_onCopyText","_onCutText","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","_connectedVirtualKeyboard","processKey","keyCode","ctrlKey","metaKey","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","clipboardData","setData","data","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","grid_1","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        let rebuildCount = 0;\r\n        do {\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Control uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        this._draw(context);\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            child._render(context);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        } else if (!this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height + child.paddingTopInPixels;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width + child.paddingLeftInPixels;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Define type to string to ensure compatibility across browsers\r\n     * Safari doesn't support DataTransfer constructor\r\n     */\r\n    private _clipboardData: string = \"\";\r\n\r\n    /**\r\n     * Observable event triggered each time an clipboard event is received from the rendering canvas\r\n     */\r\n    public onClipboardObservable = new Observable<ClipboardInfo>();\r\n\r\n    /**\r\n     * Observable event triggered each time a pointer down is intercepted by a control\r\n     */\r\n    public onControlPickedObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root container.\r\n     * This is mostly used to let the Inspector introspects the ADT\r\n     * @returns an array containing the rootContainer\r\n     */\r\n    public getChildren(): Array<Container> {\r\n        return [this._rootContainer];\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that are inside this texture\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set information about clipboardData\r\n     */\r\n    public get clipboardData(): string {\r\n        return this._clipboardData;\r\n    }\r\n    public set clipboardData(value: string) {\r\n        this._clipboardData = value;\r\n    }\r\n\r\n    /**\r\n    * Creates a new AdvancedDynamicTexture\r\n    * @param name defines the name of the texture\r\n    * @param width defines the width of the texture\r\n    * @param height defines the height of the texture\r\n    * @param scene defines the hosting scene\r\n    * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n    * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n    */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"AdvancedDynamicTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AdvancedDynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n        this.onClipboardObservable.clear();\r\n        this.onControlPickedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._layout(measure, context);\r\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\r\n\r\n        this._rootContainer._render(context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerLastControlDown(control: Control, pointerId: number) {\r\n        this._lastControlDown[pointerId] = control;\r\n\r\n        this.onControlPickedObservable.notifyObservers(control);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n            let viewport = camera!.viewport;\r\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\r\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\r\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /** @hidden */\r\n    private onClipboardCopy = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardCut = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n    /** @hidden */\r\n    private onClipboardPaste = (evt: ClipboardEvent) => {\r\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\r\n        this.onClipboardObservable.notifyObservers(ev);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Register the clipboard Events onto the canvas\r\n     */\r\n    public registerClipboardEvents(): void {\r\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\r\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\r\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\r\n    }\r\n    /**\r\n     * Unregister the clipboard Events from the canvas\r\n     */\r\n    public unRegisterClipboardEvents(): void {\r\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\r\n        self.removeEventListener(\"cut\", this.onClipboardCut);\r\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft =  this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1 ].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width =  width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"2D\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private static _Epsilon = 0.000001;\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        if (this._value.r <= ColorPicker._Epsilon) {\r\n            this._value.r = 0;\r\n        }\r\n\r\n        if (this._value.g <= ColorPicker._Epsilon) {\r\n            this._value.g = 0;\r\n        }\r\n\r\n        if (this._value.b <= ColorPicker._Epsilon) {\r\n            this._value.b = 0;\r\n        }\r\n\r\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.r = 1.0;\r\n        }\r\n\r\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.g = 1.0;\r\n        }\r\n\r\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\r\n            this._value.b = 1.0;\r\n        }\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n\r\n        if (parentMeasure.width < parentMeasure.height) {\r\n            this._currentMeasure.height = parentMeasure.width;\r\n        } else {\r\n            this._currentMeasure.width = parentMeasure.height;\r\n        }\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var left = this._currentMeasure.left;\r\n        var top = this._currentMeasure.top;\r\n\r\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n        }\r\n\r\n        this._updateSquareProps();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n        }\r\n\r\n        context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        this._drawGradientSquare(this._h,\r\n            this._squareLeft,\r\n            this._squareTop,\r\n            this._squareSize,\r\n            this._squareSize,\r\n            context);\r\n\r\n        var cx = this._squareLeft + this._squareSize * this._s;\r\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n        this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n        var dist = radius - wheelThickness * .5;\r\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(x: number, y: number): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (x >= left && x <= left + size &&\r\n            y >= top && y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(x: number, y: number): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = x - centerX;\r\n        var dy = y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._isPointOnSquare(x, y)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(x, y)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(x, y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\r\n\r\n        let x = this._transformedPosition.x;\r\n        let y = this._transformedPosition.y;\r\n\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(x, y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture, Measure } from \"2D\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}