{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/control.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/container3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/container.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/measure.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/image.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/control3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/button3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/button.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/math2D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/inputText.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/slider.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/style.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/legacy.ts","webpack://BABYLON.GUI/../node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/grid.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/line.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/selector.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/2D/controls/statics.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/materials/index.ts","webpack://BABYLON.GUI/../Tools/Gulp/../../gui/src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","context_1","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical) {\r\n                    top += (effectiveThumbThickness / 2);\n                }\r\n                else {\r\n                    left += (effectiveThumbThickness / 2);\n                }\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}