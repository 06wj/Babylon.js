{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_flagDescendantsAsMatrixDirty","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","children","getChildByName","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","onImageLoadedObservable","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","isVertical","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","evt","preventDefault","substr","deletePosition","deadKey","insertPosition","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","getChildrenAt","cell","_removeCell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","baseSlider_1","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context);\r\n            context.clip();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(this, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            if (this.clipChildren) {\r\n                this._clipForChildren(context);\r\n            }\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) { maxLineWidth = line.width; }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./baseSlider\";\nexport * from \"./slider\";\nexport * from \"./imageBasedSlider\";\n\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                    delete this._lastControlOver[pointerId];\r\n                }\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            // Avoid overwriting a true skipOnPointerObservable to false\r\n            if (this._shouldBlockPointer) {\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n\r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;\r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;\r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        if (this._text === value) {\n            return;\n        }\n        this._text = value;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._text && this._text.length > 0  && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                this._blinkIsEven = false;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this.deadKey = true;\n                break;\n        }\n\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    public processKeyboard(evt: KeyboardEvent): void {\n        this.processKey(evt.keyCode, evt.key, evt);\n    }\n\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this._processMeasures(parentMeasure, context)) {\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowColor = this.shadowColor;\n                context.shadowBlur = this.shadowBlur;\n                context.shadowOffsetX = this.shadowOffsetX;\n                context.shadowOffsetY = this.shadowOffsetY;\n            }\n\n            // Background\n            if (this._isFocused) {\n                if (this._focusedBackground) {\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\n\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n                }\n            } else if (this._background) {\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            if (!this._fontOffset) {\n                this._fontOffset = Control._GetFontOffset(context.font);\n            }\n\n            // Text\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\n            if (this.color) {\n                context.fillStyle = this.color;\n            }\n\n            let text = this._beforeRenderText(this._text);\n\n            if (!this._isFocused && !this._text && this._placeholderText) {\n                text = this._placeholderText;\n\n                if (this._placeholderColor) {\n                    context.fillStyle = this._placeholderColor;\n                }\n            }\n\n            this._textWidth = context.measureText(text).width;\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\n            if (this._autoStretchWidth) {\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\n            }\n\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\n            context.save();\n            context.beginPath();\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n            context.clip();\n\n            if (this._isFocused && this._textWidth > availableWidth) {\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\n                if (!this._scrollLeft) {\n                    this._scrollLeft = textLeft;\n                }\n            } else {\n                this._scrollLeft = clipTextLeft;\n            }\n\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n            // Cursor\n            if (this._isFocused) {\n\n                // Need to move cursor\n                if (this._clickedCoordinate) {\n                    var rightPosition = this._scrollLeft + this._textWidth;\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                    var currentSize = 0;\n                    this._cursorOffset = 0;\n                    var previousDist = 0;\n                    do {\n                        if (this._cursorOffset) {\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                        }\n                        this._cursorOffset++;\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                    // Find closest move\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                        this._cursorOffset--;\n                    }\n\n                    this._blinkIsEven = false;\n                    this._clickedCoordinate = null;\n                }\n\n                // Render cursor\n                if (!this._blinkIsEven) {\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                    if (cursorLeft < clipTextLeft) {\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\n                        cursorLeft = clipTextLeft;\n                        this._markAsDirty();\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                        cursorLeft = clipTextLeft + availableWidth;\n                        this._markAsDirty();\n                    }\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n\n                clearTimeout(this._blinkTimeout);\n                this._blinkTimeout = <any>setTimeout(() => {\n                    this._blinkIsEven = !this._blinkIsEven;\n                    this._markAsDirty();\n                }, 500);\n            }\n\n            context.restore();\n\n            // Border\n            if (this._thickness) {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n                context.lineWidth = this._thickness;\n\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n            }\n        }\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n    }\n}\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { Measure } from \"../measure\";\r\nimport { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            var radius = 0;\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this.isVertical) {\r\n                    top += (this._effectiveThumbThickness / 2);\r\n                }\r\n                else {\r\n                    left += (this._effectiveThumbThickness / 2);\r\n                }\r\n\r\n                radius = this._backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            const thumbPosition = this._getThumbPosition();\r\n            context.fillStyle = this._background;\r\n\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            // Value bar\r\n            context.fillStyle = this.color;\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowColor = this.shadowColor;\r\n                    context.shadowBlur = this.shadowBlur;\r\n                    context.shadowOffsetX = this.shadowOffsetX;\r\n                    context.shadowOffsetY = this.shadowOffsetY;\r\n                }\r\n                if (this._isThumbCircle) {\r\n                    context.beginPath();\r\n                    if (this.isVertical) {\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                    }\r\n                    else {\r\n                        context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    }\r\n                    context.fill();\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    context.stroke();\r\n                }\r\n                else {\r\n                    if (this.isVertical) {\r\n                        context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                    if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                        context.shadowBlur = 0;\r\n                        context.shadowOffsetX = 0;\r\n                        context.shadowOffsetY = 0;\r\n                    }\r\n                    context.strokeStyle = this._borderColor;\r\n                    if (this.isVertical) {\r\n                        context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                    }\r\n                    else {\r\n                        context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach((point) => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../measure\";\r\nimport { Image } from \"./image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            this._prepareRenderingData(\"rectangle\");\r\n            const thumbPosition = this._getThumbPosition();\r\n            var left = this._renderLeft;\r\n            var top = this._renderTop;\r\n            var width = this._renderWidth;\r\n            var height = this._renderHeight;\r\n\r\n            // Background\r\n            if (this._backgroundImage) {\r\n                this._tempMeasure.copyFromFloats(left, top, width, height);\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    if (this.isVertical) {\r\n                        this._tempMeasure.height += this._effectiveThumbThickness;\r\n                    } else {\r\n                        this._tempMeasure.width += this._effectiveThumbThickness;\r\n                    }\r\n                }\r\n                this._backgroundImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Bar\r\n            if (this._valueBarImage) {\r\n                if (this.isVertical) {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    } else {\r\n                        this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                } else {\r\n                    if (this.isThumbClamped && this.displayThumb) {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                    }\r\n                    else {\r\n                        this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                this._valueBarImage._draw(this._tempMeasure, context);\r\n            }\r\n\r\n            // Thumb\r\n            if (this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                this._thumbImage._draw(this._tempMeasure, context);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}