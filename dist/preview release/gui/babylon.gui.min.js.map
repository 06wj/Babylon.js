{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/charting/index.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/charting/dataSeries.ts","webpack://BABYLON.GUI/./src/3D/charting/chart.ts","webpack://BABYLON.GUI/./src/3D/charting/barGraph.ts","webpack://BABYLON.GUI/./src/3D/charting/mapGraph.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","parent","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","attach","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","material","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Color3","Red","Black","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","AdvancedDynamicTexture","Texture","TRILINEAR_SAMPLINGMODE","rootContainer","scaleX","scaleY","premulAlpha","_applyFacade","facadeTexture","emissiveTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","StandardMaterial","getScene","specularColor","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","onFocus","navigator","userAgent","prompt","focusedControl","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","processKeyboard","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","getProjectedPosition","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","Number","_canvas","yValue","style_1","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","worldMatrix","renderScale","layerMask","isDisposed","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","backFaceCulling","diffuseColor","diffuseTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","undefined","BABYLON","g","Function","eval","e","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","onValueChangedObservable","_pointerIsDown","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","_1","RadioButton","group","childRadio","AddRadioButtonWithHeader","radio","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_createKey","propertySet","background","paddingRight","paddingTop","paddingBottom","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","j","button_tblock","toUpperCase","toLowerCase","_connectedInputText","connect","input","_onFocusObserver","_onBlurObserver","_onKeyPressObserver","disconnect","CreateDefaultLayout","returnValue","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","rotation","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","isHorizontal","controlFirst","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","fontSize","_backPlate","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","a","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","DataSeries","getFilteredData","filters","filteredData","element","isValid","filter","filterValue","getDimensionValues","entry","CreateFakeData","series","label","dimensions","Year","Country","CreateFakeSpatialData","latitude","longitude","_2D_1","materials_1","Chart","LastCreatedScene","_labelMeshes","_blockRefresh","_elementWidth","_displayLabels","onRefreshObservable","onElementCreatedObservable","onElementEnterObservable","onElementOutObservable","_rootNode","_scene","_lastElementOver","_onElementEnterObserver","_activeBar","_hoverLabel","_addLabel","updateHoverLabel","_onElementOutObserver","_removeLabel","glowHover","refresh","_dataSource","_dataFilters","_defaultMaterial","_labelDimension","_glowLayer","GlowLayer","customEmissiveColorSelector","chartColor","_createDefaultMaterial","includeBackground","labelCreationFunction","labelMesh","plane","Mesh","CreatePlane","billboardMode","BILLBOARDMODE_ALL","adt","rectangle","_removeLabels","_clean","getDescendants","BarGraph","_maxBarHeight","_displayBackground","_backgroundResolution","_backgroundTickCount","_createBarMesh","box","setPivotMatrix","Translation","MIN_VALUE","createMesh","_barMeshes","_backgroundMesh","_backgroundADT","displayGrid","displayMajorLines","minorLineColor","minorLineTickness","tickIndex","ticklabel","maxBarHeight","barMesh","currentScalingYState","easing","CircleEase","Animation","CreateAndStartAnimation","labelDimension","displayLabels","MapGraph","mapUrl","_maxCylinderHeight","_worldMapSize","_cylinderTesselation","_xOffset","_yOffset","meshLabel","worldMapUrl","_mercatorMaterial","_worldMapPickedPointObserver","albedoTexture","LINEAR_LINEAR_MIPLINEAR","_createCylinderMesh","cylinder","CreateCylinder","_cylinderMeshes","worldMaptextureSize","worldMapWidth","worldMapHeight","_worldMap","CreateGround","cylinderMesh","latRad","mercN","log","tan","GUI3DManager","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./fluentMaterial\";","export * from \"./dataSeries\";\r\nexport * from \"./chart\";\r\nexport * from \"./barGraph\";\r\nexport * from \"./mapGraph\";","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._focusedBackground;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._background;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._background;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectedInputText: Nullable<InputText>;\r\n    private _onFocusObserver: Nullable<Observer<InputText>>;\r\n    private _onBlurObserver: Nullable<Observer<InputText>>;\r\n    private _onKeyPressObserver: Nullable<Observer<string>>;\r\n\r\n    /** Gets the input text control attached with the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._connectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        this.isVisible = false;\r\n        this._connectedInputText = input;\r\n\r\n        // Events hooking\r\n        this._onFocusObserver = input.onFocusObservable.add(() => {\r\n            this.isVisible = true;\r\n        });\r\n\r\n        this._onBlurObserver = input.onBlurObservable.add(() => {\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n            if (!this._connectedInputText) {\r\n                return;\r\n            }\r\n            switch (key) {\r\n                case \"\\u21E7\":\r\n                    this.shiftState++;\r\n                    if (this.shiftState > 2) {\r\n                        this.shiftState = 0;\r\n                    }\r\n                    this.applyShiftState(this.shiftState);\r\n                    return;\r\n                case \"\\u2190\":\r\n                    this._connectedInputText.processKey(8);\r\n                    return;\r\n                case \"\\u21B5\":\r\n                    this._connectedInputText.processKey(13);\r\n                    return;\r\n            }\r\n            this._connectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n            if (this.shiftState === 1) {\r\n                this.shiftState = 0;\r\n                this.applyShiftState(this.shiftState);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from an input text control\r\n     */\r\n    public disconnect(): void {\r\n        if (!this._connectedInputText) {\r\n            return;\r\n        }\r\n\r\n        this._connectedInputText.onFocusObservable.remove(this._onFocusObserver);\r\n        this._connectedInputText.onBlurObservable.remove(this._onBlurObserver);\r\n        this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n\r\n        this._connectedInputText = null;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard();\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\nexport * from \"./charting\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","import { Color3 } from \"babylonjs\";\r\n\r\n/** \r\n * Class used to store data to display \r\n * @see http://doc.babylonjs.com/how_to/chart3d\r\n */\r\nexport class DataSeries {\r\n    /** Gets or sets the label of the series */\r\n    public label: string;\r\n\r\n    /** Gets or sets the color associated with the series */\r\n    public color: Color3;\r\n\r\n    /** Gets or sets the list of dimensions (used to filter data) */\r\n    public dimensions: Array<string>;\r\n\r\n    /** Gets or sets the list of values (data to display) */\r\n    public data: Array<any>;  \r\n\r\n    /**\r\n     * Apply a list of filters to the data and return a list\r\n     * @param filters defines the filters to apply\r\n     * @returns an array containing the filtered data\r\n     */\r\n    public getFilteredData(filters: {[key: string]: string}): Array<any> {\r\n        let filteredData = new Array<any>();\r\n\r\n        this.data.forEach(element => {\r\n            let isValid = false;\r\n            for (var filter in filters) {\r\n                if (!filters.hasOwnProperty(filter)) {\r\n                    continue;\r\n                }\r\n\r\n                var filterValue = filters[filter];\r\n                isValid = (element[filter] === filterValue);\r\n\r\n                if (!isValid) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isValid) {\r\n                filteredData.push(element);\r\n            }\r\n        });\r\n\r\n        return filteredData;\r\n    }\r\n\r\n    /**\r\n     * Get the different values of a dimension\r\n     * @param key defines the dimension name\r\n     * @returns An array of values\r\n     */\r\n    public getDimensionValues(key: string): Array<any> {\r\n        var result = new Array<any>();\r\n\r\n        this.data.forEach((entry) => {\r\n            var value = entry[key];\r\n            if (result.indexOf(value) === -1) {\r\n                result.push(value);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new DataSeries containing testing values\r\n     * @returns the new DataSeries\r\n     */\r\n    public static CreateFakeData(): DataSeries {\r\n        var series = new DataSeries();\r\n        series.label = \"Product #1\";\r\n        series.color = new Color3(1.0, 0, 0);\r\n\r\n        series.dimensions = [\"Year\", \"Country\"];\r\n\r\n        series.data = [\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"France\",\r\n                \"value\": 10\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"USA\",\r\n                \"value\": 200\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"India\",\r\n                \"value\": 400\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"UK\",\r\n                \"value\": 180\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 400\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 24\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"China\",\r\n                \"value\": 540\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 150\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"France\",\r\n                \"value\": 12\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"USA\",\r\n                \"value\": 120\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"India\",\r\n                \"value\": 480\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"UK\",\r\n                \"value\": 10\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 80\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 230\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"China\",\r\n                \"value\": 490\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 120\r\n            }\r\n        ];\r\n        \r\n        return series;\r\n    }\r\n\r\n    /**\r\n     * Create a new DataSeries containing testing spatial values\r\n     * @returns the new DataSeries\r\n     */\r\n    public static CreateFakeSpatialData(): DataSeries {\r\n        var series = new DataSeries();\r\n        series.label = \"Spatial Data\";\r\n        series.color = new Color3(0, 1.0, 0);\r\n\r\n        series.dimensions = [\"Year\", \"Country\"];\r\n\r\n        series.data = [\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"France\",\r\n                \"value\": 10,\r\n                \"latitude\": 46.63728,\r\n                \"longitude\": 2.338262\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"USA\",\r\n                \"value\": 200,\r\n                \"latitude\": 39.83333,\r\n                \"longitude\": -98.58334\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"India\",\r\n                \"value\": 400,\r\n                \"latitude\": 23.40601,\r\n                \"longitude\": 79.45809\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"UK\",\r\n                \"value\": 180,\r\n                \"latitude\": 54.56089,\r\n                \"longitude\": -2.212512\r\n            },\r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 400,\r\n                \"latitude\": 51.20247,\r\n                \"longitude\": 10.3822\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 24,\r\n                \"latitude\": -25.58524,\r\n                \"longitude\": 134.5041\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"China\",\r\n                \"value\": 540,\r\n                \"latitude\": 36.55309,\r\n                \"longitude\": 103.9754\r\n            }, \r\n            {\r\n                \"Year\": 2014,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 150,\r\n                \"latitude\": 36.28165,\r\n                \"longitude\": 139.0773\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"France\",\r\n                \"value\": 12,\r\n                \"latitude\": 46.63728,\r\n                \"longitude\": 2.338262\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"USA\",\r\n                \"value\": 120,\r\n                \"latitude\": 39.83333,\r\n                \"longitude\": -98.58334\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"India\",\r\n                \"value\": 480,\r\n                \"latitude\": 23.40601,\r\n                \"longitude\": 79.45809\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"UK\",\r\n                \"value\": 10,\r\n                \"latitude\": 54.56089,\r\n                \"longitude\": -2.212512\r\n            },\r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Germany\",\r\n                \"value\": 80,\r\n                \"latitude\": 51.20247,\r\n                \"longitude\": 10.3822\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Australia\",\r\n                \"value\": 230,\r\n                \"latitude\": -25.58524,\r\n                \"longitude\": 134.5041\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"China\",\r\n                \"value\": 490,\r\n                \"latitude\": 36.55309,\r\n                \"longitude\": 103.9754\r\n            }, \r\n            {\r\n                \"Year\": 2015,\r\n                \"Country\": \"Japan\",\r\n                \"value\": 120,\r\n                \"latitude\": 36.28165,\r\n                \"longitude\": 139.0773\r\n            }\r\n        ];\r\n        \r\n        return series;\r\n    }\r\n}","import { Nullable, TransformNode, Scene, Vector3, Engine, Observer, PointerInfo, Observable, Mesh, AbstractMesh, GlowLayer, Material } from \"babylonjs\";\r\nimport { DataSeries } from \".\";\r\nimport { AdvancedDynamicTexture, TextBlock, Rectangle, TextWrapping } from \"../../2D\";\r\nimport { FluentMaterial } from \"../materials\";\r\n\r\n/** \r\n * Base class for all chart controls\r\n * @see http://doc.babylonjs.com/how_to/chart3d#charts\r\n */\r\nexport abstract class Chart {\r\n    protected _dataSource: Nullable<DataSeries>;\r\n    protected _rootNode: TransformNode;\r\n    protected _dataFilters: {[key: string]: string};\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    protected _scene: Scene;\r\n    private _lastElementOver: Nullable<AbstractMesh>;\r\n    private _labelMeshes = new Array<Mesh>();\r\n    protected _blockRefresh = false;    \r\n    protected _elementWidth = 2;    \r\n    private _pickedPointObserver: Nullable<Observer<Vector3>>;      \r\n    protected _defaultMaterial: Nullable<Material>; \r\n    private _labelDimension: string;\r\n    private _displayLabels = true;\r\n    private _activeBar: Nullable<Mesh>;\r\n\r\n    private _glowLayer: Nullable<GlowLayer>;\r\n    private _onElementEnterObserver: Nullable<Observer<AbstractMesh>>;\r\n    private _onElementOutObserver: Nullable<Observer<AbstractMesh>>;\r\n    \r\n    private _hoverLabel: Nullable<Mesh>;\r\n\r\n    /** Observable raised when a refresh was done */\r\n    public onRefreshObservable  = new Observable<Chart>();\r\n\r\n    /** Observable raised when a new element is created */\r\n    public onElementCreatedObservable  = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    /**\r\n     * Observable raised when the pointer enters an element of the chart\r\n    */\r\n    public onElementEnterObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when the pointer leaves an element of the chart\r\n     */\r\n    public onElementOutObservable = new Observable<AbstractMesh>();\r\n\r\n    /** User defined callback used to create labels */\r\n    public labelCreationFunction: Nullable<(label: string, width: number, includeBackground: boolean) => Mesh>;\r\n\r\n    /** User defined callback used to apply specific setup to hover labels */\r\n    public updateHoverLabel: Nullable<(meshLabel: Mesh) => void>;\r\n\r\n    /** Gets or sets the width of each element */\r\n    public get elementWidth(): number {\r\n        return this._elementWidth;\r\n    }\r\n\r\n    public set elementWidth(value: number) {\r\n        if (this._elementWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._elementWidth = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    /** Gets or sets the rotation of the entire chart */\r\n    public set rotation(value: Vector3) {\r\n        this._rootNode.rotation = value;\r\n    }\r\n\r\n    public get rotation(): Vector3 {\r\n        return this._rootNode.rotation;\r\n    }\r\n\r\n    /** Gets or sets the position of the entire chart */\r\n    public set position(value: Vector3) {\r\n        this._rootNode.position = value;\r\n    }\r\n\r\n    public get position(): Vector3 {\r\n        return this._rootNode.position;\r\n    }\r\n\r\n    /** Gets or sets the scaling of the entire chart */\r\n    public set scaling(value: Vector3) {\r\n        this._rootNode.scaling = value;\r\n    }\r\n\r\n    public get scaling(): Vector3 {\r\n        return this._rootNode.scaling;\r\n    }\r\n\r\n    /** Gets or sets the data source used by the graph */\r\n    public get dataSource(): Nullable<DataSeries> {\r\n        return this._dataSource;\r\n    }\r\n\r\n    public set dataSource(value: Nullable<DataSeries>) {\r\n        if (this._dataSource === value) {\r\n            return;\r\n        }\r\n\r\n        this._dataSource = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets the filters applied to data source */\r\n    public get dataFilters(): {[key: string]: string} {\r\n        return this._dataFilters;\r\n    }\r\n\r\n    public set dataFilters(filters: {[key: string]: string}) {\r\n        this._dataFilters = filters;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets the root node associated with this graph */\r\n    public get rootNode(): TransformNode {\r\n        return this._rootNode;\r\n    }\r\n\r\n    /** Gets or sets a value indicating if refresh function should be executed (useful when multiple changes will happen and you want to run refresh only at the end) */\r\n    public get blockRefresh(): boolean {\r\n        return this._blockRefresh;\r\n    }\r\n\r\n    public set blockRefresh(value: boolean) {\r\n        if (this._blockRefresh === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockRefresh = value;\r\n\r\n        if (value) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the material used by element meshes */\r\n    public get defaultMaterial(): Nullable<Material> {\r\n        return this._defaultMaterial;\r\n    }\r\n\r\n    public set defaultMaterial(value: Nullable<Material>) {\r\n        if (this._defaultMaterial === value) {\r\n            return;\r\n        }\r\n\r\n        this._defaultMaterial = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if labels must be displayed */\r\n    public get displayLabels(): boolean {\r\n        return this._displayLabels;\r\n    }\r\n\r\n    public set displayLabels(value: boolean) {\r\n        if (this._displayLabels === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayLabels = value;\r\n\r\n        this.refresh();\r\n    }       \r\n    \r\n    /** Gets or sets the dimension used for the labels */\r\n    public get labelDimension(): string {\r\n        return this._labelDimension;\r\n    }\r\n\r\n    public set labelDimension(value: string) {\r\n        if (this._labelDimension === value) {\r\n            return;\r\n        }\r\n\r\n        this._labelDimension = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    /** Gets or sets a boolean indicating if glow should be used to highlight element hovering */\r\n    public get glowHover(): boolean {\r\n        return this._glowLayer !== undefined && this._glowLayer !== null;\r\n    }\r\n\r\n    public set glowHover(value: boolean) {\r\n        if (this.glowHover === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._glowLayer) {\r\n            this._glowLayer.dispose();\r\n            this._glowLayer = null;\r\n            return;\r\n        }\r\n\r\n        this._glowLayer = new GlowLayer(\"glow\", this._scene);\r\n\r\n        this._glowLayer.customEmissiveColorSelector = (mesh, subMesh, material, result) => {\r\n            if (mesh === this._activeBar) {\r\n                let chartColor = this._dataSource!.color.scale(0.75);\r\n                result.set(chartColor.r, chartColor.g, chartColor.b, 1.0);\r\n            } else {\r\n                result.set(0, 0, 0, 0);\r\n            }\r\n        }     \r\n    }\r\n\r\n    /** Gets or sets the name of the graph */\r\n    public name: string; \r\n\r\n    /**\r\n     * Creates a new Chart\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        this.name = name;\r\n        this._rootNode = new TransformNode(name, scene);\r\n\r\n        this._scene = scene!;\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pi, state) => {\r\n            if (!pi.pickInfo || !pi.pickInfo.hit) {\r\n                if (this._lastElementOver) {\r\n                    this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                    this._lastElementOver = null;\r\n                }\r\n\r\n                this.onPickedPointChangedObservable.notifyObservers(null);\r\n                return;\r\n            }\r\n\r\n            let metadata = pi.pickInfo.pickedMesh!.metadata;\r\n            if (metadata && metadata.value) {\r\n                if (this._lastElementOver !== pi.pickInfo.pickedMesh) {\r\n                    if (this._lastElementOver) {\r\n                        this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                        this._lastElementOver = null;\r\n                    }\r\n                    this._lastElementOver = pi.pickInfo.pickedMesh;\r\n                    this.onElementEnterObservable.notifyObservers(this._lastElementOver!);\r\n                }\r\n            } else {\r\n                if (this._lastElementOver) {\r\n                    this.onElementOutObservable.notifyObservers(this._lastElementOver);\r\n                    this._lastElementOver = null;\r\n                }\r\n            }\r\n\r\n            this.onPickedPointChangedObservable.notifyObservers(pi.pickInfo.pickedPoint);\r\n        });\r\n\r\n        this._onElementEnterObserver = this.onElementEnterObservable.add(mesh => {\r\n            this._activeBar = <Mesh>mesh;\r\n\r\n            this._hoverLabel = this._addLabel(this._activeBar.metadata.value.toString(), this._elementWidth);\r\n\r\n            this._hoverLabel.position = this._activeBar.position.clone();\r\n            this._hoverLabel.position.y = this._activeBar.scaling.y + 1.0;\r\n            this._hoverLabel.scaling.x = this._elementWidth;     \r\n            \r\n            if (this.updateHoverLabel) {\r\n                this.updateHoverLabel(this._hoverLabel);\r\n            }\r\n        });\r\n\r\n        this._onElementOutObserver = this.onElementOutObservable.add(mesh => {\r\n            this._activeBar = null;\r\n\r\n            if (this._hoverLabel) {\r\n                this._removeLabel(this._hoverLabel);\r\n                this._hoverLabel = null;\r\n            }\r\n        });\r\n\r\n\r\n        this.glowHover = true;\r\n    }\r\n\r\n    protected _createDefaultMaterial(scene: Scene): Material {\r\n        var result = new FluentMaterial(\"fluent\", scene);\r\n        result.albedoColor = this._dataSource!.color.scale(0.5);\r\n        result.innerGlowColorIntensity = 0.6;\r\n        result.renderHoverLight = true;\r\n        result.hoverRadius = 5;\r\n\r\n        this._pickedPointObserver = this.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                result.hoverPosition = pickedPoint;\r\n                result.hoverColor.a = 1.0;\r\n            } else {\r\n                result.hoverColor.a = 0;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Function called by the chart objects when they need a label. Could be user defined if you set this.labelCreationFunction to a custom callback\r\n     * @param label defines the text of the label\r\n     * @param width defines the expected width (height is supposed to be 1)\r\n     * @param includeBackground defines if a background rectangle must be added (default is true)\r\n     * @returns a mesh used to host the label\r\n     */\r\n    protected _addLabel(label: string, width: number, includeBackground = true): Mesh {\r\n        if (this.labelCreationFunction) {\r\n            let labelMesh = this.labelCreationFunction(label, width, includeBackground);\r\n            labelMesh.parent = this._rootNode;\r\n\r\n            this._labelMeshes.push(labelMesh);\r\n\r\n            return labelMesh;\r\n        }\r\n\r\n        let plane = Mesh.CreatePlane(label, 1, this._scene);\r\n\r\n        this._labelMeshes.push(plane);\r\n\r\n        plane.parent = this._rootNode;\r\n        plane.billboardMode = Mesh.BILLBOARDMODE_ALL;\r\n        plane.scaling.x = width;\r\n\r\n        let resolution = 256;\r\n        let adt = AdvancedDynamicTexture.CreateForMesh(plane, resolution, resolution / width, false, true);\r\n        let textBlock = new TextBlock(label, label);\r\n        textBlock.color = \"White\";\r\n        textBlock.textWrapping = TextWrapping.Ellipsis;\r\n        textBlock.fontWeight = \"Bold\";\r\n        textBlock.fontSize = 50;\r\n\r\n        if (includeBackground) {\r\n            let rectangle = new Rectangle(label + \"Border\");\r\n            rectangle.thickness = 4;\r\n            rectangle.color = \"White\";\r\n            rectangle.background = \"Black\";\r\n            rectangle.addControl(textBlock);\r\n            adt.addControl(rectangle);\r\n        } else {\r\n            adt.addControl(textBlock);\r\n        }\r\n\r\n        return plane;\r\n    }\r\n\r\n    /**\r\n     * Remove specific label mesh\r\n     * @param label defines the label mesh to remove\r\n     */\r\n    protected _removeLabel(label: Mesh): void {\r\n        let index = this._labelMeshes.indexOf(label);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        this._labelMeshes.splice(index, 1);\r\n        label.dispose(false, true);\r\n    }\r\n\r\n    /** Remove all created labels */\r\n    protected _removeLabels(): void {\r\n        this._labelMeshes.forEach(label => {\r\n            label.dispose(false, true);\r\n        });\r\n\r\n        this._labelMeshes = [];\r\n    }\r\n\r\n    /** \r\n     * Force the chart to redraw itself \r\n     * @returns the current chart\r\n    */\r\n    public abstract refresh(): Chart;\r\n\r\n    /** Release all associated resources */\r\n    public dispose() {\r\n        this.onElementCreatedObservable.clear();\r\n        this.onPickedPointChangedObservable.clear();\r\n        this.onElementEnterObservable.clear();\r\n        this.onElementOutObservable.clear();\r\n\r\n        this.labelCreationFunction = null;\r\n\r\n        if (this._onElementEnterObserver) {\r\n            this.onElementEnterObservable.remove(this._onElementEnterObserver);\r\n            this._onElementEnterObserver = null;\r\n        }\r\n\r\n        if (this._onElementOutObserver) {\r\n            this.onElementOutObservable.remove(this._onElementOutObserver);\r\n            this._onElementOutObserver = null;\r\n        }         \r\n\r\n        if (this._pointerObserver) {\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n            this._pointerObserver = null;\r\n        }\r\n\r\n        this.glowHover = false;\r\n\r\n        if (this._pickedPointObserver) {\r\n            this.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n            this._pickedPointObserver = null;\r\n        }\r\n\r\n        this._rootNode.dispose();\r\n    }\r\n\r\n    protected _clean(): void {\r\n        // Cleanup\r\n        var descendants = this._rootNode.getDescendants();\r\n        descendants.forEach(n => n.dispose());\r\n    }\r\n}","import { Nullable, Scene, Mesh, StandardMaterial, Animation, Engine, Matrix, AbstractMesh } from \"babylonjs\";\r\nimport { Chart } from \".\";\r\nimport { AdvancedDynamicTexture, DisplayGrid } from \"../../2D\";\r\n\r\n/** \r\n * Class used to render bar graphs \r\n * @see http://doc.babylonjs.com/how_to/chart3d#bargraph\r\n */\r\nexport class BarGraph extends Chart {\r\n    private _margin = 1;\r\n    private _maxBarHeight = 10;\r\n    private _barMeshes: Nullable<Array<AbstractMesh>>;\r\n    private _backgroundMesh: Nullable<Mesh>;\r\n    private _backgroundADT : Nullable<AdvancedDynamicTexture>;\r\n    \r\n    private _displayBackground = true;\r\n    private _backgroundResolution = 512;\r\n    private _backgroundTickCount = 5;\r\n\r\n    /** Gets or sets a boolean indicating if the background must be displayed */\r\n    public get displayBackground(): boolean {\r\n        return this._displayBackground;\r\n    }\r\n\r\n    public set displayBackground(value: boolean) {\r\n        if (this._displayBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayBackground = value;\r\n\r\n        this.refresh();\r\n    }     \r\n\r\n    /** Gets or sets the margin between bars */\r\n    public get margin(): number {\r\n        return this._margin;\r\n    }\r\n\r\n    public set margin(value: number) {\r\n        if (this._margin === value) {\r\n            return;\r\n        }\r\n\r\n        this._margin = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /** Gets or sets the maximum height of a bar */\r\n    public get maxBarHeight(): number {\r\n        return this._maxBarHeight;\r\n    }\r\n\r\n    public set maxBarHeight(value: number) {\r\n        if (this._maxBarHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._maxBarHeight = value;\r\n\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BarGraph\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Children class can override this function to provide a new mesh (as long as it stays inside a 1x1x1 box)\r\n     * @param name defines the mesh name\r\n     * @param scene defines the hosting scene\r\n     * @returns a new mesh used to represent the current bar\r\n     */\r\n    protected _createBarMesh(name: string, scene: Scene): Mesh {\r\n        var box = Mesh.CreateBox(name, 1, scene);\r\n        box.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n        return box;\r\n    }\r\n\r\n    /** \r\n     * Force the graph to redraw itself \r\n     * @returns the current BarGraph\r\n    */\r\n    public refresh(): BarGraph {\r\n        if (this._blockRefresh) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._dataSource) {\r\n            this._clean();\r\n            return this;\r\n        }\r\n\r\n        const scene = this._rootNode.getScene();\r\n\r\n        // Default material\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = this._createDefaultMaterial(scene);\r\n        }\r\n\r\n        // Scan data\r\n        let min = 0;\r\n        let max = Number.MIN_VALUE;\r\n\r\n        const data = this._dataFilters ? this._dataSource.getFilteredData(this._dataFilters) : this._dataSource.data;\r\n\r\n        // Check the limit of the entire series\r\n        this._dataSource.data.forEach(entry => {\r\n            if (min > entry.value) {\r\n                min = entry.value;\r\n            }\r\n\r\n            if (max < entry.value) {\r\n                max = entry.value;\r\n            }\r\n        });\r\n\r\n        let ratio = this._maxBarHeight / (max - min);\r\n\r\n        let createMesh = false;\r\n        let left = -(data.length / 2) * (this._elementWidth + this.margin) + 1.5 * this._margin;\r\n\r\n        // Do we need to create new graph or animate the current one\r\n        if (!this._barMeshes || this._barMeshes.length !== data.length) {\r\n            this._clean();\r\n            createMesh = true;\r\n            this._barMeshes = [];\r\n        }        \r\n\r\n        this._removeLabels();\r\n\r\n        if (this._backgroundMesh) {\r\n            this._backgroundMesh.dispose(false, true);\r\n            this._backgroundMesh = null;\r\n        }\r\n\r\n        if (this._displayBackground) {\r\n            // Axis\r\n            this._backgroundMesh = BABYLON.Mesh.CreatePlane(\"background\", 1, scene);\r\n            this._backgroundMesh.parent = this._rootNode;            \r\n            this._backgroundMesh.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n            this._backgroundADT = AdvancedDynamicTexture.CreateForMesh(this._backgroundMesh, this._backgroundResolution, this._backgroundResolution, false);\r\n\r\n            let displayGrid = new DisplayGrid();\r\n            displayGrid.displayMajorLines = false;\r\n            displayGrid.minorLineColor = \"White\";\r\n            displayGrid.minorLineTickness = 2;\r\n            displayGrid.cellWidth = this._backgroundResolution / data.length;\r\n            displayGrid.cellHeight = this._backgroundResolution / this._backgroundTickCount;\r\n\r\n            this._backgroundADT.addControl(displayGrid);\r\n\r\n            (<StandardMaterial>this._backgroundMesh.material!).opacityTexture = null;\r\n\r\n            this._backgroundMesh.position.z = this._elementWidth;\r\n            this._backgroundMesh.scaling.x = (this._elementWidth + this.margin) * data.length;\r\n            this._backgroundMesh.scaling.y = this._maxBarHeight; \r\n\r\n            for (var tickIndex = 0; tickIndex <= this._backgroundTickCount; tickIndex++) {\r\n                var label = (max / this._backgroundTickCount) * tickIndex + \"\";\r\n                var ticklabel = this._addLabel(label, this._elementWidth, false);\r\n                ticklabel.position.x = left - this._elementWidth;\r\n                ticklabel.position.y = (this.maxBarHeight * tickIndex) / this._backgroundTickCount;\r\n                ticklabel.position.z = this._elementWidth;\r\n            }\r\n        }\r\n\r\n        // We will generate one bar per entry\r\n        let index = 0;\r\n        data.forEach(entry => {\r\n\r\n            var barMesh: AbstractMesh;\r\n            if (createMesh) {\r\n                barMesh = this._createBarMesh(this.name + \"_box_\" + index++, scene);\r\n                barMesh.enablePointerMoveEvents = true;\r\n                this._barMeshes!.push(barMesh);\r\n            } else {\r\n                barMesh = this._barMeshes![index++];\r\n            }\r\n\r\n            barMesh.material = this._defaultMaterial;\r\n            barMesh.metadata = entry;\r\n            barMesh.parent = this._rootNode;\r\n            barMesh.position.x = left;\r\n            let currentScalingYState = barMesh.scaling.y;\r\n            barMesh.scaling.set(this._elementWidth, 0, this._elementWidth);\r\n\r\n            var easing = new BABYLON.CircleEase();\r\n            Animation.CreateAndStartAnimation(\"entryScale\", barMesh, \"scaling.y\", 30, 30, currentScalingYState, entry.value * ratio, 0, easing);\r\n\r\n            this.onElementCreatedObservable.notifyObservers(barMesh);\r\n\r\n            left += this._elementWidth + this.margin;\r\n\r\n            // Label\r\n            if (!this.labelDimension || !this.displayLabels) {\r\n                return;\r\n            }\r\n\r\n            let label = this._addLabel(entry[this.labelDimension], this._elementWidth);\r\n            label.position = barMesh.position.clone();\r\n            label.position.z -= this._elementWidth;\r\n        });\r\n\r\n        this.onRefreshObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _clean(): void {\r\n        super._clean();\r\n        this._barMeshes = null;\r\n        this._backgroundMesh = null;\r\n\r\n        if (this._backgroundADT) {\r\n            this._backgroundADT.dispose();\r\n            this._backgroundADT = null;\r\n        }\r\n    }\r\n}","import { Chart } from \".\";\r\nimport { Engine, Scene, Nullable, Mesh, Animation, Texture, Matrix, Observer, Vector3, Material, AbstractMesh } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials\";\r\n\r\n/** \r\n * Class used to render bar graphs \r\n * @see http://doc.babylonjs.com/how_to/chart3d#mapgraph\r\n */\r\nexport class MapGraph extends Chart {\r\n\r\n    private _cylinderMeshes: Nullable<Array<AbstractMesh>>;\r\n    private _maxCylinderHeight = 10;\r\n    private _worldMap: Nullable<Mesh>;\r\n    private _mercatorMaterial: Nullable<FluentMaterial>;\r\n    private _worldMapSize = 40;   \r\n    private _cylinderTesselation = 16;\r\n    private _xOffset = 0;\r\n    private _yOffset = 0;\r\n    private _worldMapPickedPointObserver: Nullable<Observer<Vector3>>;  \r\n\r\n    /** Gets or sets the maximum height of a cylinder */\r\n    public get maxCylinderHeight(): number {\r\n        return this._maxCylinderHeight;\r\n    }\r\n\r\n    public set maxCylinderHeight(value: number) {\r\n        if (this._maxCylinderHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._maxCylinderHeight = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    /** Gets or sets the offset (in world unit) on X axis to apply to all elements */\r\n    public get xOffset(): number {\r\n        return this._xOffset;\r\n    }\r\n\r\n    public set xOffset(value: number) {\r\n        if (this._xOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._xOffset = value;\r\n\r\n        this.refresh();\r\n    }    \r\n    \r\n    /** Gets or sets the offset (in world unit) on Y axis to apply to all elements */\r\n    public get yOffset(): number {\r\n        return this._yOffset;\r\n    }\r\n\r\n    public set yOffset(value: number) {\r\n        if (this._yOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._yOffset = value;\r\n\r\n        this.refresh();\r\n    }       \r\n\r\n    /** Gets or sets the tesselation used to build the cylinders */\r\n    public get cylinderTesselation(): number {\r\n        return this._cylinderTesselation;\r\n    }\r\n\r\n    public set cylinderTesselation(value: number) {\r\n        if (this._cylinderTesselation === value) {\r\n            return;\r\n        }\r\n\r\n        this._cylinderTesselation = value;\r\n        this._clean();\r\n\r\n        this.refresh();\r\n    }        \r\n\r\n    \r\n    /** Gets or sets the size of the world map (this will define the width of the supporting plane) */\r\n    public get worldMapSize(): number {\r\n        return this._worldMapSize;\r\n    }\r\n\r\n    public set worldMapSize(value: number) {\r\n        if (this._worldMapSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._worldMapSize = value;\r\n\r\n        this.refresh();\r\n    }    \r\n\r\n    public updateHoverLabel = (meshLabel: Mesh) => {\r\n        if (!this.labelDimension || !this.displayLabels) {\r\n            return;\r\n        }\r\n\r\n        meshLabel.position.y += 1.5;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the world map\r\n     */\r\n    public get worldMapMaterial(): Nullable<Material> {\r\n        return this._mercatorMaterial;\r\n    }\r\n\r\n    /** Sets the texture url to use for the world map */\r\n    public set worldMapUrl(value: string) {\r\n        const scene = this._scene;\r\n        if (!this._mercatorMaterial) {\r\n            this._mercatorMaterial = new FluentMaterial(\"WorldMap\", scene!);\r\n    \r\n            this._mercatorMaterial.backFaceCulling = false;\r\n    \r\n            this._mercatorMaterial.renderHoverLight = true;\r\n            this._mercatorMaterial.hoverRadius = 3;\r\n    \r\n            this._worldMapPickedPointObserver = this.onPickedPointChangedObservable.add(pickedPoint => {\r\n                if (pickedPoint) {\r\n                    this._mercatorMaterial!.hoverPosition = pickedPoint;\r\n                    this._mercatorMaterial!.hoverColor.a = 1.0;\r\n                } else {\r\n                    this._mercatorMaterial!.hoverColor.a = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._mercatorMaterial.albedoTexture) {\r\n            this._mercatorMaterial.albedoTexture.dispose();\r\n        }\r\n\r\n        const texture = new Texture(value, scene, false, true, Texture.LINEAR_LINEAR_MIPLINEAR, () => {\r\n            this.refresh();\r\n        });\r\n        this._mercatorMaterial.albedoTexture = texture;\r\n    }\r\n    \r\n    /**\r\n     * Creates a new MapGraph\r\n     * @param name defines the name of the graph\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, mapUrl: string, scene: Nullable<Scene> = Engine.LastCreatedScene) {\r\n        super(name, scene);\r\n\r\n        this.worldMapUrl = mapUrl;\r\n    }\r\n\r\n    protected _createCylinderMesh(name: string, scene: Scene): Mesh {\r\n        var cylinder = Mesh.CreateCylinder(name, 1, 1, 1, this._cylinderTesselation, 1, scene);\r\n        cylinder.setPivotMatrix(Matrix.Translation(0, 0.5, 0), false);\r\n\r\n        return cylinder;\r\n    }\r\n\r\n    public refresh(): MapGraph {\r\n        if (this._blockRefresh || !this._mercatorMaterial || !this._mercatorMaterial.albedoTexture!.isReady()) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._dataSource) {\r\n            this._clean();\r\n            return this;\r\n        }\r\n\r\n        const scene = this._rootNode.getScene();\r\n        const data = this._dataFilters ? this._dataSource.getFilteredData(this._dataFilters) : this._dataSource.data;\r\n        let createMesh = false;\r\n\r\n        // Do we need to create new graph or animate the current one\r\n        if (!this._cylinderMeshes || this._cylinderMeshes.length !== data.length) {\r\n            this._clean();\r\n            createMesh = true;\r\n            this._cylinderMeshes = [];\r\n        }      \r\n\r\n        // Scan data\r\n        let min = 0;\r\n        let max = Number.MIN_VALUE;\r\n\r\n        // Check the limit of the entire series\r\n        this._dataSource.data.forEach(entry => {\r\n            if (min > entry.value) {\r\n                min = entry.value;\r\n            }\r\n\r\n            if (max < entry.value) {\r\n                max = entry.value;\r\n            }\r\n        });\r\n\r\n        let ratio = this._maxCylinderHeight / (max - min);     \r\n\r\n        this._removeLabels();\r\n        \r\n        const worldMaptextureSize = this._mercatorMaterial.albedoTexture!.getSize();\r\n        const worldMapWidth = this._worldMapSize;\r\n        const worldMapHeight = worldMapWidth * worldMaptextureSize.height / worldMaptextureSize.width;\r\n\r\n        if (this._worldMap) {\r\n            this._worldMap.dispose();\r\n        }\r\n\r\n        this._worldMap = Mesh.CreateGround(\"WorldMap\", worldMapWidth, worldMapHeight, 1, scene);\r\n        this._worldMap.parent = this._rootNode;\r\n        this._worldMap.material = this._mercatorMaterial;\r\n        this._worldMap.enablePointerMoveEvents = true;\r\n\r\n        // Default material\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = this._createDefaultMaterial(scene);\r\n        }        \r\n        \r\n        // We will generate one cylinder per entry\r\n        let index = 0;\r\n        data.forEach(entry => {\r\n\r\n            var cylinderMesh: AbstractMesh;\r\n            if (createMesh) {\r\n                cylinderMesh = this._createCylinderMesh(this.name + \"_cylinder_\" + index++, scene);\r\n                cylinderMesh.enablePointerMoveEvents = true;\r\n                this._cylinderMeshes!.push(cylinderMesh);\r\n            } else {\r\n                cylinderMesh = this._cylinderMeshes![index++];\r\n            }\r\n\r\n            cylinderMesh.material = this._defaultMaterial;\r\n            cylinderMesh.metadata = entry;\r\n            cylinderMesh.parent = this._rootNode;\r\n            let currentScalingYState = cylinderMesh.scaling.y;\r\n            cylinderMesh.scaling.set(this._elementWidth / 2, 0, this._elementWidth / 2);\r\n\r\n            // Lat/long convertion\r\n            const latitude: number = entry.latitude;\r\n            const longitude: number = entry.longitude;\r\n            const x = (longitude + 180) * (worldMapWidth / 360) - worldMapWidth / 2;\r\n            const latRad = latitude * Math.PI / 180;\r\n            const mercN = Math.log(Math.tan(Math.PI / 4 + latRad / 2));\r\n            const z = worldMapWidth * mercN / (2 * Math.PI);\r\n            cylinderMesh.position.set(x + this._xOffset, 0.01, z + this._yOffset);\r\n\r\n            var easing = new BABYLON.CircleEase();\r\n            Animation.CreateAndStartAnimation(\"entryScale\", cylinderMesh, \"scaling.y\", 30, 30, currentScalingYState, entry.value * ratio, 0, easing);\r\n\r\n            this.onElementCreatedObservable.notifyObservers(cylinderMesh);\r\n\r\n            // Label\r\n            if (!this.labelDimension || !this.displayLabels) {\r\n                return;\r\n            }\r\n\r\n            let label = this._addLabel(entry[this.labelDimension], this._elementWidth);\r\n            label.position = cylinderMesh.position.clone();\r\n            Animation.CreateAndStartAnimation(\"labelScale\", label, \"position.y\", 30, 30, currentScalingYState + 1.0, entry.value * ratio + 1.0, 0, easing);\r\n        });\r\n\r\n        this.onRefreshObservable.notifyObservers(this);\r\n    \r\n        return this;\r\n    }\r\n\r\n    protected _clean(): void {\r\n        super._clean();\r\n        this._worldMap = null;\r\n        this._cylinderMeshes = null;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        if (this._worldMapPickedPointObserver) {\r\n            this.onPickedPointChangedObservable.remove(this._worldMapPickedPointObserver);\r\n            this._worldMapPickedPointObserver = null;    \r\n        }\r\n    }\r\n}","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}