{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/baseSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewer.ts","webpack://BABYLON.GUI/./src/2D/controls/scrollViewers/scrollViewerWindow.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/scrollBar.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/sliders/imageBasedSlider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/2D/adtInstrumentation.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_wasDirty","_tempParentMeasure","_tempCurrentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_isMatrixDirty","_isVisible","_isHighlighted","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","_rebuildLayout","_isClipped","metadata","isHitTestVisible","isPointerBlocker","isFocusInvisible","clipChildren","useBitmapCache","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onBeforeDrawObservable","onAfterDrawObservable","_markAsDirty","_getTypeName","getClassName","_host","_fontOffset","offset","_transform","_markMatrixAsDirty","toString","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","parent","_reOrderControl","_linkedMesh","left","top","getAscendantOfClass","className","isAscendant","container","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","_getDescendants","results","directDescendantsOnly","predicate","getDescendants","Array","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","_offsetLeft","_offsetTop","_flagDescendantsAsMatrixDirty","_intersectsRect","rect","invalidateRect","right","bottom","host","useInvalidateRectOptimization","rectanglePoints","BABYLON","Polygon","Rectangle","min","Number","MAX_VALUE","max","transformCoordinates","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","uniqueId","getScene","getUniqueId","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_renderHighlight","isHighlighted","save","strokeStyle","lineWidth","_renderHighlightSpecific","restore","strokeRect","_applyStates","_isFontSizeInPercentage","font","fillStyle","AllowAlphaInheritance","globalAlpha","alpha","_layout","parentMeasure","isVisible","isEqualsTo","copyFrom","rebuildCount","_processMeasures","_evaluateClippingState","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_clipForChildren","_clip","invalidatedRectangle","beginPath","_ClipMeasure","shadowBlur","shadowOffsetX","shadowOffsetY","leftShadowOffset","rightShadowOffset","topShadowOffset","bottomShadowOffset","clip","_render","_cacheData","putImageData","_draw","getImageData","contains","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","canNotify","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_registerLastControlDown","_lastPickedControl","POINTERUP","_lastControlDown","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","_originalUnit","refValue","updateInPlace","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control_1","Container","_super","_children","_measureForChildren","_background","_adaptWidthToChildren","_adaptHeightToChildren","__extends","_i","_a","children","getChildByName","child","getChildByType","typeName","containsControl","control","addControl","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","shadowColor","fillRect","_beforeLayout","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","_postMeasure","item","_changeCursor","control3D_1","Container3D","_blockLayout","_arrangeChildren","updateLayout","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","other","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_breakLines","maxLineWidth","line","newWidth","paddingLeftInPixels","paddingRightInPixels","internalValue","newHeight","paddingTopInPixels","paddingBottomInPixels","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","outlineColor","refWidth","lines","split","Ellipsis","_lines_1","_line","_parseLineEllipsis","WordWrap","_lines_2","apply","_parseLineWordWrap","_b","_lines_3","_parseLine","measureText","words","testLine","testWidth","rootY","computeExpectedHeight","widthInPixels","context_1","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","isVertical","stackWidth","stackHeight","Warn","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","radius","moveTo","lineTo","quadraticCurveTo","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","BaseSlider","_thumbWidth","_minimum","_maximum","_barOffset","_isThumbClamped","_displayThumb","_effectiveBarOffset","onValueChangedObservable","_pointerIsDown","_getThumbPosition","maximum","minimum","_backgroundBoxLength","_getThumbThickness","thumbThickness","_backgroundBoxThickness","_prepareRenderingData","_renderLeft","_renderTop","_renderWidth","_renderHeight","_effectiveThumbThickness","displayThumb","console","error","isThumbClamped","_updateValueFromPointer","rotation","_capturingControl","rectangle_1","textBlock_1","image_1","Button","thickness","alphaStore","pointerEnterAnimation","pointerOutAnimation","pointerDownAnimation","scaleX","scaleY","pointerUpAnimation","_image","_textBlock","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","Image","stretch","STRETCH_UNIFORM","CreateImageOnlyButton","STRETCH_FILL","CreateSimpleButton","CreateImageWithCenterTextButton","url","_loaded","_stretch","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","_populateNinePatchSlicesFromImage","onImageLoadedObservable","_extractNinePatchSliceDataFromImage","_sliceLeft","_sliceRight","_sliceTop","_sliceBottom","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_WorkingCanvas","canvas","drawImage","imageData","data","_source","SetCorsBehavior","src","STRETCH_NONE","STRETCH_EXTEND","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","hRatio","vRatio","ratio","centerX","centerY","STRETCH_NINE_PATCH","_renderNinePatch","_renderCornerPatch","targetX","targetY","leftWidth","topHeight","bottomHeight","rightWidth","centerWidth","targetCenterWidth","sliceLeft","targetTopHeight","InputText","_placeholderText","_focusedBackground","_focusedColor","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","_isTextHighlightOn","_textHighlightColor","_highligherOpacity","_highlightedText","_startHighlightIndex","_endHighlightIndex","_cursorIndex","_onFocusSelectAll","_isPointerDown","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","onTextHighlightObservable","onTextCopyObservable","onTextCutObservable","onTextPasteObservable","onKeyboardEventProcessedObservable","flag","valueAsString","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","unRegisterClipboardEvents","_onClipboardObserver","onClipboardObservable","_onPointerDblTapObserver","onPointerObservable","onFocus","navigator","userAgent","prompt","focusedControl","registerClipboardEvents","clipboardInfo","ClipboardEventTypes","COPY","_onCopyText","event","CUT","_onCutText","PASTE","_onPasteText","pointerInfo","POINTERDOUBLETAP","_processDblClick","_selectAllText","keepsFocusWith","_connectedVirtualKeyboard","processKey","keyCode","evt","ctrlKey","metaKey","preventDefault","substr","deletePosition","decrementor","shiftKey","deadKey","insertPosition","_updateValueFromCursorIndex","moveLeft","moveRight","rWord","search","_clickedCoordinate","processKeyboard","ev","clipboardData","setData","types","getData","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","highlightCursorOffsetWidth","substring","highlightCursorLeft","charAt","focusedColor","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","getRowDefinition","getColumnDefinition","addRowDefinition","addColumnDefinition","setRowDefinition","current","setColumnDefinition","getChildrenAt","cell","getChildCellInfo","_tag","_removeCell","childIndex","_offsetCell","previousKey","removeColumnDefinition","removeRowDefinition","goodContainer","_getGridDefinitions","definitionCallback","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","top_1","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_clipboardData","onControlPickedObservable","onBeginLayoutObservable","onEndLayoutObservable","onBeginRenderObservable","onEndRenderObservable","premulAlpha","_useInvalidateRectOptimization","_clearRectangle","_invalidatedRectangle","_clearMeasure","onClipboardCopy","ClipboardInfo","onClipboardCut","onClipboardPaste","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","getChildren","layer","isBackground","executeOnAllControls","func","clearMinX","clearMinY","clearMaxX","clearMaxY","minX","minY","maxX","maxY","floor","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","update","measure","clearRect","cursor","_doPicking","viewport","cameraToUseForPointers","activeCamera","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","self","addEventListener","removeEventListener","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","friendlyControls","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","isPickable","_affectMaterial","Vector3WithInfo","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","checkbox","header","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_borderColor","_isThumbCircle","_displayValueBar","isThumbCircle","thumbPosition","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","g","Function","e","inputText_1","button_1","grid_1","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_Epsilon","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","image","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","dx","dy","ShowPickerDialogAsync","advancedTexture","options","Promise","resolve","reject","pickerWidth","pickerHeight","headerHeight","lastColor","swatchLimit","numSwatchesPerLine","closeIconColor","buttonFontSize","butEdit","buttonWidth","buttonHeight","currentColor","swatchNumber","swatchDrawer","picker","rValInt","gValInt","bValInt","rValDec","gValDec","bValDec","hexVal","newSwatch","lastVal","activeField","drawerMaxRows","rawSwatchSize","gutterSize","colGutters","swatchSize","drawerMaxSize","containerSize","buttonColor","buttonBackgroundColor","buttonBackgroundHoverColor","buttonBackgroundClickColor","buttonDisabledColor","buttonDisabledBackgroundColor","luminanceLimitColor","FromHexString","luminanceLimit","iconColorDark","iconColorLight","inputFieldLabels","editSwatchMode","updateValues","inputField","pickedColor","toHexString","background","minusPound","updateInt","field","channel","newValue","test","isNaN","newSwatchRGB","updateFloat","createSwatch","savedColors","icon","swatch","swatchColor","swatchLuminence","fontSize","metadata_1","setEditButtonVisibility","updateSwatches","butSave","editSwatches","gutterCount","currentRows","thisRow","totalButtonsThisRow","buttonIterations","w","disableButton","enableButton","pickerGrid","disabled","closePicker","dialogContainer","topRow","initialRows","pickerPanel","panelHead","pickerPanelRows","closeButton","headerColor3","textVerticalAlignment","currentSwatch","dialogBody","dialogBodyCols","pickerBodyRight","pickerBodyRightRows","pickerSwatchesButtons","pickerButtonsCol","pickerSwatches","pickeSwatchesRows","activeSwatches","labelWidth","labelHeight","labelTextSize","newText","swatchOutline","currentText","buttonGrid","butOK","butCancel","pickerColorValues","rgbValuesQuadrant","labelText","hexValueQuadrant","val","newHexValue","checkHex","leadingZero","Ellipse","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","scrollViewerWindow_1","scrollBar_1","ScrollViewer","_barSize","_pointerIsOver","_wheelPrecision","_horizontalBarSpace","_verticalBarSpace","_dragSpace","_grid","_horizontalBar","ScrollBar","_verticalBar","_window","_ScrollViewerWindow","barOffset","_endTop","_endLeft","barColor","barBackground","resetWindow","_buildClientSizes","parentClientWidth","parentClientHeight","_clientWidth","_clientHeight","_updateScroller","_barBackground","windowContentsWidth","windowContentsHeight","horizontalMultiplicator","verticalMultiplicator","thumbWidth","_attachWheel","_onPointerObserver","POINTERWHEEL","deltaY","deltaX","maxWidth","maxHeight","baseSlider_1","_thumbMeasure","_first","_originX","_originY","delta","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","cellX","cellY","ImageBasedSlider","_tempMeasure","thumbImage","_backgroundImage","isLoaded","_valueBarImage","_thumbImage","AdvancedDynamicTextureInstrumentation","_captureRenderTime","_renderTime","PerfCounter","_captureLayoutTime","_layoutTime","_onBeginRenderObserver","_onEndRenderObserver","_onBeginLayoutObserver","_onEndLayoutObserver","beginMonitoring","endMonitoring","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","addChild","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","pickUtilitySceneFirst","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    /**\r\n     * Gets or sets a boolean indicating if alpha must be an inherited value (false by default)\r\n     */\r\n    public static AllowAlphaInheritance = false;\r\n\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _isDirty = true;\r\n    /** @hidden */\r\n    protected _wasDirty = false;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    public _tempCurrentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    private _isHighlighted = false;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    protected _rebuildLayout = false;\r\n\r\n    /** @hidden */\r\n    public _isClipped = false;\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node. Please note that this number will be updated when the control is added to a container\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a boolean indicating if the children are clipped to the current control bounds */\r\n    public clipChildren = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the current control should cache its rendering (useful when the control does not change often)\r\n     */\r\n    public useBitmapCache = false;\r\n\r\n    private _cacheData: Nullable<ImageData>;\r\n\r\n    private _shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public get shadowOffsetX() {\r\n        return this._shadowOffsetX;\r\n    }\r\n\r\n    public set shadowOffsetX(value: number) {\r\n        if (this._shadowOffsetX === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetX = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public get shadowOffsetY() {\r\n        return this._shadowOffsetY;\r\n    }\r\n\r\n    public set shadowOffsetY(value: number) {\r\n        if (this._shadowOffsetY === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowOffsetY = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowBlur = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public get shadowBlur() {\r\n        return this._shadowBlur;\r\n    }\r\n\r\n    public set shadowBlur(value: number) {\r\n        if (this._shadowBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowBlur = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _shadowColor = 'black';\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public get shadowColor() {\r\n        return this._shadowColor;\r\n    }\r\n\r\n    public set shadowColor(value: string) {\r\n        if (this._shadowColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered before drawing the control\r\n     */\r\n    public onBeforeDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * An event triggered after the control was drawn\r\n     */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /**\r\n     * Get the hosting AdvancedDynamicTexture\r\n     */\r\n    public get host(): AdvancedDynamicTexture {\r\n        return this._host;\r\n    }\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that we want to highlight the control (mostly for debugging purpose)\r\n     */\r\n    public get isHighlighted(): boolean {\r\n        return this._isHighlighted;\r\n    }\r\n\r\n    public set isHighlighted(value: boolean) {\r\n        if (this._isHighlighted === value) {\r\n            return;\r\n        }\r\n\r\n        this._isHighlighted = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._transform();\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the horizontal alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the vertical alignment\r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control width\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets control height\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        if (!this._fontSet) {\r\n            return \"\";\r\n        }\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this.parent) {\r\n            this.parent._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if (this._disabledColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first ascendant in the hierarchy of the given type\r\n     * @param className defines the required type\r\n     * @returns the ascendant or null if not found\r\n     */\r\n    public getAscendantOfClass(className: string): Nullable<Control> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        if (this.parent.getClassName() === className) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent.getAscendantOfClass(className);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets coordinates in parent local control space\r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /**\r\n     * Will return all controls that have this control as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @return all child controls\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\r\n        var results = new Array<Control>();\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this.parent && this.parent !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.left += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        this._isDirty = true;\r\n        this._currentMeasure.top += offset;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._flagDescendantsAsMatrixDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        // No child\r\n    }\r\n\r\n    /** @hidden */\r\n    public _intersectsRect(rect: Measure) {\r\n        if (this._currentMeasure.left >= rect.left + rect.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top >= rect.top + rect.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width <= rect.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height <= rect.top) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected invalidateRect(left: number, top: number, right: number, bottom: number) {\r\n        if (this.host && this.host.useInvalidateRectOptimization) {\r\n            // Compute AABB of transformed container box (eg. to handle rotation and scaling)\r\n            var rectanglePoints = BABYLON.Polygon.Rectangle(left, top, right, bottom);\r\n            var min = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n            var max = new Vector2(0, 0);\r\n            for (var i = 0; i < 4; i++) {\r\n                this._transformMatrix.transformCoordinates(rectanglePoints[i].x, rectanglePoints[i].y, rectanglePoints[i]);\r\n                min.x = Math.min(min.x, rectanglePoints[i].x);\r\n                min.y = Math.min(min.y, rectanglePoints[i].y);\r\n                max.x = Math.max(max.x, rectanglePoints[i].x);\r\n                max.y = Math.max(max.y, rectanglePoints[i].y);\r\n            }\r\n\r\n            this.host.invalidateRect(\r\n                min.x,\r\n                min.y,\r\n                max.x,\r\n                max.y,\r\n                left,\r\n                top,\r\n                right,\r\n                bottom\r\n            );\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        // Redraw only this rectangle\r\n        if (this._host) {\r\n            this._host.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        this._host = host;\r\n        if (this._host) {\r\n            this.uniqueId = this._host.getScene()!.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context?: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        if (context) {\r\n            context.translate(offsetX, offsetY);\r\n\r\n            // rotate\r\n            context.rotate(this._rotation);\r\n\r\n            // scale\r\n            context.scale(this._scaleX, this._scaleY);\r\n\r\n            // preTranslate\r\n            context.translate(-offsetX, -offsetY);\r\n        }\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n            this._flagDescendantsAsMatrixDirty();\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this.parent ? this.parent._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlight(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        context.save();\r\n        context.strokeStyle = \"#4affff\";\r\n        context.lineWidth = 2;\r\n\r\n        this._renderHighlightSpecific(context);\r\n        context.restore();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        context.strokeRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._fontSet = true;\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (Control.AllowAlphaInheritance) {\r\n            context.globalAlpha *= this._alpha;\r\n        } else if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._tempCurrentMeasure.copyFrom(this._currentMeasure);\r\n\r\n            context.save();\r\n\r\n            this._applyStates(context);\r\n\r\n            let rebuildCount = 0;\r\n            do {\r\n                this._rebuildLayout = false;\r\n                this._processMeasures(parentMeasure, context);\r\n                rebuildCount++;\r\n            }\r\n            while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n            if (rebuildCount >= 3) {\r\n                BABYLON.Tools.Error(`Layout cycle detected in GUI (Control name=${this.name}, uniqueId=${this.uniqueId})`);\r\n            }\r\n\r\n            context.restore();\r\n            this.invalidateRect(\r\n                Math.min(this._currentMeasure.left, this._tempCurrentMeasure.left),\r\n                Math.min(this._currentMeasure.top, this._tempCurrentMeasure.top),\r\n                Math.max(this._currentMeasure.left + this._currentMeasure.width, this._tempCurrentMeasure.left + this._tempCurrentMeasure.width),\r\n                Math.max(this._currentMeasure.top + this._currentMeasure.height, this._tempCurrentMeasure.top + this._tempCurrentMeasure.height)\r\n            );\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n\r\n        this._wasDirty = this._isDirty;\r\n        this._isDirty = false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n        // Let children take some pre-measurement actions\r\n        this._preMeasure(parentMeasure, context);\r\n\r\n        this._measure();\r\n        this._computeAlignment(parentMeasure, context);\r\n\r\n        // Convert to int values\r\n        this._currentMeasure.left = this._currentMeasure.left | 0;\r\n        this._currentMeasure.top = this._currentMeasure.top | 0;\r\n        this._currentMeasure.width = this._currentMeasure.width | 0;\r\n        this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n        // Let children add more features\r\n        this._additionalProcessing(parentMeasure, context);\r\n\r\n        this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n        if (this.onDirtyObservable.hasObservers()) {\r\n            this.onDirtyObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    protected _evaluateClippingState(parentMeasure: Measure) {\r\n        if (this.parent && this.parent.clipChildren) {\r\n            // Early clip\r\n            if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n\r\n            if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n                this._isClipped = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isClipped = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    private static _ClipMeasure = new Measure(0, 0, 0, 0);\r\n    private _clip(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>) {\r\n        context.beginPath();\r\n\r\n        Control._ClipMeasure.copyFrom(this._currentMeasure);\r\n        if (invalidatedRectangle) {\r\n            var right = Math.min(invalidatedRectangle.left + invalidatedRectangle.width, this._currentMeasure.left + this._currentMeasure.width);\r\n            var bottom = Math.min(invalidatedRectangle.top + invalidatedRectangle.height, this._currentMeasure.top + this._currentMeasure.height);\r\n            Control._ClipMeasure.left = Math.max(invalidatedRectangle.left, this._currentMeasure.left);\r\n            Control._ClipMeasure.top = Math.max(invalidatedRectangle.top, this._currentMeasure.top);\r\n            Control._ClipMeasure.width = right - Control._ClipMeasure.left;\r\n            Control._ClipMeasure.height = bottom - Control._ClipMeasure.top;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(\r\n                Control._ClipMeasure.left + leftShadowOffset,\r\n                Control._ClipMeasure.top + topShadowOffset,\r\n                Control._ClipMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                Control._ClipMeasure.height + bottomShadowOffset - topShadowOffset\r\n            );\r\n        } else {\r\n            context.rect(Control._ClipMeasure.left, Control._ClipMeasure.top, Control._ClipMeasure.width, Control._ClipMeasure.height);\r\n        }\r\n\r\n        context.clip();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _render(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): boolean {\r\n        if (!this.isVisible || this.notRenderable || this._isClipped) {\r\n            this._isDirty = false;\r\n            return false;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        // Clip\r\n        if (this.clipChildren) {\r\n            this._clip(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.onBeforeDrawObservable.hasObservers()) {\r\n            this.onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.useBitmapCache && !this._wasDirty && this._cacheData) {\r\n            context.putImageData(this._cacheData, this._currentMeasure.left, this._currentMeasure.top);\r\n        } else {\r\n            this._draw(context, invalidatedRectangle);\r\n        }\r\n\r\n        if (this.useBitmapCache && this._wasDirty) {\r\n            this._cacheData = context.getImageData(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        this._renderHighlight(context);\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Nullable<Measure>): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerMove(target, coordinates); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerEnter(target); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (!this._isEnabled || target === this) {\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = true;\r\n\r\n        if (!target.isAscendant(this)) {\r\n            canNotify = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n        }\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerOut(target); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex); }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) { this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick); }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._registerLastControlDown(this, pointerId);\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onBeforeDrawObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this.parent) {\r\n            this.parent.removeControl(this);\r\n            this.parent = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    private _originalUnit: number;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n        this._originalUnit = unit;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Update the current value and unit. This should be done cautiously as the GUi won't be marked as dirty with this function.\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @returns the current ValueAndUnit\r\n     */\r\n    public updateInPlace(value: number, unit = ValueAndUnit.UNITMODE_PIXEL): ValueAndUnit {\r\n        this._value = value;\r\n        this.unit = unit;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this._originalUnit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background = \"\";\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this.children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this.children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetLeft(offset: number) {\r\n        super._offsetLeft(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetLeft(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _offsetTop(offset: number) {\r\n        super._offsetTop(offset);\r\n\r\n        for (var child of this._children) {\r\n            child._offsetTop(offset);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            context.save();\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            context.restore();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _beforeLayout() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            super._processMeasures(parentMeasure, context);\r\n            this._evaluateClippingState(parentMeasure);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _layout(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (this._isDirty) {\r\n            this._tempCurrentMeasure.copyFrom(this._currentMeasure);\r\n        }\r\n\r\n        let rebuildCount = 0;\r\n\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._beforeLayout();\r\n\r\n        do {\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n            this._rebuildLayout = false;\r\n            this._processMeasures(parentMeasure, context);\r\n\r\n            if (!this._isClipped) {\r\n                for (var child of this._children) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n\r\n                    if (child._layout(this._measureForChildren, context)) {\r\n\r\n                        if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                            computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                        }\r\n                        if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                            computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                    if (this.width !== computedWidth + \"px\") {\r\n                        this.width = computedWidth + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n                if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                    if (this.height !== computedHeight + \"px\") {\r\n                        this.height = computedHeight + \"px\";\r\n                        this._rebuildLayout = true;\r\n                    }\r\n                }\r\n\r\n                this._postMeasure();\r\n            }\r\n            rebuildCount++;\r\n        }\r\n        while (this._rebuildLayout && rebuildCount < 3);\r\n\r\n        if (rebuildCount >= 3) {\r\n            BABYLON.Tools.Error(`Layout cycle detected in GUI (Container name=${this.name}, uniqueId=${this.uniqueId})`);\r\n        }\r\n\r\n        context.restore();\r\n\r\n        if (this._isDirty) {\r\n            this.invalidateRect(\r\n                Math.min(this._currentMeasure.left, this._tempCurrentMeasure.left),\r\n                Math.min(this._currentMeasure.top, this._tempCurrentMeasure.top),\r\n                Math.max(this._currentMeasure.left + this._currentMeasure.width, this._tempCurrentMeasure.left + this._tempCurrentMeasure.width) - 1,\r\n                Math.max(this._currentMeasure.top + this._currentMeasure.height, this._tempCurrentMeasure.top + this._tempCurrentMeasure.height) - 1\r\n            );\r\n\r\n            this._isDirty = false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _postMeasure() {\r\n        // Do nothing by default\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D, invalidatedRectangle?: Measure): void {\r\n\r\n        this._localDraw(context);\r\n\r\n        if (this.clipChildren) {\r\n            this._clipForChildren(context);\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            // Only redraw parts of the screen that are invalidated\r\n            if (invalidatedRectangle) {\r\n                if (!child._intersectsRect(invalidatedRectangle)) {\r\n                    // continue;\r\n                }\r\n            }\r\n            child._render(context, invalidatedRectangle);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getDescendants(results: Control[], directDescendantsOnly: boolean = false, predicate?: (control: Control) => boolean): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            var item = this.children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var index = this.children.length - 1; index >= 0; index--) {\r\n            this.children[index].dispose();\r\n        }\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added\r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Copy from a group of 4 floats\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate\r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public copyFromFloats(left: number, top: number, width: number, height: number): void {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        if (this._resizeToFit === value) {\r\n            return;\r\n        }\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n\r\n        // Prepare lines\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n\r\n        let maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (line.width > maxLineWidth) {\r\n                maxLineWidth = line.width;\r\n            }\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            if (this._textWrapping === TextWrapping.Clip) {\r\n                let newWidth = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth;\r\n                if (newWidth !== this._width.internalValue) {\r\n                    this._width.updateInPlace(newWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n                    this._rebuildLayout = true;\r\n                }\r\n            }\r\n            let newHeight = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length;\r\n\r\n            if (newHeight !== this._height.internalValue) {\r\n                this._height.updateInPlace(newHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n                this._rebuildLayout = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        // Render lines\r\n        this._renderLines(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\nimport { Tools } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel width.\r\n     * This value should not be set when in horizontal mode as it will be computed automatically\r\n     */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets panel height.\r\n     * This value should not be set when in vertical mode as it will be computed automatically\r\n     */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        for (var child of this._children) {\r\n            if (this._isVertical) {\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(parentMeasure);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        if (!this.isVertical || this._manualWidth) {\r\n            this._measureForChildren.width = this._currentMeasure.width;\r\n        }\r\n\r\n        if (this.isVertical || this._manualHeight) {\r\n            this._measureForChildren.height = this._currentMeasure.height;\r\n        }\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (this._isVertical) {\r\n                if (child.top !== stackHeight + \"px\") {\r\n                    child.top = stackHeight + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._top.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._height.isPercentage) {\r\n                    Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using height in percentage mode inside a vertical StackPanel`);\r\n                } else {\r\n                    stackHeight += child._currentMeasure.height + child.paddingTopInPixels + child.paddingBottomInPixels;\r\n                }\r\n            } else {\r\n                if (child.left !== stackWidth + \"px\") {\r\n                    child.left = stackWidth + \"px\";\r\n                    this._rebuildLayout = true;\r\n                    child._left.ignoreAdaptiveScaling = true;\r\n                }\r\n\r\n                if (child._width.isPercentage) {\r\n                    Tools.Warn(`Control (Name:${child.name}, UniqueId:${child.uniqueId}) is using width in percentage mode inside a horizontal StackPanel`);\r\n                } else {\r\n                    stackWidth += child._currentMeasure.width + child.paddingLeftInPixels + child.paddingRightInPixels;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width or height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        if (!this._manualHeight && this._isVertical) { // do not specify height if strictly defined by user\r\n            let previousHeight = this.height;\r\n            this.height = stackHeight + \"px\";\r\n            panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n        }\r\n        if (!this._manualWidth && !this._isVertical) { // do not specify width if strictly defined by user\r\n            let previousWidth = this.width;\r\n            this.width = stackWidth + \"px\";\r\n            panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        }\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n}","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default).\r\n     * The panel will automatically compute the number of rows based on number of child controls.\r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested.\r\n     * The panel will automatically compute the number of columns based on number of child controls.\r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\nexport * from \"./checkbox\";\nexport * from \"./colorpicker\";\nexport * from \"./container\";\nexport * from \"./control\";\nexport * from \"./ellipse\";\nexport * from \"./grid\";\nexport * from \"./image\";\nexport * from \"./inputText\";\nexport * from \"./inputPassword\";\nexport * from \"./line\";\nexport * from \"./multiLine\";\nexport * from \"./radioButton\";\nexport * from \"./stackPanel\";\nexport * from \"./selector\";\nexport * from \"./scrollViewers/scrollViewer\";\nexport * from \"./textBlock\";\nexport * from \"./virtualKeyboard\";\nexport * from \"./rectangle\";\nexport * from \"./displayGrid\";\nexport * from \"./sliders/baseSlider\";\nexport * from \"./sliders/slider\";\nexport * from \"./sliders/imageBasedSlider\";\n\nexport * from \"./statics\";","import { Control } from \"../control\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class BaseSlider extends Control {\r\n    protected _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    protected _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbClamped = false;\r\n    protected _displayThumb = true;\r\n\r\n    // Shared rendering info\r\n    protected _effectiveBarOffset = 0;\r\n    protected _renderLeft: number;\r\n    protected _renderTop: number;\r\n    protected _renderWidth: number;\r\n    protected _renderHeight: number;\r\n    protected _backgroundBoxLength: number;\r\n    protected _backgroundBoxThickness: number;\r\n    protected _effectiveThumbThickness: number;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a boolean indicating if the thumb must be rendered */\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset (ie. the margin applied to the value bar) */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new BaseSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"BaseSlider\";\r\n    }\r\n\r\n    protected _getThumbPosition() {\r\n        if (this.isVertical) {\r\n            return ((this.maximum - this.value) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n        }\r\n\r\n        return ((this.value - this.minimum) / (this.maximum - this.minimum)) * this._backgroundBoxLength;\r\n    }\r\n\r\n    protected _getThumbThickness(type: string): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), this._backgroundBoxThickness);\r\n                }\r\n                else {\r\n                    thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    protected _prepareRenderingData(type: string) {\r\n        // Main bar\r\n        this._effectiveBarOffset = 0;\r\n        this._renderLeft = this._currentMeasure.left;\r\n        this._renderTop = this._currentMeasure.top;\r\n        this._renderWidth = this._currentMeasure.width;\r\n        this._renderHeight = this._currentMeasure.height;\r\n\r\n        this._backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n        this._effectiveThumbThickness = this._getThumbThickness(type);\r\n\r\n        if (this.displayThumb) {\r\n            this._backgroundBoxLength -= this._effectiveThumbThickness;\r\n        }\r\n        //throw error when height is less than width for vertical slider\r\n        if ((this.isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n            console.error(\"Height should be greater than width\");\r\n            return;\r\n        }\r\n        if (this._barOffset.isPixel) {\r\n            this._effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), this._backgroundBoxThickness);\r\n        }\r\n        else {\r\n            this._effectiveBarOffset = this._backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n        }\r\n\r\n        this._backgroundBoxThickness -= (this._effectiveBarOffset * 2);\r\n\r\n        if (this.isVertical) {\r\n            this._renderLeft += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderTop += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            this._renderHeight = this._backgroundBoxLength;\r\n            this._renderWidth = this._backgroundBoxThickness;\r\n\r\n        }\r\n        else {\r\n            this._renderTop += this._effectiveBarOffset;\r\n            if (!this.isThumbClamped && this.displayThumb) {\r\n                this._renderLeft += (this._effectiveThumbThickness / 2);\r\n            }\r\n            this._renderHeight = this._backgroundBoxThickness;\r\n            this._renderWidth = this._backgroundBoxLength;\r\n        }\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    private _image: Nullable<Image>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get image(): Nullable<Image> {\r\n        return this._image;\r\n    }\r\n\r\n    private _textBlock: Nullable<TextBlock>;\r\n    /**\r\n     * Returns the image part of the button (if any)\r\n     */\r\n    public get textBlock(): Nullable<TextBlock> {\r\n        return this._textBlock;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        let alphaStore: Nullable<number> = null;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            alphaStore = this.alpha;\r\n            this.alpha -= 0.1;\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (alphaStore !== null) {\r\n                this.alpha = alphaStore;\r\n            }\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        // Store\r\n        result._image = iconImage;\r\n        result._textBlock = textBlock;\r\n\r\n        return result;\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Nullable, Tools, Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private static _WorkingCanvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    private _populateNinePatchSlicesFromImage = false;\r\n    private _sliceLeft: number;\r\n    private _sliceRight: number;\r\n    private _sliceTop: number;\r\n    private _sliceBottom: number;\r\n\r\n    /**\r\n     * Observable notified when the content is loaded\r\n     */\r\n    public onImageLoadedObservable = new Observable<Image>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the content is loaded\r\n     */\r\n    public get isLoaded(): boolean {\r\n        return this._loaded;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if nine patch slices (left, top, right, bottom) should be read from image data\r\n     */\r\n    public get populateNinePatchSlicesFromImage(): boolean {\r\n        return this._populateNinePatchSlicesFromImage;\r\n    }\r\n\r\n    public set populateNinePatchSlicesFromImage(value: boolean) {\r\n        if (this._populateNinePatchSlicesFromImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._populateNinePatchSlicesFromImage = value;\r\n\r\n        if (this._populateNinePatchSlicesFromImage && this._loaded) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left value for slicing (9-patch)\r\n     */\r\n    public get sliceLeft(): number {\r\n        return this._sliceLeft;\r\n    }\r\n\r\n    public set sliceLeft(value: number) {\r\n        if (this._sliceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the right value for slicing (9-patch)\r\n     */\r\n    public get sliceRight(): number {\r\n        return this._sliceRight;\r\n    }\r\n\r\n    public set sliceRight(value: number) {\r\n        if (this._sliceRight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceRight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top value for slicing (9-patch)\r\n     */\r\n    public get sliceTop(): number {\r\n        return this._sliceTop;\r\n    }\r\n\r\n    public set sliceTop(value: number) {\r\n        if (this._sliceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the bottom value for slicing (9-patch)\r\n     */\r\n    public get sliceBottom(): number {\r\n        return this._sliceBottom;\r\n    }\r\n\r\n    public set sliceBottom(value: number) {\r\n        if (this._sliceBottom === value) {\r\n            return;\r\n        }\r\n\r\n        this._sliceBottom = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            };\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            this._extractNinePatchSliceDataFromImage();\r\n        }\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this.onImageLoadedObservable.notifyObservers(this);\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _extractNinePatchSliceDataFromImage() {\r\n        if (!Image._WorkingCanvas) {\r\n            Image._WorkingCanvas = document.createElement('canvas');\r\n        }\r\n        const canvas = Image._WorkingCanvas;\r\n        const context = canvas.getContext('2d')!;\r\n        const width = this._domImage.width;\r\n        const height = this._domImage.height;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        context.drawImage(this._domImage, 0, 0, width, height);\r\n        const imageData = context.getImageData(0, 0, width, height);\r\n\r\n        // Left and right\r\n        this._sliceLeft = -1;\r\n        this._sliceRight = -1;\r\n        for (var x = 0; x < width; x++) {\r\n            const alpha = imageData.data[x * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceLeft === -1) {\r\n                this._sliceLeft = x;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceLeft > -1) {\r\n                this._sliceRight = x;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // top and bottom\r\n        this._sliceTop = -1;\r\n        this._sliceBottom = -1;\r\n        for (var y = 0; y < height; y++) {\r\n            const alpha = imageData.data[y * width * 4 + 3];\r\n\r\n            if (alpha > 127 && this._sliceTop === -1) {\r\n                this._sliceTop = y;\r\n                continue;\r\n            }\r\n\r\n            if (alpha < 127 && this._sliceTop > -1) {\r\n                this._sliceBottom = y;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        };\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell width to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell height to use when animation sheet is enabled\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    if (this._autoScale) {\r\n                        this.synchronizeSizeWithContent();\r\n                    }\r\n                    if (this.parent && this.parent.parent) { // Will update root size if root is not the top root\r\n                        this.parent.adaptWidthToChildren = true;\r\n                        this.parent.adaptHeightToChildren = true;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super._processMeasures(parentMeasure, context);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._loaded) {\r\n            switch (this._stretch) {\r\n                case Image.STRETCH_NONE:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_FILL:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_UNIFORM:\r\n                    var hRatio = this._currentMeasure.width / width;\r\n                    var vRatio = this._currentMeasure.height / height;\r\n                    var ratio = Math.min(hRatio, vRatio);\r\n                    var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                    var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                    break;\r\n                case Image.STRETCH_EXTEND:\r\n                    context.drawImage(this._domImage, x, y, width, height,\r\n                        this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                    break;\r\n                case Image.STRETCH_NINE_PATCH:\r\n                    this._renderNinePatch(context);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _renderCornerPatch(context: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, targetX: number, targetY: number): void {\r\n        context.drawImage(this._domImage, x, y, width, height, this._currentMeasure.left + targetX, this._currentMeasure.top + targetY, width, height);\r\n    }\r\n\r\n    private _renderNinePatch(context: CanvasRenderingContext2D): void {\r\n        let height = this._imageHeight;\r\n        let leftWidth = this._sliceLeft;\r\n        let topHeight = this._sliceTop;\r\n        let bottomHeight = this._imageHeight - this._sliceBottom;\r\n        let rightWidth = this._imageWidth - this._sliceRight;\r\n        let left = 0;\r\n        let top = 0;\r\n\r\n        if (this._populateNinePatchSlicesFromImage) {\r\n            left = 1;\r\n            top = 1;\r\n            height -= 2;\r\n            leftWidth -= 1;\r\n            topHeight -= 1;\r\n            bottomHeight -= 1;\r\n            rightWidth -= 1;\r\n        }\r\n\r\n        const centerWidth = this._sliceRight - this._sliceLeft + 1;\r\n        const targetCenterWidth = this._currentMeasure.width - rightWidth - this.sliceLeft + 1;\r\n        const targetTopHeight = this._currentMeasure.height - height + this._sliceBottom;\r\n\r\n        // Corners\r\n        this._renderCornerPatch(context, left, top, leftWidth, topHeight, 0, 0);\r\n        this._renderCornerPatch(context, left, this._sliceBottom, leftWidth, height - this._sliceBottom, 0, targetTopHeight);\r\n\r\n        this._renderCornerPatch(context, this._sliceRight, top, rightWidth, topHeight, this._currentMeasure.width - rightWidth, 0);\r\n        this._renderCornerPatch(context, this._sliceRight, this._sliceBottom, rightWidth, height - this._sliceBottom, this._currentMeasure.width - rightWidth, targetTopHeight);\r\n\r\n        // Center\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceTop, centerWidth, this._sliceBottom - this._sliceTop + 1,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + topHeight, targetCenterWidth, targetTopHeight - topHeight + 1);\r\n\r\n        // Borders\r\n        context.drawImage(this._domImage, left, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceRight, this._sliceTop, leftWidth, this._sliceBottom - this._sliceTop,\r\n            this._currentMeasure.left + this._currentMeasure.width - rightWidth, this._currentMeasure.top + topHeight, leftWidth, targetTopHeight - topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, top, centerWidth, topHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top, targetCenterWidth, topHeight);\r\n\r\n        context.drawImage(this._domImage, this._sliceLeft, this._sliceBottom, centerWidth, bottomHeight,\r\n            this._currentMeasure.left + leftWidth, this._currentMeasure.top + targetTopHeight, targetCenterWidth, bottomHeight);\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onImageLoadedObservable.clear();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n    /** NINE_PATCH */\r\n    public static readonly STRETCH_NINE_PATCH = 4;\r\n}","import { Control } from \"./control\";\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\nimport { ValueAndUnit } from \"../valueAndUnit\";\nimport { Nullable, Observable, Observer, Vector2, ClipboardEventTypes, ClipboardInfo, PointerInfo } from 'babylonjs';\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\n\n/**\n * Class used to create input text control\n */\nexport class InputText extends Control implements IFocusableControl {\n    private _text = \"\";\n    private _placeholderText = \"\";\n    private _background = \"#222222\";\n    private _focusedBackground = \"#000000\";\n    private _focusedColor = \"white\";\n    private _placeholderColor = \"gray\";\n    private _thickness = 1;\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\n    private _autoStretchWidth = true;\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\n    private _isFocused = false;\n    private _blinkTimeout: number;\n    private _blinkIsEven = false;\n    private _cursorOffset = 0;\n    private _scrollLeft: Nullable<number>;\n    private _textWidth: number;\n    private _clickedCoordinate: Nullable<number>;\n    private _deadKey = false;\n    private _addKey = true;\n    private _currentKey = \"\";\n    private _isTextHighlightOn = false;\n    private _textHighlightColor = \"#d5e0ff\";\n    private _highligherOpacity = 0.4;\n    private _highlightedText = \"\";\n    private _startHighlightIndex = 0;\n    private _endHighlightIndex = 0;\n    private _cursorIndex = -1;\n    private _onFocusSelectAll = false;\n    private _isPointerDown = false;\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\n\n    /** @hidden */\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\n\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\n    public promptMessage = \"Please enter text:\";\n\n    /** Observable raised when the text changes */\n    public onTextChangedObservable = new Observable<InputText>();\n    /** Observable raised just before an entered character is to be added */\n    public onBeforeKeyAddObservable = new Observable<InputText>();\n    /** Observable raised when the control gets the focus */\n    public onFocusObservable = new Observable<InputText>();\n    /** Observable raised when the control loses the focus */\n    public onBlurObservable = new Observable<InputText>();\n    /**Observable raised when the text is highlighted */\n    public onTextHighlightObservable = new Observable<InputText>();\n    /**Observable raised when copy event is triggered */\n    public onTextCopyObservable = new Observable<InputText>();\n    /** Observable raised when cut event is triggered */\n    public onTextCutObservable = new Observable<InputText>();\n    /** Observable raised when paste event is triggered */\n    public onTextPasteObservable = new Observable<InputText>();\n    /** Observable raised when a key event was processed */\n    public onKeyboardEventProcessedObservable = new Observable<KeyboardEvent>();\n\n    /** Gets or sets the maximum width allowed by the control */\n    public get maxWidth(): string | number {\n        return this._maxWidth.toString(this._host);\n    }\n\n    /** Gets the maximum width allowed by the control in pixels */\n    public get maxWidthInPixels(): number {\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set maxWidth(value: string | number) {\n        if (this._maxWidth.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._maxWidth.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\n    public get highligherOpacity(): number {\n        return this._highligherOpacity;\n    }\n\n    public set highligherOpacity(value: number) {\n        if (this._highligherOpacity === value) {\n            return;\n        }\n        this._highligherOpacity = value;\n        this._markAsDirty();\n    }\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\n    public get onFocusSelectAll(): boolean {\n        return this._onFocusSelectAll;\n    }\n\n    public set onFocusSelectAll(value: boolean) {\n        if (this._onFocusSelectAll === value) {\n            return;\n        }\n\n        this._onFocusSelectAll = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text hightlight color */\n    public get textHighlightColor(): string {\n        return this._textHighlightColor;\n    }\n\n    public set textHighlightColor(value: string) {\n        if (this._textHighlightColor === value) {\n            return;\n        }\n        this._textHighlightColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets control margin */\n    public get margin(): string {\n        return this._margin.toString(this._host);\n    }\n\n    /** Gets control margin in pixels */\n    public get marginInPixels(): number {\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\n    }\n\n    public set margin(value: string) {\n        if (this._margin.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._margin.fromString(value)) {\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\n    public get autoStretchWidth(): boolean {\n        return this._autoStretchWidth;\n    }\n\n    public set autoStretchWidth(value: boolean) {\n        if (this._autoStretchWidth === value) {\n            return;\n        }\n\n        this._autoStretchWidth = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets border thickness */\n    public get thickness(): number {\n        return this._thickness;\n    }\n\n    public set thickness(value: number) {\n        if (this._thickness === value) {\n            return;\n        }\n\n        this._thickness = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedBackground(): string {\n        return this._focusedBackground;\n    }\n\n    public set focusedBackground(value: string) {\n        if (this._focusedBackground === value) {\n            return;\n        }\n\n        this._focusedBackground = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color when focused */\n    public get focusedColor(): string {\n        return this._focusedColor;\n    }\n\n    public set focusedColor(value: string) {\n        if (this._focusedColor === value) {\n            return;\n        }\n\n        this._focusedColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n\n        this._background = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the placeholder color */\n    public get placeholderColor(): string {\n        return this._placeholderColor;\n    }\n\n    public set placeholderColor(value: string) {\n        if (this._placeholderColor === value) {\n            return;\n        }\n\n        this._placeholderColor = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the text displayed when the control is empty */\n    public get placeholderText(): string {\n        return this._placeholderText;\n    }\n\n    public set placeholderText(value: string) {\n        if (this._placeholderText === value) {\n            return;\n        }\n        this._placeholderText = value;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets the dead key flag */\n    public get deadKey(): boolean {\n        return this._deadKey;\n    }\n\n    public set deadKey(flag: boolean) {\n        this._deadKey = flag;\n    }\n\n    /** Gets or sets the highlight text */\n    public get highlightedText(): string {\n        return this._highlightedText;\n    }\n    public set highlightedText(text: string) {\n        if (this._highlightedText === text) {\n            return;\n        }\n        this._highlightedText = text;\n        this._markAsDirty();\n    }\n\n    /** Gets or sets if the current key should be added */\n    public get addKey(): boolean {\n        return this._addKey;\n    }\n\n    public set addKey(flag: boolean) {\n        this._addKey = flag;\n    }\n\n    /** Gets or sets the value of the current key being entered */\n    public get currentKey(): string {\n        return this._currentKey;\n    }\n\n    public set currentKey(key: string) {\n        this._currentKey = key;\n    }\n\n    /** Gets or sets the text displayed in the control */\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(value: string) {\n        let valueAsString = value.toString(); // Forcing convertion\n\n        if (this._text === valueAsString) {\n            return;\n        }\n        this._text = valueAsString;\n        this._markAsDirty();\n\n        this.onTextChangedObservable.notifyObservers(this);\n    }\n\n    /** Gets or sets control width */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._markAsDirty();\n        }\n\n        this.autoStretchWidth = false;\n    }\n\n    /**\n     * Creates a new InputText\n     * @param name defines the control name\n     * @param text defines the text of the control\n     */\n    constructor(public name?: string, text: string = \"\") {\n        super(name);\n\n        this.text = text;\n        this.isPointerBlocker = true;\n    }\n\n    /** @hidden */\n    public onBlur(): void {\n        this._isFocused = false;\n        this._scrollLeft = null;\n        this._cursorOffset = 0;\n        clearTimeout(this._blinkTimeout);\n        this._markAsDirty();\n\n        this.onBlurObservable.notifyObservers(this);\n\n        this._host.unRegisterClipboardEvents();\n        if (this._onClipboardObserver) {\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\n        }\n        let scene = this._host.getScene();\n        if (this._onPointerDblTapObserver && scene) {\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\n        }\n    }\n\n    /** @hidden */\n    public onFocus(): void {\n        if (!this._isEnabled) {\n            return;\n        }\n        this._scrollLeft = null;\n        this._isFocused = true;\n        this._blinkIsEven = false;\n        this._cursorOffset = 0;\n        this._markAsDirty();\n\n        this.onFocusObservable.notifyObservers(this);\n\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\n            let value = prompt(this.promptMessage);\n\n            if (value !== null) {\n                this.text = value;\n            }\n            this._host.focusedControl = null;\n            return;\n        }\n\n        this._host.registerClipboardEvents();\n\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\n            // process clipboard event, can be configured.\n            switch (clipboardInfo.type) {\n                case ClipboardEventTypes.COPY:\n                    this._onCopyText(clipboardInfo.event);\n                    this.onTextCopyObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.CUT:\n                    this._onCutText(clipboardInfo.event);\n                    this.onTextCutObservable.notifyObservers(this);\n                    break;\n                case ClipboardEventTypes.PASTE:\n                    this._onPasteText(clipboardInfo.event);\n                    this.onTextPasteObservable.notifyObservers(this);\n                    break;\n                default: return;\n            }\n        });\n\n        let scene = this._host.getScene();\n        if (scene) {\n            //register the pointer double tap event\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\n                if (!this._isFocused) {\n                    return;\n                }\n                if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOUBLETAP) {\n                    this._processDblClick(pointerInfo);\n                }\n            });\n        }\n\n        if (this._onFocusSelectAll) {\n            this._selectAllText();\n        }\n\n    }\n\n    protected _getTypeName(): string {\n        return \"InputText\";\n    }\n\n    /**\n     * Function called to get the list of controls that should not steal the focus from this control\n     * @returns an array of controls\n     */\n    public keepsFocusWith(): Nullable<Control[]> {\n        if (!this._connectedVirtualKeyboard) {\n            return null;\n        }\n        return [this._connectedVirtualKeyboard];\n    }\n\n    /** @hidden */\n    public processKey(keyCode: number, key?: string, evt?: KeyboardEvent) {\n\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\n            return;\n        }\n\n        //select all\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\n            this._selectAllText();\n            evt.preventDefault();\n            return;\n        }\n        // Specific cases\n        switch (keyCode) {\n            case 32: //SPACE\n                key = \" \"; //ie11 key for space is \"Spacebar\"\n                break;\n            case 191: //SLASH\n                if (evt) {\n                    evt.preventDefault();\n                }\n                break;\n            case 8: // BACKSPACE\n                if (this._text && this._text.length > 0) {\n                    //delete the highlighted text\n                    if (this._isTextHighlightOn) {\n                        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                        this._isTextHighlightOn = false;\n                        this._cursorOffset = this.text.length - this._startHighlightIndex;\n                        this._blinkIsEven = false;\n                        if (evt) {\n                            evt.preventDefault();\n                        }\n                        return;\n                    }\n                    //delete single character\n                    if (this._cursorOffset === 0) {\n                        this.text = this._text.substr(0, this._text.length - 1);\n                    } else {\n                        let deletePosition = this._text.length - this._cursorOffset;\n                        if (deletePosition > 0) {\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\n                        }\n                    }\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 46: // DELETE\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n                    let decrementor = (this._endHighlightIndex - this._startHighlightIndex);\n                    while (decrementor > 0 && this._cursorOffset > 0) {\n                        this._cursorOffset--;\n                    }\n                    this._isTextHighlightOn = false;\n                    this._cursorOffset = this.text.length - this._startHighlightIndex;\n                    if (evt) {\n                        evt.preventDefault();\n                    }\n                    return;\n                }\n                if (this._text && this._text.length > 0 && this._cursorOffset > 0) {\n                    let deletePosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\n                    this._cursorOffset--;\n                }\n                if (evt) {\n                    evt.preventDefault();\n                }\n                return;\n            case 13: // RETURN\n                this._host.focusedControl = null;\n                this._isTextHighlightOn = false;\n                return;\n            case 35: // END\n                this._cursorOffset = 0;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 36: // HOME\n                this._cursorOffset = this._text.length;\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            case 37: // LEFT\n                this._cursorOffset++;\n                if (this._cursorOffset > this._text.length) {\n                    this._cursorOffset = this._text.length;\n                }\n\n                if (evt && evt.shiftKey) {\n                    // update the cursor\n                    this._blinkIsEven = false;\n                    // shift + ctrl/cmd + <-\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._text.length === this._cursorOffset) {\n                                return;\n                            }\n                            else {\n                                this._endHighlightIndex = this._text.length - this._cursorOffset + 1;\n                            }\n                        }\n                        this._startHighlightIndex = 0;\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._markAsDirty();\n                        return;\n                    }\n                    //store the starting point\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset >= this._text.length) ? this._text.length : this._cursorOffset - 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._endHighlightIndex;\n                        this._cursorOffset = (this._startHighlightIndex === 0) ? this._text.length : this._text.length - this._startHighlightIndex + 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._startHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = this.text.length;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 39: // RIGHT\n                this._cursorOffset--;\n                if (this._cursorOffset < 0) {\n                    this._cursorOffset = 0;\n                }\n                if (evt && evt.shiftKey) {\n                    //update the cursor\n                    this._blinkIsEven = false;\n                    //shift + ctrl/cmd + ->\n                    if (evt.ctrlKey || evt.metaKey) {\n                        if (!this._isTextHighlightOn) {\n                            if (this._cursorOffset === 0) {\n                                return;\n                            }\n                            else {\n                                this._startHighlightIndex = this._text.length - this._cursorOffset - 1;\n                            }\n                        }\n                        this._endHighlightIndex = this._text.length;\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = 0;\n                        this._markAsDirty();\n                        return;\n                    }\n\n                    if (!this._isTextHighlightOn) {\n                        this._isTextHighlightOn = true;\n                        this._cursorIndex = (this._cursorOffset <= 0) ? 0 : this._cursorOffset + 1;\n                    }\n                    //if text is already highlighted\n                    else if (this._cursorIndex === -1) {\n                        this._cursorIndex = this._text.length - this._startHighlightIndex;\n                        this._cursorOffset = (this._text.length === this._endHighlightIndex) ? 0 : this._text.length - this._endHighlightIndex - 1;\n                    }\n                    //set the highlight indexes\n                    if (this._cursorIndex < this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorIndex;\n                        this._startHighlightIndex = this._text.length - this._cursorOffset;\n                    }\n                    else if (this._cursorIndex > this._cursorOffset) {\n                        this._endHighlightIndex = this._text.length - this._cursorOffset;\n                        this._startHighlightIndex = this._text.length - this._cursorIndex;\n                    }\n                    else {\n                        this._isTextHighlightOn = false;\n                    }\n                    this._markAsDirty();\n                    return;\n                }\n                if (this._isTextHighlightOn) {\n                    this._cursorOffset = this._text.length - this._endHighlightIndex;\n                    this._isTextHighlightOn = false;\n                }\n                //ctr + ->\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\n                    this._cursorOffset = 0;\n                    evt.preventDefault();\n                }\n                this._blinkIsEven = false;\n                this._isTextHighlightOn = false;\n                this._cursorIndex = -1;\n                this._markAsDirty();\n                return;\n            case 222: // Dead\n                if (evt) {\n                    evt.preventDefault();\n                }\n                this._cursorIndex = -1;\n                this.deadKey = true;\n                break;\n        }\n        // Printable characters\n        if (key &&\n            ((keyCode === -1) ||                     // Direct access\n                (keyCode === 32) ||                     // Space\n                (keyCode > 47 && keyCode < 64) ||       // Numbers\n                (keyCode > 64 && keyCode < 91) ||       // Letters\n                (keyCode > 159 && keyCode < 193) ||     // Special characters\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\n            this._currentKey = key;\n            this.onBeforeKeyAddObservable.notifyObservers(this);\n            key = this._currentKey;\n            if (this._addKey) {\n                if (this._isTextHighlightOn) {\n                    this.text = this._text.slice(0, this._startHighlightIndex) + key + this._text.slice(this._endHighlightIndex);\n                    this._cursorOffset = this.text.length - (this._startHighlightIndex + 1);\n                    this._isTextHighlightOn = false;\n                    this._blinkIsEven = false;\n                    this._markAsDirty();\n                }\n                else if (this._cursorOffset === 0) {\n                    this.text += key;\n                } else {\n                    let insertPosition = this._text.length - this._cursorOffset;\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\n                }\n            }\n        }\n    }\n\n    /** @hidden */\n    private _updateValueFromCursorIndex(offset: number) {\n        //update the cursor\n        this._blinkIsEven = false;\n\n        if (this._cursorIndex === -1) {\n            this._cursorIndex = offset;\n        } else {\n            if (this._cursorIndex < this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorIndex;\n                this._startHighlightIndex = this._text.length - this._cursorOffset;\n            }\n            else if (this._cursorIndex > this._cursorOffset) {\n                this._endHighlightIndex = this._text.length - this._cursorOffset;\n                this._startHighlightIndex = this._text.length - this._cursorIndex;\n            }\n            else {\n                this._isTextHighlightOn = false;\n                this._markAsDirty();\n                return;\n            }\n        }\n        this._isTextHighlightOn = true;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _processDblClick(evt: PointerInfo) {\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\n        this._startHighlightIndex = this._text.length - this._cursorOffset;\n        this._endHighlightIndex = this._startHighlightIndex;\n        let rWord = /\\w+/g, moveLeft, moveRight;\n        do {\n            moveRight = this._endHighlightIndex < this._text.length && (this._text[this._endHighlightIndex].search(rWord) !== -1) ? ++this._endHighlightIndex : 0;\n            moveLeft = this._startHighlightIndex > 0 && (this._text[this._startHighlightIndex - 1].search(rWord) !== -1) ? --this._startHighlightIndex : 0;\n        } while (moveLeft || moveRight);\n\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        this.onTextHighlightObservable.notifyObservers(this);\n\n        this._isTextHighlightOn = true;\n        this._clickedCoordinate = null;\n        this._blinkIsEven = true;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n    /** @hidden */\n    private _selectAllText() {\n        this._blinkIsEven = true;\n        this._isTextHighlightOn = true;\n\n        this._startHighlightIndex = 0;\n        this._endHighlightIndex = this._text.length;\n        this._cursorOffset = this._text.length;\n        this._cursorIndex = -1;\n        this._markAsDirty();\n    }\n\n    /**\n     * Handles the keyboard event\n     * @param evt Defines the KeyboardEvent\n     */\n    public processKeyboard(evt: KeyboardEvent): void {\n        // process pressed key\n        this.processKey(evt.keyCode, evt.key, evt);\n\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\n    }\n\n    /** @hidden */\n    private _onCopyText(ev: ClipboardEvent): void {\n        this._isTextHighlightOn = false;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n        this._host.clipboardData = this._highlightedText;\n    }\n    /** @hidden */\n    private _onCutText(ev: ClipboardEvent): void {\n        if (!this._highlightedText) {\n            return;\n        }\n        this.text = this._text.slice(0, this._startHighlightIndex) + this._text.slice(this._endHighlightIndex);\n        this._isTextHighlightOn = false;\n        this._cursorOffset = this.text.length - this._startHighlightIndex;\n        //when write permission to clipbaord data is denied\n        try {\n            ev.clipboardData.setData(\"text/plain\", this._highlightedText);\n        }\n        catch { } //pass\n\n        this._host.clipboardData = this._highlightedText;\n        this._highlightedText = \"\";\n    }\n    /** @hidden */\n    private _onPasteText(ev: ClipboardEvent): void {\n        let data: string = \"\";\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\n            data = ev.clipboardData.getData(\"text/plain\");\n        }\n        else {\n            //get the cached data; returns blank string by default\n            data = this._host.clipboardData;\n        }\n        let insertPosition = this._text.length - this._cursorOffset;\n        this.text = this._text.slice(0, insertPosition) + data + this._text.slice(insertPosition);\n    }\n\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n        }\n\n        // Background\n        if (this._isFocused) {\n            if (this._focusedBackground) {\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\n\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n            }\n        } else if (this._background) {\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\n\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\n        }\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        if (!this._fontOffset) {\n            this._fontOffset = Control._GetFontOffset(context.font);\n        }\n\n        // Text\n        let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\n        if (this.color) {\n            context.fillStyle = this.color;\n        }\n\n        let text = this._beforeRenderText(this._text);\n\n        if (!this._isFocused && !this._text && this._placeholderText) {\n            text = this._placeholderText;\n\n            if (this._placeholderColor) {\n                context.fillStyle = this._placeholderColor;\n            }\n        }\n\n        this._textWidth = context.measureText(text).width;\n        let marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\n        if (this._autoStretchWidth) {\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\n        }\n\n        let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\n        let availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\n\n        context.save();\n        context.beginPath();\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\n        context.clip();\n\n        if (this._isFocused && this._textWidth > availableWidth) {\n            let textLeft = clipTextLeft - this._textWidth + availableWidth;\n            if (!this._scrollLeft) {\n                this._scrollLeft = textLeft;\n            }\n        } else {\n            this._scrollLeft = clipTextLeft;\n        }\n\n        context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\n\n        // Cursor\n        if (this._isFocused) {\n\n            // Need to move cursor\n            if (this._clickedCoordinate) {\n                var rightPosition = this._scrollLeft + this._textWidth;\n                var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\n                var currentSize = 0;\n                this._cursorOffset = 0;\n                var previousDist = 0;\n                do {\n                    if (this._cursorOffset) {\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\n                    }\n                    this._cursorOffset++;\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\n\n                } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\n\n                // Find closest move\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\n                    this._cursorOffset--;\n                }\n\n                this._blinkIsEven = false;\n                this._clickedCoordinate = null;\n            }\n\n            // Render cursor\n            if (!this._blinkIsEven) {\n                let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\n                let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\n\n                if (cursorLeft < clipTextLeft) {\n                    this._scrollLeft += (clipTextLeft - cursorLeft);\n                    cursorLeft = clipTextLeft;\n                    this._markAsDirty();\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\n                    this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\n                    cursorLeft = clipTextLeft + availableWidth;\n                    this._markAsDirty();\n                }\n                if (!this._isTextHighlightOn) {\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\n                }\n            }\n\n            clearTimeout(this._blinkTimeout);\n            this._blinkTimeout = <any>setTimeout(() => {\n                this._blinkIsEven = !this._blinkIsEven;\n                this._markAsDirty();\n            }, 500);\n\n            //show the highlighted text\n            if (this._isTextHighlightOn) {\n                clearTimeout(this._blinkTimeout);\n                let highlightCursorOffsetWidth = context.measureText(this.text.substring(this._startHighlightIndex)).width;\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\n                this._highlightedText = this.text.substring(this._startHighlightIndex, this._endHighlightIndex);\n                let width = context.measureText(this.text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\n                if (highlightCursorLeft < clipTextLeft) {\n                    width = width - (clipTextLeft - highlightCursorLeft);\n                    if (!width) {\n                        // when using left arrow on text.length > availableWidth;\n                        // assigns the width of the first letter after clipTextLeft\n                        width = context.measureText(this.text.charAt(this.text.length - this._cursorOffset)).width;\n                    }\n                    highlightCursorLeft = clipTextLeft;\n                }\n                //for transparancy\n                context.globalAlpha = this._highligherOpacity;\n                context.fillStyle = this._textHighlightColor;\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\n                context.globalAlpha = 1.0;\n            }\n        }\n        context.restore();\n\n        // Border\n        if (this._thickness) {\n            if (this._isFocused) {\n                if (this.focusedColor) {\n                    context.strokeStyle = this.focusedColor;\n                }\n            } else {\n                if (this.color) {\n                    context.strokeStyle = this.color;\n                }\n            }\n\n            context.lineWidth = this._thickness;\n\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\n                this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\n        }\n\n        context.restore();\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._clickedCoordinate = coordinates.x;\n        this._isTextHighlightOn = false;\n        this._highlightedText = \"\";\n        this._cursorIndex = -1;\n        this._isPointerDown = true;\n        this._host._capturingControl[pointerId] = this;\n        if (this._host.focusedControl === this) {\n            // Move cursor\n            clearTimeout(this._blinkTimeout);\n            this._markAsDirty();\n            return true;\n        }\n        if (!this._isEnabled) {\n            return false;\n        }\n        this._host.focusedControl = this;\n\n        return true;\n    }\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        if (this._host.focusedControl === this && this._isPointerDown) {\n            this._clickedCoordinate = coordinates.x;\n            this._markAsDirty();\n            this._updateValueFromCursorIndex(this._cursorOffset);\n        }\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n\n        this._isPointerDown = false;\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    protected _beforeRenderText(text: string): string {\n        return text;\n    }\n\n    public dispose() {\n        super.dispose();\n\n        this.onBlurObservable.clear();\n        this.onFocusObservable.clear();\n        this.onTextChangedObservable.clear();\n        this.onTextCopyObservable.clear();\n        this.onTextCutObservable.clear();\n        this.onTextPasteObservable.clear();\n        this.onTextHighlightObservable.clear();\n        this.onKeyboardEventProcessedObservable.clear();\n    }\n}\n","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /**\r\n     * Gets the number of columns\r\n     */\r\n    public get columnCount(): number {\r\n        return this._columnDefinitions.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of rows\r\n     */\r\n    public get rowCount(): number {\r\n        return this._rowDefinitions.length;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific row\r\n     * @param index defines the index of the row\r\n     * @returns the row definition\r\n     */\r\n    public getRowDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._rowDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of a specific column\r\n     * @param index defines the index of the column\r\n     * @returns the column definition\r\n     */\r\n    public getColumnDefinition(index: number): Nullable<ValueAndUnit> {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return null;\r\n        }\r\n\r\n        return this._columnDefinitions[index];\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._rowDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === height) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        let current = this._columnDefinitions[index];\r\n        if (current && current.isPixel === isPixel && current.internalValue === width) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of children stored in a specific cell\r\n     * @param row defines the row to check\r\n     * @param column defines the column to check\r\n     * @returns the list of controls\r\n     */\r\n    public getChildrenAt(row: number, column: number): Nullable<Array<Control>> {\r\n        const cell = this._cells[`${row}:${column}`];\r\n\r\n        if (!cell) {\r\n            return null;\r\n        }\r\n\r\n        return cell.children;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the child cell info (row x column)\r\n     * @param child defines the control to get info from\r\n     * @returns a string containing the child cell info (row x column)\r\n     */\r\n    public getChildCellInfo(child: Control): string {\r\n        return child._tag;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _getGridDefinitions(definitionCallback: (lefts: number[], tops: number[], widths: number[], heights: number[]) => void) {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        definitionCallback(lefts, tops, widths, heights);\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n            // Setting child sizes\r\n            for (var key in this._cells) {\r\n                if (!this._cells.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                let split = key.split(\":\");\r\n                let x = parseInt(split[0]);\r\n                let y = parseInt(split[1]);\r\n                let cell = this._cells[key];\r\n\r\n                cell.left = lefts[y] + \"px\";\r\n                cell.top = tops[x] + \"px\";\r\n                cell.width = widths[y] + \"px\";\r\n                cell.height = heights[x] + \"px\";\r\n            }\r\n        });\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let child = this._cells[key];\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._getGridDefinitions((lefts: number[], tops: number[], widths: number[], heights: number[]) => {\r\n\r\n            // Columns\r\n            for (var index = 0; index < lefts.length; index++) {\r\n                const left = this._currentMeasure.left + lefts[index] + widths[index];\r\n                context.beginPath();\r\n                context.moveTo(left, this._currentMeasure.top);\r\n                context.lineTo(left, this._currentMeasure.top + this._currentMeasure.height);\r\n                context.stroke();\r\n            }\r\n\r\n            // Rows\r\n            for (var index = 0; index < tops.length; index++) {\r\n                const top = this._currentMeasure.top + tops[index] + heights[index];\r\n                context.beginPath();\r\n                context.moveTo(this._currentMeasure.left, top);\r\n                context.lineTo(this._currentMeasure.left + this._currentMeasure.width, top);\r\n                context.stroke();\r\n            }\r\n        });\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._childControls = [];\r\n    }\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, ClipboardEventTypes, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3, Observable, ClipboardInfo } from 'babylonjs';\nimport { Container } from \"./controls/container\";\nimport { Control } from \"./controls/control\";\nimport { Style } from \"./style\";\nimport { Measure } from \"./measure\";\n/**\n* Interface used to define a control that can receive focus\n*/\nexport interface IFocusableControl {\n    /**\n     * Function called when the control receives the focus\n     */\n    onFocus(): void;\n    /**\n     * Function called when the control loses the focus\n     */\n    onBlur(): void;\n    /**\n     * Function called to let the control handle keyboard events\n     * @param evt defines the current keyboard event\n     */\n    processKeyboard(evt: KeyboardEvent): void;\n    /**\n    * Function called to get the list of controls that should not steal the focus from this control\n    * @returns an array of controls\n    */\n    keepsFocusWith(): Nullable<Control[]>;\n}\n/**\n* Class used to create texture to support 2D GUI elements\n* @see http://doc.babylonjs.com/how_to/gui\n*/\nexport class AdvancedDynamicTexture extends DynamicTexture {\n    private _isDirty = false;\n    private _renderObserver: Nullable<Observer<Camera>>;\n    private _resizeObserver: Nullable<Observer<Engine>>;\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\n    private _background: string;\n    /** @hidden */\n    public _rootContainer = new Container(\"root\");\n    /** @hidden */\n    public _lastPickedControl: Control;\n    /** @hidden */\n    public _lastControlOver: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _lastControlDown: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _capturingControl: { [pointerId: number]: Control } = {};\n    /** @hidden */\n    public _shouldBlockPointer: boolean;\n    /** @hidden */\n    public _layerToDispose: Nullable<Layer>;\n    /** @hidden */\n    public _linkedControls = new Array<Control>();\n    private _isFullscreen = false;\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\n    private _idealWidth = 0;\n    private _idealHeight = 0;\n    private _useSmallestIdeal: boolean = false;\n    private _renderAtIdealSize = false;\n    private _focusedControl: Nullable<IFocusableControl>;\n    private _blockNextFocusCheck = false;\n    private _renderScale = 1;\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\n    /**\n    * Define type to string to ensure compatibility across browsers\n    * Safari doesn't support DataTransfer constructor\n    */\n    private _clipboardData: string = \"\";\n    /**\n    * Observable event triggered each time an clipboard event is received from the rendering canvas\n    */\n    public onClipboardObservable = new Observable<ClipboardInfo>();\n    /**\n    * Observable event triggered each time a pointer down is intercepted by a control\n    */\n    public onControlPickedObservable = new Observable<Control>();\n    /**\n    * Observable event triggered before layout is evaluated\n    */\n    public onBeginLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the layout was evaluated\n    */\n    public onEndLayoutObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered before the texture is rendered\n    */\n    public onBeginRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Observable event triggered after the texture was rendered\n    */\n    public onEndRenderObservable = new Observable<AdvancedDynamicTexture>();\n    /**\n    * Gets or sets a boolean defining if alpha is stored as premultiplied\n    */\n    public premulAlpha = false;\n    /**\n    * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\n    * Useful when you want more antialiasing\n    */\n    public get renderScale(): number {\n        return this._renderScale;\n    }\n    public set renderScale(value: number) {\n        if (value === this._renderScale) {\n            return;\n        }\n        this._renderScale = value;\n        this._onResize();\n    }\n    /** Gets or sets the background color */\n    public get background(): string {\n        return this._background;\n    }\n    public set background(value: string) {\n        if (this._background === value) {\n            return;\n        }\n        this._background = value;\n        this.markAsDirty();\n    }\n    /**\n    * Gets or sets the ideal width used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealWidth(): number {\n        return this._idealWidth;\n    }\n    public set idealWidth(value: number) {\n        if (this._idealWidth === value) {\n            return;\n        }\n        this._idealWidth = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets the ideal height used to design controls.\n    * The GUI will then rescale everything accordingly\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get idealHeight(): number {\n        return this._idealHeight;\n    }\n    public set idealHeight(value: number) {\n        if (this._idealHeight === value) {\n            return;\n        }\n        this._idealHeight = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get useSmallestIdeal(): boolean {\n        return this._useSmallestIdeal;\n    }\n    public set useSmallestIdeal(value: boolean) {\n        if (this._useSmallestIdeal === value) {\n            return;\n        }\n        this._useSmallestIdeal = value;\n        this.markAsDirty();\n        this._rootContainer._markAllAsDirty();\n    }\n    /**\n    * Gets or sets a boolean indicating if adaptive scaling must be used\n    * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\n    */\n    public get renderAtIdealSize(): boolean {\n        return this._renderAtIdealSize;\n    }\n    public set renderAtIdealSize(value: boolean) {\n        if (this._renderAtIdealSize === value) {\n            return;\n        }\n        this._renderAtIdealSize = value;\n        this._onResize();\n    }\n    /**\n    * Gets the underlying layer used to render the texture when in fullscreen mode\n    */\n    public get layer(): Nullable<Layer> {\n        return this._layerToDispose;\n    }\n    /**\n    * Gets the root container control\n    */\n    public get rootContainer(): Container {\n        return this._rootContainer;\n    }\n    /**\n    * Returns an array containing the root container.\n    * This is mostly used to let the Inspector introspects the ADT\n    * @returns an array containing the rootContainer\n    */\n    public getChildren(): Array<Container> {\n        return [this._rootContainer];\n    }\n    /**\n    * Will return all controls that are inside this texture\n    * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\n    * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\n    * @return all child controls\n    */\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (control: Control) => boolean): Control[] {\n        return this._rootContainer.getDescendants(directDescendantsOnly, predicate);\n    }\n    /**\n    * Gets or sets the current focused control\n    */\n    public get focusedControl(): Nullable<IFocusableControl> {\n        return this._focusedControl;\n    }\n    public set focusedControl(control: Nullable<IFocusableControl>) {\n        if (this._focusedControl == control) {\n            return;\n        }\n        if (this._focusedControl) {\n            this._focusedControl.onBlur();\n        }\n        if (control) {\n            control.onFocus();\n        }\n        this._focusedControl = control;\n    }\n    /**\n    * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\n    */\n    public get isForeground(): boolean {\n        if (!this.layer) {\n            return true;\n        }\n        return (!this.layer.isBackground);\n    }\n    public set isForeground(value: boolean) {\n        if (!this.layer) {\n            return;\n        }\n        if (this.layer.isBackground === !value) {\n            return;\n        }\n        this.layer.isBackground = !value;\n    }\n    /**\n    * Gets or set information about clipboardData\n    */\n    public get clipboardData(): string {\n        return this._clipboardData;\n    }\n    public set clipboardData(value: string) {\n        this._clipboardData = value;\n    }\n    /**\n   * Creates a new AdvancedDynamicTexture\n   * @param name defines the name of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\n   * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\n   */\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\n        scene = this.getScene();\n        if (!scene || !this._texture) {\n            return;\n        }\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add((info) => {\n            if (!this._focusedControl) {\n                return;\n            }\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                this._focusedControl.processKeyboard(info.event);\n            }\n            info.skipOnPointerObservable = true;\n        });\n        this._rootContainer._link(this);\n        this.hasAlpha = true;\n        if (!width || !height) {\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\n            this._onResize();\n        }\n        this._texture.isReady = true;\n    }\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"AdvancedDynamicTexture\"\n    */\n    public getClassName(): string {\n        return \"AdvancedDynamicTexture\";\n    }\n    /**\n    * Function used to execute a function on all controls\n    * @param func defines the function to execute\n    * @param container defines the container where controls belong. If null the root container will be used\n    */\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\n        if (!container) {\n            container = this._rootContainer;\n        }\n        func(container);\n        for (var child of container.children) {\n            if ((<any>child).children) {\n                this.executeOnAllControls(func, (<Container>child));\n                continue;\n            }\n            func(child);\n        }\n    }\n\n    private _useInvalidateRectOptimization = true;\n\n    /**\n     * Gets or sets a boolean indicating if the InvalidateRect optimization should be turned on\n     */\n    public get useInvalidateRectOptimization(): boolean {\n        return this._useInvalidateRectOptimization;\n    }\n\n    public set useInvalidateRectOptimization(value: boolean) {\n        this._useInvalidateRectOptimization = value;\n    }\n\n    private _clearRectangle: Nullable<Measure> = null;\n    private _invalidatedRectangle: Nullable<Measure> = null;\n    /**\n     * Invalidates a rectangle area on the gui texture\n     * @param clearMinX left most position of the rectangle to clear in the texture\n     * @param clearMinY top most position of the rectangle to clear in the texture\n     * @param clearMaxX right most position of the rectangle to clear in the texture\n     * @param clearMaxY bottom most position of the rectangle to clear in the texture\n     * @param minX left most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param minY top most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param maxX right most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     * @param maxY bottom most position of the rectangle to invalidate in absolute coordinates (not taking in account local transformation)\n     */\n    public invalidateRect(clearMinX: number, clearMinY: number, clearMaxX: number, clearMaxY: number, minX: number, minY: number, maxX: number, maxY: number) {\n        if (!this._useInvalidateRectOptimization) {\n            return;\n        }\n        if (!this._clearRectangle || !this._invalidatedRectangle) {\n            this._clearRectangle = new Measure(clearMinX, clearMinY, clearMaxX - clearMinX + 1, clearMaxY - clearMinY + 1);\n            this._invalidatedRectangle = new Measure(minX, minY, maxX - minX + 1, maxY - minY + 1);\n        } else {\n            // Compute intersection\n            var maxX = Math.ceil(Math.max(this._clearRectangle.left + this._clearRectangle.width - 1, clearMaxX));\n            var maxY = Math.ceil(Math.max(this._clearRectangle.top + this._clearRectangle.height - 1, clearMaxY));\n            this._clearRectangle.left = Math.floor(Math.min(this._clearRectangle.left, clearMinX));\n            this._clearRectangle.top = Math.floor(Math.min(this._clearRectangle.top, clearMinY));\n            this._clearRectangle.width = maxX - this._clearRectangle.left + 1;\n            this._clearRectangle.height = maxY - this._clearRectangle.top + 1;\n\n            maxX = Math.max(this._invalidatedRectangle.left + this._invalidatedRectangle.width - 1, maxX);\n            maxY = Math.max(this._invalidatedRectangle.top + this._invalidatedRectangle.height - 1, maxY);\n            this._invalidatedRectangle.left = Math.min(this._invalidatedRectangle.left, minX);\n            this._invalidatedRectangle.top = Math.min(this._invalidatedRectangle.top, minY);\n            this._invalidatedRectangle.width = maxX - this._invalidatedRectangle.left + 1;\n            this._invalidatedRectangle.height = maxY - this._invalidatedRectangle.top + 1;\n        }\n    }\n    /**\n    * Marks the texture as dirty forcing a complete update\n    */\n    public markAsDirty() {\n        this._isDirty = true;\n    }\n    /**\n    * Helper function used to create a new style\n    * @returns a new style\n    * @see http://doc.babylonjs.com/how_to/gui#styles\n    */\n    public createStyle(): Style {\n        return new Style(this);\n    }\n    /**\n    * Adds a new control to the root container\n    * @param control defines the control to add\n    * @returns the current texture\n    */\n    public addControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.addControl(control);\n        return this;\n    }\n    /**\n    * Removes a control from the root container\n    * @param control defines the control to remove\n    * @returns the current texture\n    */\n    public removeControl(control: Control): AdvancedDynamicTexture {\n        this._rootContainer.removeControl(control);\n        return this;\n    }\n    /**\n    * Release all resources\n    */\n    public dispose(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._rootCanvas = null;\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\n        if (this._resizeObserver) {\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n        }\n        if (this._pointerMoveObserver) {\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\n        }\n        if (this._pointerObserver) {\n            scene.onPointerObservable.remove(this._pointerObserver);\n        }\n        if (this._preKeyboardObserver) {\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\n        }\n        if (this._canvasPointerOutObserver) {\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\n        }\n        if (this._layerToDispose) {\n            this._layerToDispose.texture = null;\n            this._layerToDispose.dispose();\n            this._layerToDispose = null;\n        }\n        this._rootContainer.dispose();\n        this.onClipboardObservable.clear();\n        this.onControlPickedObservable.clear();\n        this.onBeginRenderObservable.clear();\n        this.onEndRenderObservable.clear();\n        this.onBeginLayoutObservable.clear();\n        this.onEndLayoutObservable.clear();\n        super.dispose();\n    }\n    private _onResize(): void {\n        let scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        // Check size\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\n        if (this._renderAtIdealSize) {\n            if (this._idealWidth) {\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\n                renderWidth = this._idealWidth;\n            } else if (this._idealHeight) {\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\n                renderHeight = this._idealHeight;\n            }\n        }\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\n            this.scaleTo(renderWidth, renderHeight);\n            this.markAsDirty();\n            if (this._idealWidth || this._idealHeight) {\n                this._rootContainer._markAllAsDirty();\n            }\n        }\n        this.invalidateRect(0, 0, textureSize.width - 1, textureSize.height - 1, 0, 0, textureSize.width - 1, textureSize.height - 1);\n    }\n    /** @hidden */\n    public _getGlobalViewport(scene: Scene): Viewport {\n        var engine = scene.getEngine();\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    }\n    /**\n    * Get screen coordinates for a vector3\n    * @param position defines the position to project\n    * @param worldMatrix defines the world matrix to use\n    * @returns the projected position\n    */\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\n        var scene = this.getScene();\n        if (!scene) {\n            return Vector2.Zero();\n        }\n        var globalViewport = this._getGlobalViewport(scene);\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\n        projectedPosition.scaleInPlace(this.renderScale);\n        return new Vector2(projectedPosition.x, projectedPosition.y);\n    }\n    private _checkUpdate(camera: Camera): void {\n        if (this._layerToDispose) {\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\n                return;\n            }\n        }\n        if (this._isFullscreen && this._linkedControls.length) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            var globalViewport = this._getGlobalViewport(scene);\n            for (var control of this._linkedControls) {\n                if (!control.isVisible) {\n                    continue;\n                }\n                var mesh = control._linkedMesh;\n                if (!mesh || mesh.isDisposed()) {\n                    Tools.SetImmediate(() => {\n                        control.linkWithMesh(null);\n                    });\n                    continue;\n                }\n                var position = mesh.getBoundingInfo().boundingSphere.center;\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\n                    control.notRenderable = true;\n                    continue;\n                }\n                control.notRenderable = false;\n                // Account for RenderScale.\n                projectedPosition.scaleInPlace(this.renderScale);\n                control._moveToProjectedPosition(projectedPosition);\n            }\n        }\n        if (!this._isDirty && !this._rootContainer.isDirty) {\n            return;\n        }\n        this._isDirty = false;\n        this._render();\n        this.update(true, this.premulAlpha);\n    }\n    private _clearMeasure = new Measure(0, 0, 0, 0);\n    private _render(): void {\n        var textureSize = this.getSize();\n        var renderWidth = textureSize.width;\n        var renderHeight = textureSize.height;\n\n        var context = this.getContext();\n        context.font = \"18px Arial\";\n        context.strokeStyle = \"white\";\n\n        // Layout\n        this.onBeginLayoutObservable.notifyObservers(this);\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\n        this._rootContainer._layout(measure, context);\n        this.onEndLayoutObservable.notifyObservers(this);\n        this._isDirty = false; // Restoring the dirty state that could have been set by controls during layout processing\n\n        // Clear\n        if (this._clearRectangle) {\n            this._clearMeasure.copyFrom(this._clearRectangle);\n        } else {\n            this._clearMeasure.copyFromFloats(0, 0, renderWidth, renderHeight);\n        }\n        context.clearRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n        if (this._background) {\n            context.save();\n            context.fillStyle = this._background;\n            context.fillRect(this._clearMeasure.left, this._clearMeasure.top, this._clearMeasure.width, this._clearMeasure.height);\n            context.restore();\n        }\n\n        // Render\n        this.onBeginRenderObservable.notifyObservers(this);\n        this._rootContainer._render(context, this._invalidatedRectangle);\n        this.onEndRenderObservable.notifyObservers(this);\n        this._clearRectangle = null;\n        this._invalidatedRectangle = null;\n    }\n    /** @hidden */\n    public _changeCursor(cursor: string) {\n        if (this._rootCanvas) {\n            this._rootCanvas.style.cursor = cursor;\n        }\n    }\n    /** @hidden */\n    public _registerLastControlDown(control: Control, pointerId: number) {\n        this._lastControlDown[pointerId] = control;\n        this.onControlPickedObservable.notifyObservers(control);\n    }\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        var textureSize = this.getSize();\n        if (this._isFullscreen) {\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            let viewport = camera!.viewport;\n            x = x * (textureSize.width / (engine.getRenderWidth() * viewport.width));\n            y = y * (textureSize.height / (engine.getRenderHeight() * viewport.height));\n        }\n        if (this._capturingControl[pointerId]) {\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\n            return;\n        }\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\n            this._changeCursor(\"\");\n            if (type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                    delete this._lastControlOver[pointerId];\n                }\n            }\n        }\n        this._manageFocus();\n    }\n    /** @hidden */\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\n        for (var pointerId in list) {\n            if (!list.hasOwnProperty(pointerId)) {\n                continue;\n            }\n            var lastControlOver = list[pointerId];\n            if (lastControlOver === control) {\n                delete list[pointerId];\n            }\n        }\n    }\n    /** @hidden */\n    public _cleanControlAfterRemoval(control: Control) {\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\n    }\n    /** Attach to all scene events required to support pointer events */\n    public attach(): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\n                return;\n            }\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            if (!scene) {\n                return;\n            }\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            let engine = scene.getEngine();\n            let viewport = camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n            let x = scene.pointerX / engine.getHardwareScalingLevel() - viewport.x;\n            let y = scene.pointerY / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\n            this._shouldBlockPointer = false;\n            // Do picking modifies _shouldBlockPointer\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\n            // Avoid overwriting a true skipOnPointerObservable to false\n            if (this._shouldBlockPointer) {\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\n            }\n        });\n        this._attachToOnPointerOut(scene);\n    }\n    /** @hidden */\n    private onClipboardCopy = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.COPY, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardCut = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.CUT, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /** @hidden */\n    private onClipboardPaste = (evt: ClipboardEvent) => {\n        let ev = new ClipboardInfo(ClipboardEventTypes.PASTE, evt);\n        this.onClipboardObservable.notifyObservers(ev);\n        evt.preventDefault();\n    }\n    /**\n    * Register the clipboard Events onto the canvas\n    */\n    public registerClipboardEvents(): void {\n        self.addEventListener(\"copy\", this.onClipboardCopy, false);\n        self.addEventListener(\"cut\", this.onClipboardCut, false);\n        self.addEventListener(\"paste\", this.onClipboardPaste, false);\n    }\n    /**\n     * Unregister the clipboard Events from the canvas\n     */\n    public unRegisterClipboardEvents(): void {\n        self.removeEventListener(\"copy\", this.onClipboardCopy);\n        self.removeEventListener(\"cut\", this.onClipboardCut);\n        self.removeEventListener(\"paste\", this.onClipboardPaste);\n    }\n    /**\n    * Connect the texture to a hosting mesh to enable interactions\n    * @param mesh defines the mesh to attach to\n    * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\n    */\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\n            if (pi.type !== PointerEventTypes.POINTERMOVE\n                && pi.type !== PointerEventTypes.POINTERUP\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\n                return;\n            }\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\n                var uv = pi.pickInfo.getTextureCoordinates();\n                if (uv) {\n                    let size = this.getSize();\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\n                }\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\n                if (this._lastControlDown[pointerId]) {\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\n                }\n                delete this._lastControlDown[pointerId];\n                if (this.focusedControl) {\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\n                    let canMoveFocus = true;\n                    if (friendlyControls) {\n                        for (var control of friendlyControls) {\n                            // Same host, no need to keep the focus\n                            if (this === control._host) {\n                                continue;\n                            }\n                            // Different hosts\n                            const otherHost = control._host;\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\n                                canMoveFocus = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (canMoveFocus) {\n                        this.focusedControl = null;\n                    }\n                }\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\n                if (this._lastControlOver[pointerId]) {\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\n                }\n                delete this._lastControlOver[pointerId];\n            }\n        });\n        mesh.enablePointerMoveEvents = supportPointerMove;\n        this._attachToOnPointerOut(scene);\n    }\n    /**\n    * Move the focus to a specific control\n    * @param control defines the control which will receive the focus\n    */\n    public moveFocusToControl(control: IFocusableControl): void {\n        this.focusedControl = control;\n        this._lastPickedControl = <any>control;\n        this._blockNextFocusCheck = true;\n    }\n    private _manageFocus(): void {\n        if (this._blockNextFocusCheck) {\n            this._blockNextFocusCheck = false;\n            this._lastPickedControl = <any>this._focusedControl;\n            return;\n        }\n        // Focus management\n        if (this._focusedControl) {\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\n                if (this._lastPickedControl.isFocusInvisible) {\n                    return;\n                }\n                this.focusedControl = null;\n            }\n        }\n    }\n    private _attachToOnPointerOut(scene: Scene): void {\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\n            if (this._lastControlOver[pointerEvent.pointerId]) {\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\n            }\n            delete this._lastControlOver[pointerEvent.pointerId];\n            if (this._lastControlDown[pointerEvent.pointerId] && this._lastControlDown[pointerEvent.pointerId] !== this._capturingControl[pointerEvent.pointerId]) {\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\n                delete this._lastControlDown[pointerEvent.pointerId];\n            }\n        });\n    }\n    // Statics\n    /**\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\n     * @param mesh defines the mesh which will receive the texture\n     * @param width defines the texture width (1024 by default)\n     * @param height defines the texture height (1024 by default)\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\n     * @returns a new AdvancedDynamicTexture\n     */\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\n        material.backFaceCulling = false;\n        material.diffuseColor = Color3.Black();\n        material.specularColor = Color3.Black();\n        if (onlyAlphaTesting) {\n            material.diffuseTexture = result;\n            material.emissiveTexture = result;\n            result.hasAlpha = true;\n        } else {\n            material.emissiveTexture = result;\n            material.opacityTexture = result;\n        }\n        mesh.material = material;\n        result.attachToMesh(mesh, supportPointerMove);\n        return result;\n    }\n    /**\n    * Creates a new AdvancedDynamicTexture in fullscreen mode.\n    * In this mode the texture will rely on a layer for its rendering.\n    * This allows it to be treated like any other layer.\n    * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\n    * LayerMask is set through advancedTexture.layer.layerMask\n    * @param name defines name for the texture\n    * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\n    * @param scene defines the hsoting scene\n    * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\n    * @returns a new AdvancedDynamicTexture\n    */\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\n        // Display\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\n        layer.texture = result;\n        result._layerToDispose = layer;\n        result._isFullscreen = true;\n        // Attach\n        result.attach();\n        return result;\n    }\n}","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the control.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform\r\n     * @param result defines the target vector2\r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation\r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix\r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation\r\n     * @param angle defines the rotation angle\r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling\r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix\r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Checkbox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        let actualWidth = this._currentMeasure.width - this._thickness;\r\n        let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Outer\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n        context.fill();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._thickness;\r\n\r\n        context.stroke();\r\n\r\n        // Inner\r\n        if (this._isChecked) {\r\n            context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n            let offsetWidth = actualWidth * this._checkSizeRatio;\r\n            let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);\r\n\r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header);\r\n\r\n        return panel;\r\n    }\r\n}\r\n","import { BaseSlider } from \"./baseSlider\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _isThumbCircle = false;\r\n    protected _displayValueBar = true;\r\n\r\n    /** Gets or sets a boolean indicating if the value bar must be rendered */\r\n    public get displayValueBar(): boolean {\r\n        return this._displayValueBar;\r\n    }\r\n\r\n    public set displayValueBar(value: boolean) {\r\n        if (this._displayValueBar === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayValueBar = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(this.isThumbCircle ? \"circle\" : \"rectangle\");\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        var radius = 0;\r\n\r\n        if (this.isThumbClamped && this.isThumbCircle) {\r\n            if (this.isVertical) {\r\n                top += (this._effectiveThumbThickness / 2);\r\n            }\r\n            else {\r\n                left += (this._effectiveThumbThickness / 2);\r\n            }\r\n\r\n            radius = this._backgroundBoxThickness / 2;\r\n        }\r\n        else {\r\n            radius = (this._effectiveThumbThickness - this._effectiveBarOffset) / 2;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        if (this.isVertical) {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height + this._effectiveThumbThickness);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n        else {\r\n            if (this.isThumbClamped) {\r\n                if (this.isThumbCircle) {\r\n                    context.beginPath();\r\n                    context.arc(left + this._backgroundBoxLength, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                    context.fill();\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width + this._effectiveThumbThickness, height);\r\n                }\r\n            }\r\n            else {\r\n                context.fillRect(left, top, width, height);\r\n            }\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n        if (this._displayValueBar) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + this._backgroundBoxThickness / 2, top + this._backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + this._backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this.isVertical) {\r\n                    context.arc(left + this._backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (this._backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this.isVertical) {\r\n                    context.fillRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this.isVertical) {\r\n                    context.strokeRect(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style\r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./adtInstrumentation\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\nimport { Measure } from \"../measure\";\nimport { InputText } from \"./inputText\";\nimport { Rectangle } from \"./rectangle\";\nimport { Button } from \"./button\";\nimport { Grid } from \"./grid\";\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\nimport { TextBlock } from \".\";\n\n/** Class used to create color pickers */\nexport class ColorPicker extends Control {\n    private static _Epsilon = 0.000001;\n    private _colorWheelCanvas: HTMLCanvasElement;\n\n    private _value: Color3 = Color3.Red();\n    private _tmpColor = new Color3();\n\n    private _pointerStartedOnSquare = false;\n    private _pointerStartedOnWheel = false;\n\n    private _squareLeft = 0;\n    private _squareTop = 0;\n    private _squareSize = 0;\n\n    private _h = 360;\n    private _s = 1;\n    private _v = 1;\n\n    /**\n     * Observable raised when the value changes\n     */\n    public onValueChangedObservable = new Observable<Color3>();\n\n    /** Gets or sets the color of the color picker */\n    public get value(): Color3 {\n        return this._value;\n    }\n\n    public set value(value: Color3) {\n        if (this._value.equals(value)) {\n            return;\n        }\n\n        this._value.copyFrom(value);\n\n        this._RGBtoHSV(this._value, this._tmpColor);\n\n        this._h = this._tmpColor.r;\n        this._s = Math.max(this._tmpColor.g, 0.00001);\n        this._v = Math.max(this._tmpColor.b, 0.00001);\n\n        this._markAsDirty();\n\n        if (this._value.r <= ColorPicker._Epsilon) {\n            this._value.r = 0;\n        }\n\n        if (this._value.g <= ColorPicker._Epsilon) {\n            this._value.g = 0;\n        }\n\n        if (this._value.b <= ColorPicker._Epsilon) {\n            this._value.b = 0;\n        }\n\n        if (this._value.r >= 1.0 - ColorPicker._Epsilon) {\n            this._value.r = 1.0;\n        }\n\n        if (this._value.g >= 1.0 - ColorPicker._Epsilon) {\n            this._value.g = 1.0;\n        }\n\n        if (this._value.b >= 1.0 - ColorPicker._Epsilon) {\n            this._value.b = 1.0;\n        }\n\n        this.onValueChangedObservable.notifyObservers(this._value);\n    }\n\n    /**\n     * Gets or sets control width\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get width(): string | number {\n        return this._width.toString(this._host);\n    }\n\n    public set width(value: string | number) {\n        if (this._width.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._width.fromString(value)) {\n            this._height.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /**\n     * Gets or sets control height\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\n     */\n    public get height(): string | number {\n        return this._height.toString(this._host);\n    }\n\n    /** Gets or sets control height */\n    public set height(value: string | number) {\n        if (this._height.toString(this._host) === value) {\n            return;\n        }\n\n        if (this._height.fromString(value)) {\n            this._width.fromString(value);\n            this._markAsDirty();\n        }\n    }\n\n    /** Gets or sets control size */\n    public get size(): string | number {\n        return this.width;\n    }\n\n    public set size(value: string | number) {\n        this.width = value;\n    }\n\n    /**\n     * Creates a new ColorPicker\n     * @param name defines the control name\n     */\n    constructor(public name?: string) {\n        super(name);\n        this.value = new Color3(.88, .1, .1);\n        this.size = \"200px\";\n        this.isPointerBlocker = true;\n    }\n\n    protected _getTypeName(): string {\n        return \"ColorPicker\";\n    }\n\n    /** @hidden */\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\n\n        if (parentMeasure.width < parentMeasure.height) {\n            this._currentMeasure.height = parentMeasure.width;\n        } else {\n            this._currentMeasure.width = parentMeasure.height;\n        }\n    }\n\n    private _updateSquareProps(): void {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var innerDiameter = (radius - wheelThickness) * 2;\n        var squareSize = innerDiameter / (Math.sqrt(2));\n        var offset = radius - squareSize * .5;\n\n        this._squareLeft = this._currentMeasure.left + offset;\n        this._squareTop = this._currentMeasure.top + offset;\n        this._squareSize = squareSize;\n    }\n\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\n        var lgh = context.createLinearGradient(left, top, width + left, top);\n        lgh.addColorStop(0, '#fff');\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\n\n        context.fillStyle = lgh;\n        context.fillRect(left, top, width, height);\n\n        var lgv = context.createLinearGradient(left, top, left, height + top);\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\n        lgv.addColorStop(1, '#000');\n\n        context.fillStyle = lgv;\n        context.fillRect(left, top, width, height);\n    }\n\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\n        context.beginPath();\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#333333';\n        context.stroke();\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.lineWidth = 3;\n        context.strokeStyle = '#ffffff';\n        context.stroke();\n    }\n\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = radius * 2;\n        canvas.height = radius * 2;\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\n        var data = image.data;\n\n        var color = this._tmpColor;\n        var maxDistSq = radius * radius;\n        var innerRadius = radius - thickness;\n        var minDistSq = innerRadius * innerRadius;\n\n        for (var x = -radius; x < radius; x++) {\n            for (var y = -radius; y < radius; y++) {\n\n                var distSq = x * x + y * y;\n\n                if (distSq > maxDistSq || distSq < minDistSq) {\n                    continue;\n                }\n\n                var dist = Math.sqrt(distSq);\n                var ang = Math.atan2(y, x);\n\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\n\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\n\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                //apply less alpha to bigger color pickers\n                var alphaAmount = .2;\n                var maxAlpha = .2;\n                var minAlpha = .04;\n                var lowerRadius = 50;\n                var upperRadius = 150;\n\n                if (radius < lowerRadius) {\n                    alphaAmount = maxAlpha;\n                } else if (radius > upperRadius) {\n                    alphaAmount = minAlpha;\n                } else {\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\n                }\n\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\n\n                if (alphaRatio < alphaAmount) {\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\n                } else if (alphaRatio > 1 - alphaAmount) {\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\n                } else {\n                    data[index + 3] = 255;\n                }\n\n            }\n        }\n\n        context.putImageData(image, 0, 0);\n\n        return canvas;\n    }\n\n    private _RGBtoHSV(color: Color3, result: Color3) {\n        var r = color.r;\n        var g = color.g;\n        var b = color.b;\n\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h = 0;\n        var s = 0;\n        var v = max;\n\n        var dm = max - min;\n\n        if (max !== 0) {\n            s = dm / max;\n        }\n\n        if (max != min) {\n            if (max == r) {\n                h = (g - b) / dm;\n                if (g < b) {\n                    h += 6;\n                }\n            } else if (max == g) {\n                h = (b - r) / dm + 2;\n            } else if (max == b) {\n                h = (r - g) / dm + 4;\n            }\n            h *= 60;\n        }\n\n        result.r = h;\n        result.g = s;\n        result.b = v;\n    }\n\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\n        var chroma = value * saturation;\n        var h = hue / 60;\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\n        var r = 0;\n        var g = 0;\n        var b = 0;\n\n        if (h >= 0 && h <= 1) {\n            r = chroma;\n            g = x;\n        } else if (h >= 1 && h <= 2) {\n            r = x;\n            g = chroma;\n        } else if (h >= 2 && h <= 3) {\n            g = chroma;\n            b = x;\n        } else if (h >= 3 && h <= 4) {\n            g = x;\n            b = chroma;\n        } else if (h >= 4 && h <= 5) {\n            r = x;\n            b = chroma;\n        } else if (h >= 5 && h <= 6) {\n            r = chroma;\n            b = x;\n        }\n\n        var m = value - chroma;\n        result.set((r + m), (g + m), (b + m));\n    }\n\n    /** @hidden */\n    public _draw(context: CanvasRenderingContext2D): void {\n        context.save();\n\n        this._applyStates(context);\n\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var wheelThickness = radius * .2;\n        var left = this._currentMeasure.left;\n        var top = this._currentMeasure.top;\n\n        if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\n            this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\n        }\n\n        this._updateSquareProps();\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowColor = this.shadowColor;\n            context.shadowBlur = this.shadowBlur;\n            context.shadowOffsetX = this.shadowOffsetX;\n            context.shadowOffsetY = this.shadowOffsetY;\n\n            context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\n        }\n\n        context.drawImage(this._colorWheelCanvas, left, top);\n\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n\n        this._drawGradientSquare(this._h,\n            this._squareLeft,\n            this._squareTop,\n            this._squareSize,\n            this._squareSize,\n            context);\n\n        var cx = this._squareLeft + this._squareSize * this._s;\n        var cy = this._squareTop + this._squareSize * (1 - this._v);\n\n        this._drawCircle(cx, cy, radius * .04, context);\n\n        var dist = radius - wheelThickness * .5;\n        cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\n        cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\n        this._drawCircle(cx, cy, wheelThickness * .35, context);\n\n        context.restore();\n    }\n\n    // Events\n    private _pointerIsDown = false;\n\n    private _updateValueFromPointer(x: number, y: number): void {\n        if (this._pointerStartedOnWheel) {\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n            var centerX = radius + this._currentMeasure.left;\n            var centerY = radius + this._currentMeasure.top;\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\n        }\n        else if (this._pointerStartedOnSquare) {\n            this._updateSquareProps();\n            this._s = (x - this._squareLeft) / this._squareSize;\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\n            this._s = Math.min(this._s, 1);\n            this._s = Math.max(this._s, ColorPicker._Epsilon);\n            this._v = Math.min(this._v, 1);\n            this._v = Math.max(this._v, ColorPicker._Epsilon);\n        }\n\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\n\n        this.value = this._tmpColor;\n    }\n\n    private _isPointOnSquare(x: number, y: number): boolean {\n        this._updateSquareProps();\n\n        var left = this._squareLeft;\n        var top = this._squareTop;\n        var size = this._squareSize;\n\n        if (x >= left && x <= left + size &&\n            y >= top && y <= top + size) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _isPointOnWheel(x: number, y: number): boolean {\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\n        var centerX = radius + this._currentMeasure.left;\n        var centerY = radius + this._currentMeasure.top;\n        var wheelThickness = radius * .2;\n        var innerRadius = radius - wheelThickness;\n        var radiusSq = radius * radius;\n        var innerRadiusSq = innerRadius * innerRadius;\n\n        var dx = x - centerX;\n        var dy = y - centerY;\n\n        var distSq = dx * dx + dy * dy;\n\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\n            return false;\n        }\n\n        this._pointerIsDown = true;\n\n        this._pointerStartedOnSquare = false;\n        this._pointerStartedOnWheel = false;\n\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._isPointOnSquare(x, y)) {\n            this._pointerStartedOnSquare = true;\n        } else if (this._isPointOnWheel(x, y)) {\n            this._pointerStartedOnWheel = true;\n        }\n\n        this._updateValueFromPointer(x, y);\n        this._host._capturingControl[pointerId] = this;\n\n        return true;\n    }\n\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\n        // Invert transform\n        this._invertTransformMatrix.transformCoordinates(coordinates.x, coordinates.y, this._transformedPosition);\n\n        let x = this._transformedPosition.x;\n        let y = this._transformedPosition.y;\n\n        if (this._pointerIsDown) {\n            this._updateValueFromPointer(x, y);\n        }\n\n        super._onPointerMove(target, coordinates);\n    }\n\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\n        this._pointerIsDown = false;\n\n        delete this._host._capturingControl[pointerId];\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\n    }\n\n    /**\n     * This function expands the color picker by creating a color picker dialog with manual\n     * color value input and the ability to save colors into an array to be used later in\n     * subsequent launches of the dialogue.\n     * @param advancedTexture defines the AdvancedDynamicTexture the dialog is assigned to\n     * @param options defines size for dialog and options for saved colors. Also accepts last color picked as hex string and saved colors array as hex strings.\n     * @returns picked color as a hex string and the saved colors array as hex strings.\n     */\n    public static ShowPickerDialogAsync(advancedTexture: AdvancedDynamicTexture,\n        options: {\n            pickerWidth?: string,\n            pickerHeight?: string,\n            headerHeight?: string,\n            lastColor?: string,\n            swatchLimit?: number,\n            numSwatchesPerLine?: number,\n            savedColors?: Array<string>\n        }\n    ): Promise<{\n        savedColors?: string[],\n        pickedColor: string\n    }> {\n\n        return new Promise((resolve, reject) => {\n            // Default options\n            options.pickerWidth = options.pickerWidth || \"640px\";\n            options.pickerHeight = options.pickerHeight || \"400px\";\n            options.headerHeight = options.headerHeight || \"35px\";\n            options.lastColor = options.lastColor || \"#000000\";\n            options.swatchLimit = options.swatchLimit || 20;\n            options.numSwatchesPerLine = options.numSwatchesPerLine || 10;\n\n            // Window size settings\n            var drawerMaxRows: number = options.swatchLimit / options.numSwatchesPerLine;\n            var rawSwatchSize: number = parseFloat(<string>options.pickerWidth) / options.numSwatchesPerLine;\n            var gutterSize: number = Math.floor(rawSwatchSize * 0.25);\n            var colGutters: number = gutterSize * (options.numSwatchesPerLine + 1);\n            var swatchSize: number = Math.floor((parseFloat(<string>options.pickerWidth) - colGutters) / options.numSwatchesPerLine);\n            var drawerMaxSize: number = (swatchSize * drawerMaxRows) + (gutterSize * (drawerMaxRows + 1));\n            var containerSize: string = (parseInt(options.pickerHeight) + drawerMaxSize + Math.floor(swatchSize * 0.25)).toString() + \"px\";\n\n            // Button Colors\n            var buttonColor: string = \"#c0c0c0\";\n            var buttonBackgroundColor: string = \"#535353\";\n            var buttonBackgroundHoverColor: string = \"#414141\";\n            var buttonBackgroundClickColor: string = \"515151\";\n            var buttonDisabledColor: string = \"#555555\";\n            var buttonDisabledBackgroundColor: string = \"#454545\";\n            var currentSwatchesOutlineColor: string = \"#404040\";\n            var luminanceLimitColor: Color3 = Color3.FromHexString(\"#dddddd\");\n            var luminanceLimit: number = luminanceLimitColor.r + luminanceLimitColor.g + luminanceLimitColor.b;\n            var iconColorDark: string = \"#aaaaaa\";\n            var iconColorLight: string = \"#ffffff\";\n            var closeIconColor: Color3;\n\n            // Button settings\n            var buttonFontSize: number;\n            var butEdit: Button;\n            var buttonWidth: string;\n            var buttonHeight: string;\n\n            // Input Text Colors\n            var inputFieldLabels: string[] = [\"R\", \"G\", \"B\"];\n            var inputTextBackgroundColor: string = \"#454545\";\n            var inputTextColor: string = \"#f0f0f0\";\n\n            // This is the current color as set by either the picker or by entering a value\n            var currentColor: Color3;\n\n            // This int is used for naming swatches and serves as the index for calling them from the list\n            var swatchNumber: number;\n\n            // Menu Panel options. We need to know if the swatchDrawer exists so we can create it if needed.\n            var swatchDrawer: Grid;\n            var editSwatchMode: boolean = false;\n\n            // Color InputText fields that will be updated upon value change\n            var picker: ColorPicker;\n            var rValInt: InputText;\n            var gValInt: InputText;\n            var bValInt: InputText;\n            var rValDec: InputText;\n            var gValDec: InputText;\n            var bValDec: InputText;\n            var hexVal: InputText;\n            var newSwatch: Rectangle;\n            var lastVal: string;\n            var activeField: string;\n\n            /**\n            * Will update all values for InputText and ColorPicker controls based on the BABYLON.Color3 passed to this function.\n            * Each InputText control and the ColorPicker control will be tested to see if they are the activeField and if they\n            * are will receive no update. This is to prevent the input from the user being overwritten.\n            */\n            function updateValues(value: Color3, inputField: string) {\n                activeField = inputField;\n                var pickedColor: string = value.toHexString();\n                newSwatch.background = pickedColor;\n                if (rValInt.name != activeField) {\n                    rValInt.text = Math.floor(value.r * 255).toString();\n                }\n                if (gValInt.name != activeField) {\n                    gValInt.text = Math.floor(value.g * 255).toString();\n                }\n                if (bValInt.name != activeField) {\n                    bValInt.text = Math.floor(value.b * 255).toString();\n                }\n                if (rValDec.name != activeField) {\n                    rValDec.text = value.r.toString();\n                }\n                if (gValDec.name != activeField) {\n                    gValDec.text = value.g.toString();\n                }\n                if (bValDec.name != activeField) {\n                    bValDec.text = value.b.toString();\n                }\n                if (hexVal.name != activeField) {\n                    var minusPound: string[] = pickedColor.split(\"#\");\n                    hexVal.text = minusPound[1];\n                }\n                if (picker.name != activeField) {\n                    picker.value = value;\n                }\n            }\n\n            // When the user enters an integer for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateInt(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\") {\n                        if (Math.floor(parseInt(newValue)) < 0) {\n                            newValue = \"0\";\n                        }\n                        else if (Math.floor(parseInt(newValue)) > 255) {\n                            newValue = \"255\";\n                        }\n                        else if (isNaN(parseInt(newValue))) {\n                            newValue = \"0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\") {\n                    newValue = parseInt(newValue).toString();\n                    field.text = newValue;\n                    var newSwatchRGB: Color3 = BABYLON.Color3.FromHexString(newSwatch.background);\n                    if (activeField == field.name) {\n                        if (channel == \"r\") {\n                            updateValues(new BABYLON.Color3((parseInt(newValue)) / 255, newSwatchRGB.g, newSwatchRGB.b), field.name);\n                        }\n                        else if (channel == \"g\") {\n                            updateValues(new BABYLON.Color3(newSwatchRGB.r, (parseInt(newValue)) / 255, newSwatchRGB.b), field.name);\n                        }\n                        else {\n                            updateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, (parseInt(newValue)) / 255), field.name);\n                        }\n                    }\n                }\n            }\n\n            // When the user enters a float for R, G, or B we check to make sure it is a valid number and replace if not.\n            function updateFloat(field: InputText, channel: string) {\n                var newValue: string = field.text;\n                var checkVal: boolean = /[^0-9\\.]/g.test(newValue);\n                if (checkVal) {\n                    field.text = lastVal;\n                    return;\n                }\n                else {\n                    if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                        if (parseFloat(newValue) < 0.0) {\n                            newValue = \"0.0\";\n                        }\n                        else if (parseFloat(newValue) > 1.0) {\n                            newValue = \"1.0\";\n                        }\n                        else if (isNaN(parseFloat(newValue))) {\n                            newValue = \"0.0\";\n                        }\n                    }\n                    if (activeField == field.name) {\n                        lastVal = newValue;\n                    }\n                }\n                if (newValue != \"\" && newValue != \".\" && parseFloat(newValue) != 0) {\n                    newValue = parseFloat(newValue).toString();\n                    field.text = newValue;\n                }\n                else {\n                    newValue = \"0.0\";\n                }\n                var newSwatchRGB = BABYLON.Color3.FromHexString(newSwatch.background);\n                if (activeField == field.name) {\n                    if (channel == \"r\") {\n                        updateValues(new BABYLON.Color3(parseFloat(newValue), newSwatchRGB.g, newSwatchRGB.b), field.name);\n                    }\n                    else if (channel == \"g\") {\n                        updateValues(new BABYLON.Color3(newSwatchRGB.r, parseFloat(newValue), newSwatchRGB.b), field.name);\n                    }\n                    else {\n                        updateValues(new BABYLON.Color3(newSwatchRGB.r, newSwatchRGB.g, parseFloat(newValue)), field.name);\n                    }\n                }\n\n            }\n\n            // Removes the current index from the savedColors array. Drawer can then be regenerated.\n            function deleteSwatch(index: number) {\n                if (options.savedColors) {\n                    options.savedColors.splice(index, 1);\n                }\n                if (options.savedColors && options.savedColors.length == 0) {\n                    setEditButtonVisibility(false);\n                    editSwatchMode = false;\n                }\n            }\n\n            // Creates and styles an individual swatch when updateSwatches is called.\n            function createSwatch() {\n                if (options.savedColors && options.savedColors[swatchNumber]) {\n                    if (editSwatchMode) {\n                        var icon: string = \"b\";\n                    }\n                    else {\n                        var icon: string = \"\";\n                    }\n                    var swatch: Button = Button.CreateSimpleButton(\"Swatch_\" + swatchNumber, icon);\n                    swatch.fontFamily = \"BabylonJSglyphs\";\n                    var swatchColor: Color3 = Color3.FromHexString(options.savedColors[swatchNumber]);\n                    var swatchLuminence: number = swatchColor.r + swatchColor.g + swatchColor.b;\n\n                    // Set color of outline and textBlock based on luminance of the color swatch so feedback always visible\n                    if (swatchLuminence > luminanceLimit) {\n                        swatch.color = iconColorDark;\n                    }\n                    else {\n                        swatch.color = iconColorLight;\n                    }\n                    swatch.fontSize = Math.floor(swatchSize * 0.7);\n                    swatch.textBlock!.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                    swatch.height = swatch.width = (swatchSize).toString() + \"px\";\n                    swatch.background = options.savedColors[swatchNumber];\n                    swatch.thickness = 2;\n                    let metadata = swatchNumber;\n                    swatch.pointerDownAnimation = () => {\n                        swatch.thickness = 4;\n                    };\n                    swatch.pointerUpAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerEnterAnimation = () => {\n                        swatch.thickness = 3;\n                    };\n                    swatch.pointerOutAnimation = () => {\n                        swatch.thickness = 2;\n                    };\n                    swatch.onPointerClickObservable.add(() => {\n                        if (!editSwatchMode) {\n                            if (options.savedColors) {\n                                updateValues(BABYLON.Color3.FromHexString(options.savedColors[metadata]), swatch.name!);\n                            }\n                        }\n                        else {\n                            deleteSwatch(metadata);\n                            updateSwatches(\"\", butSave);\n                        }\n                    });\n                    return swatch;\n                }\n                else {\n                    return null;\n                }\n            }\n\n            // Mode switch to render button text and close symbols on swatch controls\n            function editSwatches(mode?: boolean) {\n                if (mode !== undefined) {\n                    editSwatchMode = mode;\n                }\n                if (editSwatchMode) {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"b\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Done\";\n                    }\n                }\n                else {\n                    for (var i = 0; i < swatchDrawer.children.length; i++) {\n                        var thisButton: Button = swatchDrawer.children[i] as Button;\n                        thisButton.textBlock!.text = \"\";\n                    }\n                    if (butEdit !== undefined) {\n                        butEdit.textBlock!.text = \"Edit\";\n                    }\n                }\n            }\n\n            /**\n             * When Save Color button is pressed this function will first create a swatch drawer if one is not already\n             * made. Then all controls are removed from the drawer and we step through the savedColors array and\n             * creates one swatch per color. It will also set the height of the drawer control based on how many\n             * saved colors there are and how many can be stored per row.\n             */\n            function updateSwatches(color: string, button: Button) {\n                if (options.savedColors) {\n\n                    if (color != \"\") {\n                        options.savedColors.push(color);\n                    }\n                    swatchNumber = 0;\n                    swatchDrawer.clearControls();\n                    var rowCount: number = Math.ceil(options.savedColors.length / options.numSwatchesPerLine!);\n                    if (rowCount == 0) {\n                        var gutterCount: number = 0;\n                    }\n                    else {\n                        var gutterCount: number = rowCount + 1;\n                    }\n                    if (swatchDrawer.rowCount != rowCount + gutterCount) {\n                        var currentRows: number = swatchDrawer.rowCount;\n                        for (var i = 0; i < currentRows; i++) {\n                            swatchDrawer.removeRowDefinition(0);\n                        }\n                        for (var i = 0; i < rowCount + gutterCount; i++) {\n                            if (i % 2) {\n                                swatchDrawer.addRowDefinition(swatchSize, true);\n                            }\n                            else {\n                                swatchDrawer.addRowDefinition(gutterSize, true);\n                            }\n                        }\n                    }\n                    swatchDrawer.height = ((swatchSize * rowCount) + (gutterCount * gutterSize)).toString() + \"px\";\n\n                    for (var y = 1, thisRow = 1; y < rowCount + gutterCount; y += 2, thisRow++) {\n\n                        // Determine number of buttons to create per row based on the button limit per row and number of saved colors\n                        if (options.savedColors.length > thisRow * options.numSwatchesPerLine!) {\n                            var totalButtonsThisRow = options.numSwatchesPerLine!;\n                        }\n                        else {\n                            var totalButtonsThisRow = options.savedColors.length - ((thisRow - 1) * options.numSwatchesPerLine!);\n                        }\n                        var buttonIterations: number = (Math.min(Math.max(totalButtonsThisRow, 0), options.numSwatchesPerLine!));\n                        for (var x = 0, w = 1; x < buttonIterations; x++) {\n                            if (x > options.numSwatchesPerLine!) {\n                                continue;\n                            }\n                            var swatch: Button | null = createSwatch();\n                            if (swatch != null) {\n                                swatchDrawer.addControl(swatch, y, w);\n                                w += 2;\n                                swatchNumber++;\n                            }\n                            else {\n                                continue;\n                            }\n                        }\n                    }\n                    if (options.savedColors.length >= options.swatchLimit!) {\n                        disableButton(button, true);\n                    }\n                    else {\n                        disableButton(button, false);\n                    }\n                }\n            }\n\n            // Shows or hides edit swatches button depending on if there are saved swatches\n            function setEditButtonVisibility(enableButton: boolean) {\n                if (enableButton) {\n                    butEdit = Button.CreateSimpleButton(\"butEdit\", \"Edit\");\n                    butEdit.width = buttonWidth;\n                    butEdit.height = buttonHeight;\n                    butEdit.left = (Math.floor(parseInt(buttonWidth) * 0.1)).toString() + \"px\";\n                    butEdit.top = (parseFloat(butEdit.left) * -1).toString() + \"px\";\n                    butEdit.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n                    butEdit.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n                    butEdit.thickness = 2;\n                    butEdit.color = buttonColor;\n                    butEdit.fontSize = buttonFontSize;\n                    butEdit.background = buttonBackgroundColor;\n                    butEdit.onPointerEnterObservable.add(() => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    });\n                    butEdit.onPointerOutObservable.add(() => {\n                        butEdit.background = buttonBackgroundColor;\n                    });\n                    butEdit.pointerDownAnimation = () => {\n                        butEdit.background = buttonBackgroundClickColor;\n                    };\n                    butEdit.pointerUpAnimation = () => {\n                        butEdit.background = buttonBackgroundHoverColor;\n                    };\n                    butEdit.onPointerClickObservable.add(() => {\n                        if (editSwatchMode) {\n                            editSwatchMode = false;\n                        }\n                        else {\n                            editSwatchMode = true;\n                        }\n                        editSwatches();\n                    });\n                    pickerGrid.addControl(butEdit, 1, 0);\n                }\n                else {\n                    pickerGrid.removeControl(butEdit);\n                }\n            }\n\n            // Called when the user hits the limit of saved colors in the drawer.\n            function disableButton(button: Button, disabled: boolean) {\n                if (disabled) {\n                    button.color = buttonDisabledColor;\n                    button.background = buttonDisabledBackgroundColor;\n                }\n                else {\n                    button.color = buttonColor;\n                    button.background = buttonBackgroundColor;\n                }\n            }\n\n            // Passes last chosen color back to scene and kills dialog by removing from AdvancedDynamicTexture\n            function closePicker(color: string) {\n                if (options.savedColors && options.savedColors.length > 0) {\n                    resolve({\n                        savedColors: options.savedColors,\n                        pickedColor: color\n                    });\n                }\n                else {\n                    resolve({\n                        pickedColor: color\n                    });\n                }\n                advancedTexture.removeControl(dialogContainer);\n            }\n\n            // Dialogue menu container which will contain both the main dialogue window and the swatch drawer which opens once a color is saved.\n            var dialogContainer: Grid = new Grid();\n            dialogContainer.name = \"Dialog Container\";\n            dialogContainer.width = options.pickerWidth;\n            if (options.savedColors) {\n                dialogContainer.height = containerSize;\n                var topRow: number = parseInt(options.pickerHeight) / parseInt(containerSize);\n                dialogContainer.addRowDefinition(topRow, false);\n                dialogContainer.addRowDefinition(1.0 - topRow, false);\n            }\n            else {\n                dialogContainer.height = options.pickerHeight;\n                dialogContainer.addRowDefinition(1.0, false);\n            }\n            advancedTexture.addControl(dialogContainer);\n\n            // Swatch drawer which contains all saved color buttons\n            if (options.savedColors) {\n                swatchDrawer = new Grid();\n                swatchDrawer.name = \"Swatch Drawer\";\n                swatchDrawer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\n                swatchDrawer.background = buttonBackgroundColor;\n                swatchDrawer.width = options.pickerWidth!;\n                var initialRows: number = options.savedColors.length / options.numSwatchesPerLine;\n                if (initialRows == 0) {\n                    var gutterCount: number = 0;\n                }\n                else {\n                    var gutterCount: number = initialRows + 1;\n                }\n                swatchDrawer.height = ((swatchSize * initialRows) + (gutterCount * gutterSize)).toString() + \"px\";\n                swatchDrawer.top = Math.floor(swatchSize * 0.25).toString() + \"px\";\n                for (var i = 0; i < (Math.ceil(options.savedColors.length / options.numSwatchesPerLine) * 2) + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addRowDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addRowDefinition(gutterSize, true);\n                    }\n                }\n                for (var i = 0; i < options.numSwatchesPerLine! * 2 + 1; i++) {\n                    if (i % 2 != 0) {\n                        swatchDrawer.addColumnDefinition(swatchSize, true);\n                    }\n                    else {\n                        swatchDrawer.addColumnDefinition(gutterSize, true);\n                    }\n                }\n                dialogContainer.addControl(swatchDrawer, 1, 0);\n            }\n\n            // Picker container\n            var pickerPanel: Grid = new Grid();\n            pickerPanel.name = \"Picker Panel\";\n            pickerPanel.height = options.pickerHeight;\n            var panelHead: number = parseInt(options.headerHeight) / parseInt(options.pickerHeight);\n            var pickerPanelRows: number[] = [panelHead, 1.0 - panelHead];\n            pickerPanel.addRowDefinition(pickerPanelRows[0], false);\n            pickerPanel.addRowDefinition(pickerPanelRows[1], false);\n            dialogContainer.addControl(pickerPanel, 0, 0);\n\n            // Picker container header\n            var header: Rectangle = new Rectangle();\n            header.name = \"Dialogue Header Bar\";\n            header.background = \"#cccccc\";\n            header.thickness = 0;\n            pickerPanel.addControl(header, 0, 0);\n\n            // Header close button\n            var closeButton: Button = Button.CreateSimpleButton(\"closeButton\", \"a\");\n            closeButton.fontFamily = \"BabylonJSglyphs\";\n            var headerColor3: Color3 = Color3.FromHexString(header.background);\n            closeIconColor = new Color3(1.0 - headerColor3.r, 1.0 - headerColor3.g, 1.0 - headerColor3.b);\n            closeButton.color = closeIconColor.toHexString();\n            closeButton.fontSize = Math.floor(parseInt(options.headerHeight!) * 0.6);\n            closeButton.textBlock!.textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            closeButton.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;\n            closeButton.height = closeButton.width = options.headerHeight;\n            closeButton.background = header.background;\n            closeButton.thickness = 0;\n            closeButton.pointerDownAnimation = () => {\n            };\n            closeButton.pointerUpAnimation = () => {\n                closeButton.background = header.background;\n            };\n            closeButton.pointerEnterAnimation = () => {\n                closeButton.color = header.background;\n                closeButton.background = \"red\";\n            };\n            closeButton.pointerOutAnimation = () => {\n                closeButton.color = closeIconColor.toHexString();\n                closeButton.background = header.background;\n            };\n            closeButton.onPointerClickObservable.add(() => {\n                closePicker(currentSwatch.background);\n            });\n            pickerPanel.addControl(closeButton, 0, 0);\n\n            // Dialog container body\n            var dialogBody: Grid = new Grid();\n            dialogBody.name = \"Dialogue Body\";\n            dialogBody.background = buttonBackgroundColor;\n            var dialogBodyCols: number[] = [0.4375, 0.5625];\n            dialogBody.addRowDefinition(1.0, false);\n            dialogBody.addColumnDefinition(dialogBodyCols[0], false);\n            dialogBody.addColumnDefinition(dialogBodyCols[1], false);\n            pickerPanel.addControl(dialogBody, 1, 0);\n\n            // Picker grid\n            var pickerGrid: Grid = new Grid();\n            pickerGrid.name = \"Picker Grid\";\n            pickerGrid.addRowDefinition(0.85, false);\n            pickerGrid.addRowDefinition(0.15, false);\n            dialogBody.addControl(pickerGrid, 0, 0);\n\n            //  Picker control\n            picker = new ColorPicker();\n            picker.name = \"GUI Color Picker\";\n            if (options.pickerHeight < options.pickerWidth) {\n                picker.width = 0.89;\n            }\n            else {\n                picker.height = 0.89;\n            }\n            picker.value = Color3.FromHexString(options.lastColor);\n            picker.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            picker.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            picker.onPointerDownObservable.add(() => {\n                activeField = picker.name!;\n                lastVal = \"\";\n                editSwatches(false);\n            });\n            picker.onValueChangedObservable.add(function(value) { // value is a color3\n                if (activeField == picker.name) {\n                    updateValues(value, picker.name);\n                }\n            });\n            pickerGrid.addControl(picker, 0, 0);\n\n            // Picker body right quarant\n            var pickerBodyRight: Grid = new Grid();\n            pickerBodyRight.name = \"Dialogue Right Half\";\n            pickerBodyRight.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\n            var pickerBodyRightRows: number[] = [0.514, 0.486];\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[0], false);\n            pickerBodyRight.addRowDefinition(pickerBodyRightRows[1], false);\n            dialogBody.addControl(pickerBodyRight, 1, 1);\n\n            // Picker container swatches and buttons\n            var pickerSwatchesButtons: Grid = new Grid();\n            pickerSwatchesButtons.name = \"Swatches and Buttons\";\n            var pickerButtonsCol: number[] = [0.417, 0.583];\n            pickerSwatchesButtons.addRowDefinition(1.0, false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[0], false);\n            pickerSwatchesButtons.addColumnDefinition(pickerButtonsCol[1], false);\n            pickerBodyRight.addControl(pickerSwatchesButtons, 0, 0);\n\n            // Picker Swatches quadrant\n            var pickerSwatches: Grid = new Grid();\n            pickerSwatches.name = \"New and Current Swatches\";\n            var pickeSwatchesRows: number[] = [0.04, 0.16, 0.64, 0.16];\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[0], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[1], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[2], false);\n            pickerSwatches.addRowDefinition(pickeSwatchesRows[3], false);\n            pickerSwatchesButtons.addControl(pickerSwatches, 0, 0);\n\n            // Active swatches\n            var activeSwatches: Grid = new Grid();\n            activeSwatches.name = \"Active Swatches\";\n            activeSwatches.width = 0.67;\n            activeSwatches.addRowDefinition(0.5, false);\n            activeSwatches.addRowDefinition(0.5, false);\n            pickerSwatches.addControl(activeSwatches, 2, 0);\n\n            var labelWidth: number = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[0] * 0.11));\n            var labelHeight: number = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * pickeSwatchesRows[1] * 0.5));\n\n            if (options.pickerWidth > options.pickerHeight) {\n                var labelTextSize: number = labelHeight;\n            }\n            else {\n                var labelTextSize: number = labelWidth;\n            }\n            // New color swatch and previous color button\n            var newText: TextBlock = new TextBlock();\n            newText.text = \"new\";\n            newText.name = \"New Color Label\";\n            newText.color = buttonColor;\n            newText.fontSize = labelTextSize;\n            pickerSwatches.addControl(newText, 1, 0);\n\n            newSwatch = new Rectangle();\n            newSwatch.name = \"New Color Swatch\";\n            newSwatch.background = options.lastColor;\n            newSwatch.thickness = 0;\n            activeSwatches.addControl(newSwatch, 0, 0);\n\n            var currentSwatch: Button = Button.CreateSimpleButton(\"currentSwatch\", \"\");\n            currentSwatch.background = options.lastColor;\n            currentSwatch.thickness = 0;\n            currentSwatch.onPointerClickObservable.add(() => {\n                var revertColor = Color3.FromHexString(currentSwatch.background);\n                updateValues(revertColor, currentSwatch.name!);\n                editSwatches(false);\n            });\n            currentSwatch.pointerDownAnimation = () => { };\n            currentSwatch.pointerUpAnimation = () => { };\n            currentSwatch.pointerEnterAnimation = () => { };\n            currentSwatch.pointerOutAnimation = () => { };\n            activeSwatches.addControl(currentSwatch, 1, 0);\n\n            var swatchOutline: Rectangle = new Rectangle();\n            swatchOutline.name = \"Swatch Outline\";\n            swatchOutline.width = 0.67;\n            swatchOutline.thickness = 2;\n            swatchOutline.color = currentSwatchesOutlineColor;\n            swatchOutline.isHitTestVisible = false;\n            pickerSwatches.addControl(swatchOutline, 2, 0);\n\n            var currentText: TextBlock = new TextBlock();\n            currentText.name = \"Current Color Label\";\n            currentText.text = \"current\";\n            currentText.color = buttonColor;\n            currentText.fontSize = labelTextSize;\n            pickerSwatches.addControl(currentText, 3, 0);\n\n            // Buttons grid\n            var buttonGrid: Grid = new Grid();\n            buttonGrid.name = \"Button Grid\";\n            buttonGrid.height = 0.8;\n            var buttonGridRows: number = 1 / 3;\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            buttonGrid.addRowDefinition(buttonGridRows, false);\n            pickerSwatchesButtons.addControl(buttonGrid, 0, 1);\n\n            // Determine pixel width and height for all buttons from overall panel dimensions\n            buttonWidth = (Math.floor(parseInt(options.pickerWidth) * dialogBodyCols[1] * pickerButtonsCol[1] * 0.67)).toString() + \"px\";\n            buttonHeight = (Math.floor(parseInt(options.pickerHeight) * pickerPanelRows[1] * pickerBodyRightRows[0] * (parseFloat(buttonGrid.height.toString()) / 100) * buttonGridRows * 0.7)).toString() + \"px\";\n\n            // Determine button type size\n            if (parseFloat(buttonWidth) > parseFloat(buttonHeight)) {\n                buttonFontSize = Math.floor(parseFloat(buttonHeight) * 0.45);\n            }\n            else {\n                buttonFontSize = Math.floor(parseFloat(buttonWidth) * 0.11);\n            }\n\n            // Panel Buttons\n            var butOK: Button = Button.CreateSimpleButton(\"butOK\", \"OK\");\n            butOK.width = buttonWidth;\n            butOK.height = buttonHeight;\n            butOK.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butOK.thickness = 2;\n            butOK.color = buttonColor;\n            butOK.fontSize = buttonFontSize;\n            butOK.background = buttonBackgroundColor;\n            butOK.onPointerEnterObservable.add(() => { butOK.background = buttonBackgroundHoverColor; });\n            butOK.onPointerOutObservable.add(() => { butOK.background = buttonBackgroundColor; });\n            butOK.pointerDownAnimation = () => {\n                butOK.background = buttonBackgroundClickColor;\n            };\n            butOK.pointerUpAnimation = () => {\n                butOK.background = buttonBackgroundHoverColor;\n            };\n            butOK.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(newSwatch.background);\n            });\n            buttonGrid.addControl(butOK, 0, 0);\n\n            var butCancel: Button = Button.CreateSimpleButton(\"butCancel\", \"Cancel\");\n            butCancel.width = buttonWidth;\n            butCancel.height = buttonHeight;\n            butCancel.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            butCancel.thickness = 2;\n            butCancel.color = buttonColor;\n            butCancel.fontSize = buttonFontSize;\n            butCancel.background = buttonBackgroundColor;\n            butCancel.onPointerEnterObservable.add(() => { butCancel.background = buttonBackgroundHoverColor; });\n            butCancel.onPointerOutObservable.add(() => { butCancel.background = buttonBackgroundColor; });\n            butCancel.pointerDownAnimation = () => {\n                butCancel.background = buttonBackgroundClickColor;\n            };\n            butCancel.pointerUpAnimation = () => {\n                butCancel.background = buttonBackgroundHoverColor;\n            };\n            butCancel.onPointerClickObservable.add(() => {\n                editSwatches(false);\n                closePicker(currentSwatch.background);\n            });\n            buttonGrid.addControl(butCancel, 1, 0);\n\n            if (options.savedColors) {\n                var butSave: Button = Button.CreateSimpleButton(\"butSave\", \"Save\");\n                butSave.width = buttonWidth;\n                butSave.height = buttonHeight;\n                butSave.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n                butSave.thickness = 2;\n                butSave.fontSize = buttonFontSize;\n                if (options.savedColors.length < options.swatchLimit!) {\n                    butSave.color = buttonColor;\n                    butSave.background = buttonBackgroundColor;\n                }\n                else {\n                    disableButton(butSave, true);\n                }\n                butSave.onPointerEnterObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                });\n                butSave.onPointerOutObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundColor;\n                        }\n                    }\n                });\n                butSave.pointerDownAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundClickColor;\n                        }\n                    }\n                };\n                butSave.pointerUpAnimation = () => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            butSave.background = buttonBackgroundHoverColor;\n                        }\n                    }\n                };\n                butSave.onPointerClickObservable.add(() => {\n                    if (options.savedColors) {\n                        if (options.savedColors.length == 0) {\n                            setEditButtonVisibility(true);\n                        }\n                        if (options.savedColors.length < options.swatchLimit!) {\n                            updateSwatches(newSwatch.background, butSave);\n                        }\n                        editSwatches(false);\n                    }\n                });\n                if (options.savedColors.length > 0) {\n                    setEditButtonVisibility(true);\n                }\n                buttonGrid.addControl(butSave, 2, 0);\n            }\n\n            // Picker color values input\n            var pickerColorValues: Grid = new Grid();\n            pickerColorValues.name = \"Dialog Lower Right\";\n            pickerColorValues.addRowDefinition(0.02, false);\n            pickerColorValues.addRowDefinition(0.63, false);\n            pickerColorValues.addRowDefinition(0.21, false);\n            pickerColorValues.addRowDefinition(0.14, false);\n            pickerBodyRight.addControl(pickerColorValues, 1, 0);\n\n            // RGB values text boxes\n            currentColor = Color3.FromHexString(options.lastColor);\n            var rgbValuesQuadrant: Grid = new Grid();\n            rgbValuesQuadrant.name = \"RGB Values\";\n            rgbValuesQuadrant.width = 0.82;\n            rgbValuesQuadrant.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addRowDefinition(1 / 3, false);\n            rgbValuesQuadrant.addColumnDefinition(0.1, false);\n            rgbValuesQuadrant.addColumnDefinition(0.2, false);\n            rgbValuesQuadrant.addColumnDefinition(0.7, false);\n            pickerColorValues.addControl(rgbValuesQuadrant, 1, 0);\n\n            for (var i = 0; i < inputFieldLabels.length; i++) {\n                var labelText: TextBlock = new TextBlock();\n                labelText.text = inputFieldLabels[i];\n                labelText.color = buttonColor;\n                labelText.fontSize = buttonFontSize;\n                rgbValuesQuadrant.addControl(labelText, i, 0);\n            }\n\n            // Input fields for RGB values\n            rValInt = new InputText();\n            rValInt.width = 0.83;\n            rValInt.height = 0.72;\n            rValInt.name = \"rIntField\";\n            rValInt.fontSize = buttonFontSize;\n            rValInt.text = (currentColor.r * 255).toString();\n            rValInt.color = inputTextColor;\n            rValInt.background = inputTextBackgroundColor;\n            rValInt.onFocusObservable.add(() => {\n                activeField = rValInt.name!;\n                lastVal = rValInt.text;\n                editSwatches(false);\n            });\n            rValInt.onBlurObservable.add(() => {\n                if (rValInt.text == \"\") {\n                    rValInt.text = \"0\";\n                }\n                updateInt(rValInt, \"r\");\n                if (activeField == rValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            rValInt.onTextChangedObservable.add(() => {\n                if (activeField == rValInt.name) {\n                    updateInt(rValInt, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValInt, 0, 1);\n\n            gValInt = new InputText();\n            gValInt.width = 0.83;\n            gValInt.height = 0.72;\n            gValInt.name = \"gIntField\";\n            gValInt.fontSize = buttonFontSize;\n            gValInt.text = (currentColor.g * 255).toString();\n            gValInt.color = inputTextColor;\n            gValInt.background = inputTextBackgroundColor;\n            gValInt.onFocusObservable.add(() => {\n                activeField = gValInt.name!;\n                lastVal = gValInt.text;\n                editSwatches(false);\n            });\n            gValInt.onBlurObservable.add(() => {\n                if (gValInt.text == \"\") {\n                    gValInt.text = \"0\";\n                }\n                updateInt(gValInt, \"g\");\n                if (activeField == gValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            gValInt.onTextChangedObservable.add(() => {\n                if (activeField == gValInt.name) {\n                    updateInt(gValInt, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValInt, 1, 1);\n\n            bValInt = new InputText();\n            bValInt.width = 0.83;\n            bValInt.height = 0.72;\n            bValInt.name = \"bIntField\";\n            bValInt.fontSize = buttonFontSize;\n            bValInt.text = (currentColor.b * 255).toString();\n            bValInt.color = inputTextColor;\n            bValInt.background = inputTextBackgroundColor;\n            bValInt.onFocusObservable.add(() => {\n                activeField = bValInt.name!;\n                lastVal = bValInt.text;\n                editSwatches(false);\n            });\n            bValInt.onBlurObservable.add(() => {\n                if (bValInt.text == \"\") {\n                    bValInt.text = \"0\";\n                }\n                updateInt(bValInt, \"b\");\n                if (activeField == bValInt.name) {\n                    activeField = \"\";\n                }\n            });\n            bValInt.onTextChangedObservable.add(() => {\n                if (activeField == bValInt.name) {\n                    updateInt(bValInt, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValInt, 2, 1);\n\n            rValDec = new InputText();\n            rValDec.width = 0.95;\n            rValDec.height = 0.72;\n            rValDec.name = \"rDecField\";\n            rValDec.fontSize = buttonFontSize;\n            rValDec.text = currentColor.r.toString();\n            rValDec.color = inputTextColor;\n            rValDec.background = inputTextBackgroundColor;\n            rValDec.onFocusObservable.add(() => {\n                activeField = rValDec.name!;\n                lastVal = rValDec.text;\n                editSwatches(false);\n            });\n            rValDec.onBlurObservable.add(() => {\n                if (parseFloat(rValDec.text) == 0 || rValDec.text == \"\") {\n                    rValDec.text = \"0\";\n                    updateFloat(rValDec, \"r\");\n                }\n                if (activeField == rValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            rValDec.onTextChangedObservable.add(() => {\n                if (activeField == rValDec.name) {\n                    updateFloat(rValDec, \"r\");\n                }\n            });\n            rgbValuesQuadrant.addControl(rValDec, 0, 2);\n\n            gValDec = new InputText();\n            gValDec.width = 0.95;\n            gValDec.height = 0.72;\n            gValDec.name = \"gDecField\";\n            gValDec.fontSize = buttonFontSize;\n            gValDec.text = currentColor.g.toString();\n            gValDec.color = inputTextColor;\n            gValDec.background = inputTextBackgroundColor;\n            gValDec.onFocusObservable.add(() => {\n                activeField = gValDec.name!;\n                lastVal = gValDec.text;\n                editSwatches(false);\n            });\n            gValDec.onBlurObservable.add(() => {\n                if (parseFloat(gValDec.text) == 0 || gValDec.text == \"\") {\n                    gValDec.text = \"0\";\n                    updateFloat(gValDec, \"g\");\n                }\n                if (activeField == gValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            gValDec.onTextChangedObservable.add(() => {\n                if (activeField == gValDec.name) {\n                    updateFloat(gValDec, \"g\");\n                }\n            });\n            rgbValuesQuadrant.addControl(gValDec, 1, 2);\n\n            bValDec = new InputText();\n            bValDec.width = 0.95;\n            bValDec.height = 0.72;\n            bValDec.name = \"bDecField\";\n            bValDec.fontSize = buttonFontSize;\n            bValDec.text = currentColor.b.toString();\n            bValDec.color = inputTextColor;\n            bValDec.background = inputTextBackgroundColor;\n            bValDec.onFocusObservable.add(() => {\n                activeField = bValDec.name!;\n                lastVal = bValDec.text;\n                editSwatches(false);\n            });\n            bValDec.onBlurObservable.add(() => {\n                if (parseFloat(bValDec.text) == 0 || bValDec.text == \"\") {\n                    bValDec.text = \"0\";\n                    updateFloat(bValDec, \"b\");\n                }\n                if (activeField == bValDec.name) {\n                    activeField = \"\";\n                }\n            });\n            bValDec.onTextChangedObservable.add(() => {\n                if (activeField == bValDec.name) {\n                    updateFloat(bValDec, \"b\");\n                }\n            });\n            rgbValuesQuadrant.addControl(bValDec, 2, 2);\n\n            // Hex value input\n            var hexValueQuadrant: Grid = new Grid();\n            hexValueQuadrant.name = \"Hex Value\";\n            hexValueQuadrant.width = 0.82;\n            hexValueQuadrant.addRowDefinition(1.0, false);\n            hexValueQuadrant.addColumnDefinition(0.1, false);\n            hexValueQuadrant.addColumnDefinition(0.9, false);\n            pickerColorValues.addControl(hexValueQuadrant, 2, 0);\n\n            var labelText: TextBlock = new TextBlock();\n            labelText.text = \"#\";\n            labelText.color = buttonColor;\n            labelText.fontSize = buttonFontSize;\n            hexValueQuadrant.addControl(labelText, 0, 0);\n\n            hexVal = new InputText();\n            hexVal.width = 0.96;\n            hexVal.height = 0.72;\n            hexVal.name = \"hexField\";\n            hexVal.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\n            hexVal.fontSize = buttonFontSize;\n            var minusPound = options.lastColor.split(\"#\");\n            hexVal.text = minusPound[1];\n            hexVal.color = inputTextColor;\n            hexVal.background = inputTextBackgroundColor;\n            hexVal.onFocusObservable.add(() => {\n                activeField = hexVal.name!;\n                lastVal = hexVal.text;\n                editSwatches(false);\n            });\n            hexVal.onBlurObservable.add(() => {\n                if (hexVal.text.length == 3) {\n                    var val = hexVal.text.split(\"\");\n                    hexVal.text = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                }\n                if (hexVal.text == \"\") {\n                    hexVal.text = \"000000\";\n                    updateValues(Color3.FromHexString(hexVal.text), \"b\");\n                }\n                if (activeField == hexVal.name) {\n                    activeField = \"\";\n                }\n            });\n            hexVal.onTextChangedObservable.add(() => {\n                var newHexValue: string = hexVal.text;\n                var checkHex: boolean = /[^0-9A-F]/i.test(newHexValue);\n                if ((hexVal.text.length > 6 || checkHex) && activeField == hexVal.name) {\n                    hexVal.text = lastVal;\n                }\n                else {\n                    if (hexVal.text.length < 6) {\n                        var leadingZero: Number = 6 - hexVal.text.length;\n                        for (var i = 0; i < leadingZero; i++) {\n                            newHexValue = \"0\" + newHexValue;\n                        }\n                    }\n                    if (hexVal.text.length == 3) {\n                        var val: string[] = hexVal.text.split(\"\");\n                        newHexValue = val[0] + val[0] + val[1] + val[1] + val[2] + val[2];\n                    }\n                    newHexValue = \"#\" + newHexValue;\n                    if (activeField == hexVal.name) {\n                        lastVal = hexVal.text;\n                        updateValues(Color3.FromHexString(newHexValue), hexVal.name);\n                    }\n                }\n            });\n            hexValueQuadrant.addControl(hexVal, 0, 1);\n\n            if (options.savedColors && options.savedColors.length > 0) {\n                updateSwatches(\"\", butSave!);\n            }\n        });\n    }\n}","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n        context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this.parent !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add\r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map((item) => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add\r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) { return point; }\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach((point) => {\r\n            if (point != null) { point.resetLinks(); }\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        context.strokeStyle = this.color;\r\n        context.lineWidth = this._lineWidth;\r\n        context.setLineDash(this._dash);\r\n\r\n        context.beginPath();\r\n\r\n        var first: boolean = true; //first index is not necessarily 0\r\n\r\n        this._points.forEach((point) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            if (first) {\r\n                context.moveTo(point._point.x, point._point.y);\r\n\r\n                first = false;\r\n            }\r\n            else {\r\n                context.lineTo(point._point.x, point._point.y);\r\n            }\r\n        });\r\n\r\n        context.stroke();\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) { this._minX = point._point.x; }\r\n            if (this._minY == null || point._point.y < this._minY) { this._minY = point._point.y; }\r\n            if (this._maxX == null || point._point.x > this._maxX) { this._maxX = point._point.x; }\r\n            if (this._maxY == null || point._point.y > this._maxY) { this._maxY = point._point.y; }\r\n        });\r\n\r\n        if (this._minX == null) { this._minX = 0; }\r\n        if (this._minY == null) { this._minY = 0; }\r\n        if (this._maxX == null) { this._maxX = 0; }\r\n        if (this._maxY == null) { this._maxY = 0; }\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}\r\n","import { Rectangle } from \"./rectangle\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { RadioButton } from \"./radioButton\";\r\nimport { Slider } from \"./sliders/slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if (this._groupHeader.text === \"label\") {\r\n            return;\r\n        }\r\n\r\n        this._groupHeader.text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n    /** Removes the selector at the given position\r\n    * @param selectorNb the position of the selector within the group\r\n   */\r\n    public removeSelector(selectorNb: number) {\r\n        if (selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup\r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup {\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean) => { }, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            func(state);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup\r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup {\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n: number) => { }, checked = false): void {\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if (state) {\r\n                func(nb);\r\n            }\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup\r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup {\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v: number) => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v: number) => { return v | 0; }): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n\r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n\r\n        if (this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders\r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\";\r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string,\r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if (groups.length > 0) {\r\n            for (var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n\r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if (this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if (this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if (this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if (this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for (var i = 0; i < this._groups.length; i++) {\r\n            for (var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup | RadioGroup | SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if (this._barHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if (this._spacerHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for (var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if (this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for (var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if (groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n    /** Change selector label to the one given\r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */\r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup | RadioGroup | SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if (selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => { }, checked: boolean = false): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => { }, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v: number) => { return v | 0; }): void {\r\n        if (groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n\r\n}","import { Rectangle } from \"../rectangle\";\r\nimport { Grid } from \"../grid\";\r\nimport { Control } from \"../control\";\r\nimport { Container } from \"../container\";\r\nimport { PointerInfo, Observer, Nullable } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\nimport { AdvancedDynamicTexture } from \"../../advancedDynamicTexture\";\r\nimport { _ScrollViewerWindow } from \"./scrollViewerWindow\";\r\nimport { ScrollBar } from \"../sliders/scrollBar\";\r\n\r\n/**\r\n * Class used to hold a viewer window and sliders in a grid\r\n*/\r\nexport class ScrollViewer extends Rectangle {\r\n    private _grid: Grid;\r\n    private _horizontalBarSpace: Rectangle;\r\n    private _verticalBarSpace: Rectangle;\r\n    private _dragSpace: Rectangle;\r\n    private _horizontalBar: ScrollBar;\r\n    private _verticalBar: ScrollBar;\r\n    private _barColor: string;\r\n    private _barBackground: string;\r\n    private _barSize: number = 20;\r\n    private _endLeft: number;\r\n    private _endTop: number;\r\n    private _window: _ScrollViewerWindow;\r\n    private _pointerIsOver: Boolean = false;\r\n    private _wheelPrecision: number = 0.05;\r\n    private _onPointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _clientWidth: number;\r\n    private _clientHeight: number;\r\n\r\n    /**\r\n     * Gets the horizontal scrollbar\r\n     */\r\n    public get horizontalBar(): ScrollBar {\r\n        return this._horizontalBar;\r\n    }\r\n\r\n    /**\r\n     * Gets the vertical scrollbar\r\n     */\r\n    public get verticalBar(): ScrollBar {\r\n        return this._verticalBar;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        this._window.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        this._window.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._window.children;\r\n    }\r\n\r\n    public _flagDescendantsAsMatrixDirty(): void {\r\n        for (var child of this._children) {\r\n            child._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Creates a new ScrollViewer\r\n    * @param name of ScrollViewer\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        this.onDirtyObservable.add(() => {\r\n            this._horizontalBarSpace.color = this.color;\r\n            this._verticalBarSpace.color = this.color;\r\n            this._dragSpace.color = this.color;\r\n        });\r\n\r\n        this.onPointerEnterObservable.add(() => {\r\n            this._pointerIsOver = true;\r\n        });\r\n\r\n        this.onPointerOutObservable.add(() => {\r\n            this._pointerIsOver = false;\r\n        });\r\n\r\n        this._grid = new Grid();\r\n        this._horizontalBar = new ScrollBar();\r\n        this._verticalBar = new ScrollBar();\r\n\r\n        this._window = new _ScrollViewerWindow();\r\n        this._window.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._window.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._grid.addColumnDefinition(1);\r\n        this._grid.addColumnDefinition(0, true);\r\n        this._grid.addRowDefinition(1);\r\n        this._grid.addRowDefinition(0, true);\r\n\r\n        super.addControl(this._grid);\r\n        this._grid.addControl(this._window, 0, 0);\r\n\r\n        this._verticalBar.paddingLeft = 0;\r\n        this._verticalBar.width = \"100%\";\r\n        this._verticalBar.height = \"100%\";\r\n        this._verticalBar.barOffset = 0;\r\n        this._verticalBar.value = 0;\r\n        this._verticalBar.maximum = 1;\r\n        this._verticalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._verticalBar.isVertical = true;\r\n        this._verticalBar.rotation = Math.PI;\r\n        this._verticalBar.isVisible = false;\r\n\r\n        this._verticalBarSpace = new Rectangle();\r\n        this._verticalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._verticalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._verticalBarSpace, 0, 1);\r\n        this._verticalBarSpace.addControl(this._verticalBar);\r\n\r\n        this._verticalBar.onValueChangedObservable.add((value) => {\r\n            this._window.top = value * this._endTop + \"px\";\r\n        });\r\n\r\n        this._horizontalBar.paddingLeft = 0;\r\n        this._horizontalBar.width = \"100%\";\r\n        this._horizontalBar.height = \"100%\";\r\n        this._horizontalBar.barOffset = 0;\r\n        this._horizontalBar.value = 0;\r\n        this._horizontalBar.maximum = 1;\r\n        this._horizontalBar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        this._horizontalBar.isVisible = false;\r\n\r\n        this._horizontalBarSpace = new Rectangle();\r\n        this._horizontalBarSpace.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._horizontalBarSpace.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._horizontalBarSpace.thickness = 1;\r\n        this._grid.addControl(this._horizontalBarSpace, 1, 0);\r\n        this._horizontalBarSpace.addControl(this._horizontalBar);\r\n\r\n        this._horizontalBar.onValueChangedObservable.add((value) => {\r\n            this._window.left = value * this._endLeft + \"px\";\r\n        });\r\n\r\n        this._dragSpace = new Rectangle();\r\n        this._dragSpace.thickness = 1;\r\n        this._grid.addControl(this._dragSpace, 1, 1);\r\n\r\n        // Colors\r\n        this.barColor = \"grey\";\r\n        this.barBackground = \"transparent\";\r\n    }\r\n\r\n    /** Reset the scroll viewer window to initial size */\r\n    public resetWindow() {\r\n        this._window.width = \"100%\";\r\n        this._window.height = \"100%\";\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewer\";\r\n    }\r\n\r\n    private _buildClientSizes() {\r\n        this._window.parentClientWidth = this._currentMeasure.width - (this._verticalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n        this._window.parentClientHeight = this._currentMeasure.height - (this._horizontalBar.isVisible ? this._barSize : 0) - 2 * this.thickness;\r\n\r\n        this._clientWidth = this._window.parentClientWidth;\r\n        this._clientHeight = this._window.parentClientHeight;\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._buildClientSizes();\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        super._postMeasure();\r\n\r\n        this._updateScroller();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the mouse wheel precision\r\n     * from 0 to 1 with a default value of 0.05\r\n     * */\r\n    public get wheelPrecision(): number {\r\n        return this._wheelPrecision;\r\n    }\r\n\r\n    public set wheelPrecision(value: number) {\r\n        if (this._wheelPrecision === value) {\r\n            return;\r\n        }\r\n\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (value > 1) {\r\n            value = 1;\r\n        }\r\n\r\n        this._wheelPrecision = value;\r\n    }\r\n\r\n    /** Gets or sets the bar color */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n        if (this._barColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._barColor = color;\r\n        this._horizontalBar.color = color;\r\n        this._verticalBar.color = color;\r\n    }\r\n\r\n    /** Gets or sets the size of the bar */\r\n    public get barSize(): number {\r\n        return this._barSize;\r\n    }\r\n\r\n    public set barSize(value: number) {\r\n        if (this._barSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._barSize = value;\r\n        this._markAsDirty();\r\n\r\n        if (this._horizontalBar.isVisible) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n        }\r\n        if (this._verticalBar.isVisible) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the bar background */\r\n    public get barBackground(): string {\r\n        return this._barBackground;\r\n    }\r\n\r\n    public set barBackground(color: string) {\r\n        if (this._barBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._barBackground = color;\r\n        this._horizontalBar.background = color;\r\n        this._verticalBar.background = color;\r\n        this._dragSpace.background = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    private _updateScroller(): void {\r\n        let windowContentsWidth = this._window._currentMeasure.width;\r\n        let windowContentsHeight = this._window._currentMeasure.height;\r\n\r\n        if (this._horizontalBar.isVisible && windowContentsWidth <= this._clientWidth) {\r\n            this._grid.setRowDefinition(1, 0, true);\r\n            this._horizontalBar.isVisible = false;\r\n            this._horizontalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._horizontalBar.isVisible && windowContentsWidth > this._clientWidth) {\r\n            this._grid.setRowDefinition(1, this._barSize, true);\r\n            this._horizontalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (this._verticalBar.isVisible && windowContentsHeight <= this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, 0, true);\r\n            this._verticalBar.isVisible = false;\r\n            this._verticalBar.value = 0;\r\n            this._rebuildLayout = true;\r\n        }\r\n        else if (!this._verticalBar.isVisible && windowContentsHeight > this._clientHeight) {\r\n            this._grid.setColumnDefinition(1, this._barSize, true);\r\n            this._verticalBar.isVisible = true;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        this._buildClientSizes();\r\n        this._endLeft = this._clientWidth - windowContentsWidth;\r\n        this._endTop = this._clientHeight - windowContentsHeight;\r\n\r\n        const newLeft = this._horizontalBar.value * this._endLeft + \"px\";\r\n        const newTop = this._verticalBar.value * this._endTop + \"px\";\r\n\r\n        if (newLeft !== this._window.left) {\r\n            this._window.left = newLeft;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        if (newTop !== this._window.top) {\r\n            this._window.top = newTop;\r\n            this._rebuildLayout = true;\r\n        }\r\n\r\n        let horizontalMultiplicator = this._clientWidth / windowContentsWidth;\r\n        let verticalMultiplicator = this._clientHeight / windowContentsHeight;\r\n\r\n        this._horizontalBar.thumbWidth = (this._clientWidth * horizontalMultiplicator) + \"px\";\r\n        this._verticalBar.thumbWidth = (this._clientHeight * verticalMultiplicator) + \"px\";\r\n    }\r\n\r\n    public _link(host: AdvancedDynamicTexture): void {\r\n        super._link(host);\r\n\r\n        this._attachWheel();\r\n    }\r\n\r\n    /** @hidden */\r\n    private _attachWheel() {\r\n        if (this._onPointerObserver) {\r\n            return;\r\n        }\r\n\r\n        let scene = this._host.getScene();\r\n        this._onPointerObserver = scene!.onPointerObservable.add((pi, state) => {\r\n            if (!this._pointerIsOver || pi.type !== BABYLON.PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            if (this._verticalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaY < 0 && this._verticalBar.value > 0) {\r\n                    this._verticalBar.value -= this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaY > 0 && this._verticalBar.value < this._verticalBar.maximum) {\r\n                    this._verticalBar.value += this._wheelPrecision;\r\n                }\r\n            }\r\n            if (this._horizontalBar.isVisible == true) {\r\n                if ((<MouseWheelEvent>pi.event).deltaX < 0 && this._horizontalBar.value < this._horizontalBar.maximum) {\r\n                    this._horizontalBar.value += this._wheelPrecision;\r\n                } else if ((<MouseWheelEvent>pi.event).deltaX > 0 && this._horizontalBar.value > 0) {\r\n                    this._horizontalBar.value -= this._wheelPrecision;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public _renderHighlightSpecific(context: CanvasRenderingContext2D): void {\r\n        if (!this.isHighlighted) {\r\n            return;\r\n        }\r\n\r\n        super._renderHighlightSpecific(context);\r\n\r\n        this._grid._renderHighlightSpecific(context);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        let scene = this._host.getScene();\r\n        if (scene && this._onPointerObserver) {\r\n            scene.onPointerObservable.remove(this._onPointerObserver);\r\n            this._onPointerObserver = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n}","import { Measure } from \"../../measure\";\r\nimport { Container } from \"../container\";\r\nimport { ValueAndUnit } from \"../../valueAndUnit\";\r\nimport { Control } from \"../control\";\r\n\r\n/**\r\n * Class used to hold a the container for ScrollViewer\r\n * @hidden\r\n*/\r\nexport class _ScrollViewerWindow extends Container {\r\n    public parentClientWidth: number;\r\n    public parentClientHeight: number;\r\n\r\n    /**\r\n    * Creates a new ScrollViewerWindow\r\n    * @param name of ScrollViewerWindow\r\n    */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ScrollViewerWindow\";\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.left = this._currentMeasure.left;\r\n        this._measureForChildren.top = this._currentMeasure.top;\r\n\r\n        this._measureForChildren.width = parentMeasure.width;\r\n        this._measureForChildren.height = parentMeasure.height;\r\n    }\r\n\r\n    protected _postMeasure(): void {\r\n        var maxWidth = this.parentClientWidth;\r\n        var maxHeight = this.parentClientHeight;\r\n        for (var child of this.children) {\r\n            if (!child.isVisible || child.notRenderable) {\r\n                continue;\r\n            }\r\n\r\n            if (child.horizontalAlignment === Control.HORIZONTAL_ALIGNMENT_CENTER) {\r\n                child._offsetLeft(this._currentMeasure.left - child._currentMeasure.left);\r\n            }\r\n\r\n            if (child.verticalAlignment === Control.VERTICAL_ALIGNMENT_CENTER) {\r\n                child._offsetTop(this._currentMeasure.top - child._currentMeasure.top);\r\n            }\r\n\r\n            maxWidth = Math.max(maxWidth, child._currentMeasure.left - this._currentMeasure.left + child._currentMeasure.width);\r\n            maxHeight = Math.max(maxHeight, child._currentMeasure.top - this._currentMeasure.top + child._currentMeasure.height);\r\n        }\r\n\r\n        if (this._currentMeasure.width !== maxWidth) {\r\n            this._width.updateInPlace(maxWidth, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.width = maxWidth;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        if (this._currentMeasure.height !== maxHeight) {\r\n            this._height.updateInPlace(maxHeight, ValueAndUnit.UNITMODE_PIXEL);\r\n            this._currentMeasure.height = maxHeight;\r\n            this._rebuildLayout = true;\r\n            this._isDirty = true;\r\n        }\r\n\r\n        super._postMeasure();\r\n    }\r\n\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Control } from \"..\";\r\nimport { Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class ScrollBar extends BaseSlider {\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _thumbMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Scrollbar\";\r\n    }\r\n\r\n    protected _getThumbThickness(): number {\r\n        var thumbThickness = 0;\r\n        if (this._thumbWidth.isPixel) {\r\n            thumbThickness = this._thumbWidth.getValue(this._host);\r\n        }\r\n        else {\r\n            thumbThickness = this._backgroundBoxThickness * this._thumbWidth.getValue(this._host);\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        this._prepareRenderingData(\"rectangle\");\r\n        var left = this._renderLeft;\r\n\r\n        const thumbPosition = this._getThumbPosition();\r\n        context.fillStyle = this._background;\r\n\r\n        context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n        // Value bar\r\n        context.fillStyle = this.color;\r\n\r\n        // Thumb\r\n        if (this.isVertical) {\r\n            this._thumbMeasure.left = left - this._effectiveBarOffset;\r\n            this._thumbMeasure.top = this._currentMeasure.top + thumbPosition;\r\n            this._thumbMeasure.width = this._currentMeasure.width;\r\n            this._thumbMeasure.height = this._effectiveThumbThickness;\r\n        }\r\n        else {\r\n            this._thumbMeasure.left = this._currentMeasure.left + thumbPosition;\r\n            this._thumbMeasure.top = this._currentMeasure.top;\r\n            this._thumbMeasure.width = this._effectiveThumbThickness;\r\n            this._thumbMeasure.height = this._currentMeasure.height;\r\n        }\r\n\r\n        context.fillRect(this._thumbMeasure.left, this._thumbMeasure.top, this._thumbMeasure.width, this._thumbMeasure.height);\r\n\r\n        context.restore();\r\n    }\r\n\r\n    private _first: boolean;\r\n    private _originX: number;\r\n    private _originY: number;\r\n\r\n    /** @hidden */\r\n    protected _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._first) {\r\n            this._first = false;\r\n            this._originX = x;\r\n            this._originY = y;\r\n\r\n            // Check if move is required\r\n            if (x < this._thumbMeasure.left || x > this._thumbMeasure.left + this._thumbMeasure.width || y < this._thumbMeasure.top || y > this._thumbMeasure.top + this._thumbMeasure.height) {\r\n                if (this.isVertical) {\r\n                    this.value = this.minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this.maximum - this.minimum);\r\n                }\r\n                else {\r\n                    this.value = this.minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this.maximum - this.minimum);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Delta mode\r\n        let delta = 0;\r\n        if (this.isVertical) {\r\n            delta = -((y - this._originY) / (this._currentMeasure.height - this._effectiveThumbThickness));\r\n        }\r\n        else {\r\n            delta = (x - this._originX) / (this._currentMeasure.width - this._effectiveThumbThickness);\r\n        }\r\n\r\n        this.value += delta * (this.maximum - this.minimum);\r\n\r\n        this._originX = x;\r\n        this._originY = y;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        this._first = true;\r\n\r\n        return super._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n    }\r\n}\r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n};\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     *\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some((a) => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n\r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     *\r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter((a) => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n\r\n                this._connectedInputTexts = this._connectedInputTexts.filter((a) => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText);\r\n            });\r\n            this._connectedInputTexts = [];\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines\r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;\r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}","import { BaseSlider } from \"./baseSlider\";\r\nimport { Measure } from \"../../measure\";\r\nimport { Image } from \"../image\";\r\n\r\n/**\r\n * Class used to create slider controls based on images\r\n */\r\nexport class ImageBasedSlider extends BaseSlider {\r\n    private _backgroundImage: Image;\r\n    private _thumbImage: Image;\r\n    private _valueBarImage: Image;\r\n\r\n    private _tempMeasure = new Measure(0, 0, 0, 0);\r\n\r\n    public get displayThumb(): boolean {\r\n        return this._displayThumb && this.thumbImage != null;\r\n    }\r\n\r\n    public set displayThumb(value: boolean) {\r\n        if (this._displayThumb === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayThumb = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the background\r\n     */\r\n    public get backgroundImage(): Image {\r\n        return this._backgroundImage;\r\n    }\r\n\r\n    public set backgroundImage(value: Image) {\r\n        if (this._backgroundImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._backgroundImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the value bar\r\n     */\r\n    public get valueBarImage(): Image {\r\n        return this._valueBarImage;\r\n    }\r\n\r\n    public set valueBarImage(value: Image) {\r\n        if (this._valueBarImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._valueBarImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image used to render the thumb\r\n     */\r\n    public get thumbImage(): Image {\r\n        return this._thumbImage;\r\n    }\r\n\r\n    public set thumbImage(value: Image) {\r\n        if (this._thumbImage === value) {\r\n            return;\r\n        }\r\n\r\n        this._thumbImage = value;\r\n\r\n        if (value && !value.isLoaded) {\r\n            value.onImageLoadedObservable.addOnce(() => this._markAsDirty());\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageBasedSlider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ImageBasedSlider\";\r\n    }\r\n\r\n    public _draw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        this._prepareRenderingData(\"rectangle\");\r\n        const thumbPosition = this._getThumbPosition();\r\n        var left = this._renderLeft;\r\n        var top = this._renderTop;\r\n        var width = this._renderWidth;\r\n        var height = this._renderHeight;\r\n\r\n        // Background\r\n        if (this._backgroundImage) {\r\n            this._tempMeasure.copyFromFloats(left, top, width, height);\r\n            if (this.isThumbClamped && this.displayThumb) {\r\n                if (this.isVertical) {\r\n                    this._tempMeasure.height += this._effectiveThumbThickness;\r\n                } else {\r\n                    this._tempMeasure.width += this._effectiveThumbThickness;\r\n                }\r\n            }\r\n            this._backgroundImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._backgroundImage._draw(context);\r\n        }\r\n\r\n        // Bar\r\n        if (this._valueBarImage) {\r\n            if (this.isVertical) {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition + this._effectiveThumbThickness);\r\n                } else {\r\n                    this._tempMeasure.copyFromFloats(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            } else {\r\n                if (this.isThumbClamped && this.displayThumb) {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition + this._effectiveThumbThickness / 2, height);\r\n                }\r\n                else {\r\n                    this._tempMeasure.copyFromFloats(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n            this._valueBarImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._valueBarImage._draw(context);\r\n        }\r\n\r\n        // Thumb\r\n        if (this.displayThumb) {\r\n            if (this.isVertical) {\r\n                this._tempMeasure.copyFromFloats(left - this._effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, this._effectiveThumbThickness);\r\n            } else {\r\n                this._tempMeasure.copyFromFloats(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, this._effectiveThumbThickness, this._currentMeasure.height);\r\n            }\r\n\r\n            this._thumbImage._currentMeasure.copyFrom(this._tempMeasure);\r\n            this._thumbImage._draw(context);\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n}","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function(control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n};","import { IDisposable, PerfCounter, Nullable, Observer } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * This class can be used to get instrumentation data from a AdvancedDynamicTexture object\r\n */\r\nexport class AdvancedDynamicTextureInstrumentation implements IDisposable {\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureLayoutTime = false;\r\n    private _layoutTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndRenderObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onBeginLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n    private _onEndLayoutObserver: Nullable<Observer<AdvancedDynamicTexture>> = null;\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets the perf counter used to capture render time\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used to capture layout time\r\n     */\r\n    public get layoutTimeCounter(): PerfCounter {\r\n        return this._layoutTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginRenderObserver = this.texture.onBeginRenderObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndRenderObserver = this.texture.onEndRenderObservable.add(() => {\r\n                this._renderTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n            this._onBeginRenderObserver = null;\r\n            this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n            this._onEndRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the layout time capture\r\n     */\r\n    public get captureLayoutTime(): boolean {\r\n        return this._captureLayoutTime;\r\n    }\r\n\r\n    public set captureLayoutTime(value: boolean) {\r\n        if (value === this._captureLayoutTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureLayoutTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginLayoutObserver = this.texture.onBeginLayoutObservable.add(() => {\r\n                this._layoutTime.beginMonitoring();\r\n            });\r\n\r\n            this._onEndLayoutObserver = this.texture.onEndLayoutObservable.add(() => {\r\n                this._layoutTime.endMonitoring(true);\r\n            });\r\n        } else {\r\n            this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n            this._onBeginLayoutObserver = null;\r\n            this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n            this._onEndLayoutObserver = null;\r\n        }\r\n    }\r\n    /**\r\n     * Instantiates a new advanced dynamic texture instrumentation.\r\n     * This class can be used to get instrumentation data from an AdvancedDynamicTexture object\r\n     * @param texture Defines the AdvancedDynamicTexture to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented AdvancedDynamicTexture.\r\n         */\r\n        public texture: AdvancedDynamicTexture) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.texture.onBeginRenderObservable.remove(this._onBeginRenderObserver);\r\n        this._onBeginRenderObserver = null;\r\n        this.texture.onEndRenderObservable.remove(this._onEndRenderObserver);\r\n        this._onEndRenderObserver = null;\r\n        this.texture.onBeginLayoutObservable.remove(this._onBeginLayoutObserver);\r\n        this._onBeginLayoutObserver = null;\r\n        this.texture.onEndLayoutObservable.remove(this._onEndLayoutObserver);\r\n        this._onEndLayoutObserver = null;\r\n\r\n        (<any>this.texture) = null;\r\n    }\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver: Nullable<Observer<Control3D>>;\r\n    private _tooltipOutObserver: Nullable<Observer<Control3D>>;\r\n\r\n    private _disposeTooltip() {\r\n        this._tooltipFade = null;\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if (this._tooltipTexture) {\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if (this._tooltipMesh) {\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text: Nullable<string>) {\r\n        if (!text) {\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if (!this._tooltipFade) {\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene);\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene);\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\");\r\n            tooltipBackground.material = mat;\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground);\r\n            tooltipBackground.position.z = 0.05;\r\n            this._tooltipMesh.scaling.y = 1 / 3;\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh);\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3;\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(true);\r\n                }\r\n            });\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(() => {\r\n                if (this._tooltipFade) {\r\n                    this._tooltipFade.fadeIn(false);\r\n                }\r\n            });\r\n        }\r\n        if (this._tooltipTextBlock) {\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText() {\r\n        if (this._tooltipTextBlock) {\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add((pickedPoint) => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        };\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        };\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        };\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        };\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical\r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0);\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene\r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        });\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        };\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}