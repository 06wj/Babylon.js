{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if(this._isEnabled === value){\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if(this._disabledColor === value){\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        if (!this._isVisible) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    \r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if(!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if(!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach(point => {\r\n            if (point != null) point.resetLinks();\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import {Rectangle} from \"./rectangle\";\r\nimport {StackPanel} from \"./stackPanel\";\r\nimport {Control} from \"./control\";\r\nimport {TextBlock} from \"./textBlock\";\r\nimport {Checkbox} from \"./checkbox\";\r\nimport {RadioButton} from \"./radioButton\";\r\nimport {Slider} from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string, ) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if(this._groupHeader.text === \"label\") {\r\n            return\r\n        }\r\n\r\n        this._groupHeader.text = label\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n     /** Removes the selector at the given position \r\n     * @param selectorNb the position of the selector within the group\r\n    */\r\n    public removeSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup \r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup{\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean)=>{}, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    \r\n        button.onIsCheckedChangedObservable.add(function(state) {\t\t\t\t\r\n            func(state);\t\r\n        }); \r\n    \r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n    \r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup{\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n:number) => {} , checked = false): void {\t\t\t\t\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if(state) {\r\n                func(nb);\r\n            }\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup \r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup{\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v:number) => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v:number)=>{return v | 0}): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\t\t\t\t\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders \r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\"; \r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string, \r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if(groups.length > 0) {\r\n            for(var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\t\t\t\t\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n    \r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if(this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if(this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if(this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if(this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n       if(this._barColor === color) {\r\n           return;\r\n       }\r\n       \r\n       this._barColor = color;\r\n       this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if(this._barHeight === value) {\r\n            return;\r\n        }\r\n        \r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if(this._spacerHeight === value) {\r\n            return;\r\n        }\r\n        \r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if(this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for(var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if(groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n\r\n    /** Change selector label to the one given \r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */ \r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v:number)=>{return v | 0}): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n    \r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * \r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some(a => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n    \r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n        \r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     * \r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter(a => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n                \r\n                this._connectedInputTexts = this._connectedInputTexts.filter(a => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText)\r\n            });\r\n            this._connectedInputTexts = []\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver:Nullable<Observer<Control3D>>\r\n    private _tooltipOutObserver:Nullable<Observer<Control3D>>\r\n\r\n    private _disposeTooltip(){\r\n        this._tooltipFade = null;\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if(this._tooltipTexture){\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if(this._tooltipMesh){\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text:Nullable<string>){\r\n        if(!text){\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if(!this._tooltipFade){\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene)\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene)\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\")\r\n            tooltipBackground.material = mat\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground)\r\n            tooltipBackground.position.z = 0.05\r\n            this._tooltipMesh.scaling.y = 1/3\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh)\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(true)\r\n                }\r\n            })\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(false)\r\n                }\r\n            })\r\n        }\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText(){\r\n        if(this._tooltipTextBlock){\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}