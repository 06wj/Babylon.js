{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","parent","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","separator","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if(this._isEnabled === value){\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if(this._disabledColor === value){\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if(!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if(!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import {Rectangle} from \"./rectangle\";\r\nimport {StackPanel} from \"./stackPanel\";\r\nimport {Control} from \"./control\";\r\nimport {TextBlock} from \"./textBlock\";\r\nimport {Checkbox} from \"./checkbox\";\r\nimport {RadioButton} from \"./radioButton\";\r\nimport {Slider} from \"./slider\";\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string, ) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if(this._groupHeader.text === \"label\") {\r\n            return\r\n        }\r\n\r\n        this._groupHeader.text = label\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n     /** Removes the selector at the given position \r\n     * @param selectorNb the position of the selector within the group\r\n    */\r\n    public removeSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup \r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup{\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean)=>{}, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    \r\n        button.onIsCheckedChangedObservable.add(function(state) {\t\t\t\t\r\n            func(state);\t\r\n        }); \r\n    \r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n    \r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup{\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n:number) => {} , checked = false): void {\t\t\t\t\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if(state) {\r\n                func(nb);\r\n            }\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup \r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup{\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v:number) => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v:number)=>{return v | 0}): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\t\t\t\t\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\"; \r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string, \r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 4;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if(groups.length > 0) {\r\n            for(var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\t\t\t\t\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n    \r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if(this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if(this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if(this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if(this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n       if(this._barColor === color) {\r\n           return;\r\n       }\r\n       \r\n       this._barColor = color;\r\n       this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Rectangle();\r\n        separator.width = 1;\r\n        separator.height = \"5px\";\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        separator.background = this._barColor;\r\n        separator.color = \"transparent\";\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if(this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for(var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if(groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n\r\n    /** Change selector label to the one given \r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */ \r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v:number)=>{return v | 0}): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n    \r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * \r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some(a => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n    \r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        \r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     * \r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter(a => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n                \r\n                this._connectedInputTexts = this._connectedInputTexts.filter(a => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText)\r\n            });\r\n            this._connectedInputTexts = []\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver:Nullable<Observer<Control3D>>\r\n    private _tooltipOutObserver:Nullable<Observer<Control3D>>\r\n\r\n    private _disposeTooltip(){\r\n        this._tooltipFade = null;\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if(this._tooltipTexture){\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if(this._tooltipMesh){\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text:Nullable<string>){\r\n        if(!text){\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if(!this._tooltipFade){\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene)\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene)\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\")\r\n            tooltipBackground.material = mat\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground)\r\n            tooltipBackground.position.z = 0.05\r\n            this._tooltipMesh.scaling.y = 1/3\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh)\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(true)\r\n                }\r\n            })\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(false)\r\n                }\r\n            })\r\n        }\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText(){\r\n        if(this._tooltipTextBlock){\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}